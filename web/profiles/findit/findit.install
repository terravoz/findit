<?php
/**
 * @file
 * Install, update and uninstall functions for the findit installation
 * profile.
 */

require_once DRUPAL_ROOT . '/profiles/findit/findit.inc';

/**
 * Implements hook_install().
 *
 * Perform actions to set up the site for this profile.
 *
 * @see system_install()
 */
function findit_install() {
  $t = get_t();

  findit_configure_language_settings();
  findit_create_compact_date_format();

  $filtered_html_format = findit_create_filtered_html_format();
  $full_html_format = findit_create_full_html_format();

  $default_theme = 'findit_cambridge';
  $admin_theme = 'seven';

  theme_enable(array($default_theme));
  variable_set('theme_default', $default_theme);
  findit_enable_admin_theme($admin_theme);

  // Enable some standard blocks.
  findit_add_block(array(
    'module' => 'locale',
    'delta' => 'language',
    'theme' => $default_theme,
    'status' => BLOCK_CUSTOM_ENABLED,
    'weight' => 0,
    'region' => 'header',
    'visibility' => BLOCK_VISIBILITY_NOTLISTED,
    'pages' => '',
    'cache' => DRUPAL_NO_CACHE,
    'title' => '<none>',
  ));
  findit_add_block(array(
    'module' => 'findit',
    'delta' => 'main-menu-toggle',
    'theme' => $default_theme,
    'status' => BLOCK_CUSTOM_ENABLED,
    'weight' => 1,
    'region' => 'header',
    'visibility' => BLOCK_VISIBILITY_NOTLISTED,
    'pages' => '',
    'cache' => DRUPAL_NO_CACHE,
    'title' => '',
  ));
  findit_add_block(array(
    'module' => 'findit_search',
    'delta' => 'keywords',
    'theme' => $default_theme,
    'status' => BLOCK_CUSTOM_ENABLED,
    'weight' => 2,
    'region' => 'header',
    'visibility' => BLOCK_VISIBILITY_NOTLISTED,
    'pages' => '',
    'cache' => DRUPAL_NO_CACHE,
    'title' => '',
  ));
  findit_add_block(array(
    'module' => 'findit',
    'delta' => 'title',
    'theme' => $default_theme,
    'status' => BLOCK_CUSTOM_ENABLED,
    'weight' => 0,
    'region' => 'title',
    'visibility' => BLOCK_VISIBILITY_NOTLISTED,
    'pages' => "search\nsearch/*\ncalendar/month\ncalendar/month/*",
    'cache' => DRUPAL_NO_CACHE,
    'title' => '<none>',
  ));
  findit_add_block(array(
    'module' => 'findit_subscriber',
    'delta' => 'link',
    'theme' => $default_theme,
    'status' => BLOCK_CUSTOM_ENABLED,
    'weight' => 1,
    'region' => 'title',
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages' => 'node/*',
    'title' => '',
    'cache' => DRUPAL_NO_CACHE,
    'node_types' => array(
      'event',
    ),
  ));
  findit_add_block(array(
    'module' => 'findit_addtocalendar',
    'delta' => 'add-to-calendar',
    'theme' => $default_theme,
    'status' => BLOCK_CUSTOM_ENABLED,
    'weight' => 1,
    'region' => 'title',
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages' => 'node/*',
    'title' => '',
    'cache' => DRUPAL_NO_CACHE,
    'node_types' => array(
      'event',
    ),
  ));
  findit_add_block(array(
    'module' => 'findit_search',
    'delta' => 'summary',
    'theme' => $default_theme,
    'status' => BLOCK_CUSTOM_ENABLED,
    'weight' => 1,
    'region' => 'title',
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages' => "search\nsearch/*\ncalendar/month\ncalendar/month/*",
    'cache' => DRUPAL_NO_CACHE,
    'title' => '',
  ));
  findit_add_block(array(
    'module' => 'findit_search',
    'delta' => 'filters',
    'theme' => $default_theme,
    'status' => BLOCK_CUSTOM_ENABLED,
    'weight' => 2,
    'region' => 'title',
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages' => "search\nsearch/*\ncalendar/month\ncalendar/month/*",
    'cache' => DRUPAL_NO_CACHE,
    'title' => '',
  ));
  findit_add_block(array(
    'module' => 'system',
    'delta' => 'main-menu',
    'theme' => $default_theme,
    'status' => BLOCK_CUSTOM_ENABLED,
    'weight' => 0,
    'region' => 'navigation',
    'visibility' => BLOCK_VISIBILITY_NOTLISTED,
    'pages' => '',
    'cache' => DRUPAL_NO_CACHE,
    'title' => '<none>',
  ));
  findit_add_block(array(
    'module' => 'findit',
    'delta' => 'contact',
    'theme' => $default_theme,
    'status' => BLOCK_CUSTOM_ENABLED,
    'weight' => 1,
    'region' => 'navigation',
    'visibility' => BLOCK_VISIBILITY_NOTLISTED,
    'pages' => '',
    'cache' => DRUPAL_CACHE_PER_ROLE,
    'title' => '',
  ));
  findit_add_block(array(
    'module' => 'findit',
    'delta' => 'tabs',
    'theme' => $default_theme,
    'status' => BLOCK_CUSTOM_ENABLED,
    'weight' => 0,
    'region' => 'utilities',
    'visibility' => BLOCK_VISIBILITY_NOTLISTED,
    'pages' => '',
    'cache' => DRUPAL_NO_CACHE,
    'title' => '',
  ));
  findit_add_block(array(
    'module' => 'findit',
    'delta' => 'messages',
    'theme' => $default_theme,
    'status' => BLOCK_CUSTOM_ENABLED,
    'weight' => 1,
    'region' => 'utilities',
    'visibility' => BLOCK_VISIBILITY_NOTLISTED,
    'pages' => '',
    'cache' => DRUPAL_NO_CACHE,
    'title' => '',
  ));
  findit_add_block(array(
    'module' => 'system',
    'delta' => 'main',
    'theme' => $default_theme,
    'status' => BLOCK_CUSTOM_ENABLED,
    'weight' => 0,
    'region' => 'content',
    'visibility' => BLOCK_VISIBILITY_NOTLISTED,
    'pages' => '',
    'cache' => DRUPAL_NO_CACHE,
    'title' => '',
  ));
  findit_add_block(array(
    'module' => 'views',
    'delta' => 'directory-block_activity',
    'theme' => $default_theme,
    'status' => BLOCK_CUSTOM_ENABLED,
    'weight' => 10,
    'region' => 'content',
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages' => 'directory',
    'cache' => DRUPAL_NO_CACHE,
    'title' => '',
  ));
  findit_add_block(array(
    'module' => 'findit',
    'delta' => 'hero',
    'theme' => $default_theme,
    'status' => BLOCK_CUSTOM_ENABLED,
    'weight' => 0,
    'region' => 'content',
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages' => '<front>',
    'cache' => DRUPAL_CACHE_PER_ROLE,
    'title' => '',
  ));
  findit_add_block(array(
    'module' => 'findit',
    'delta' => 'highlights',
    'theme' => $default_theme,
    'status' => BLOCK_CUSTOM_ENABLED,
    'weight' => 2,
    'region' => 'content',
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages' => '<front>',
    'cache' => DRUPAL_CACHE_PER_ROLE,
    'title' => '',
  ));
  findit_add_block(array(
    'module' => 'views',
    'delta' => 'event_calendar-block_2',
    'theme' => $default_theme,
    'status' => BLOCK_CUSTOM_ENABLED,
    'weight' => 3,
    'region' => 'content',
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages' => '<front>',
    'cache' => DRUPAL_CACHE_PER_ROLE,
    'title' => '',
  ));
  findit_add_block(array(
    'module' => 'findit',
    'delta' => 'registration',
    'theme' => $default_theme,
    'status' => BLOCK_CUSTOM_ENABLED,
    'weight' => 10,
    'region' => 'content',
    'visibility' => BLOCK_VISIBILITY_NOTLISTED,
    'pages' => '',
    'cache' => DRUPAL_NO_CACHE,
    'title' => '',
    'node_types' => array(
      'event',
      'program',
    ),
  ));
  findit_add_block(array(
    'module' => 'findit',
    'delta' => 'costs',
    'theme' => $default_theme,
    'status' => BLOCK_CUSTOM_ENABLED,
    'weight' => 11,
    'region' => 'content',
    'visibility' => BLOCK_VISIBILITY_NOTLISTED,
    'pages' => '',
    'cache' => DRUPAL_NO_CACHE,
    'title' => '',
    'node_types' => array(
      'event',
      'program',
    ),
  ));
  findit_add_block(array(
    'module' => 'findit',
    'delta' => 'affiliated-organizations',
    'theme' => $default_theme,
    'status' => BLOCK_CUSTOM_ENABLED,
    'weight' => 9,
    'region' => 'content',
    'visibility' => BLOCK_VISIBILITY_NOTLISTED,
    'pages' => '',
    'cache' => DRUPAL_NO_CACHE,
    'title' => '',
    'node_types' => array(
      'organization',
    ),
  ));
  findit_add_block(array(
    'module' => 'findit',
    'delta' => 'related-programs',
    'theme' => $default_theme,
    'status' => BLOCK_CUSTOM_ENABLED,
    'weight' => 10,
    'region' => 'content',
    'visibility' => BLOCK_VISIBILITY_NOTLISTED,
    'pages' => '',
    'cache' => DRUPAL_NO_CACHE,
    'title' => '',
    'node_types' => array(
      'organization',
    ),
  ));
  findit_add_block(array(
    'module' => 'findit',
    'delta' => 'related-events',
    'theme' => $default_theme,
    'status' => BLOCK_CUSTOM_ENABLED,
    'weight' => 10,
    'region' => 'content',
    'visibility' => BLOCK_VISIBILITY_NOTLISTED,
    'pages' => '',
    'cache' => DRUPAL_NO_CACHE,
    'title' => '',
    'node_types' => array(
      'organization',
      'program',
    ),
  ));
  findit_add_block(array(
    'module' => 'menu',
    'delta' => 'footer-menu',
    'theme' => $default_theme,
    'status' => BLOCK_CUSTOM_ENABLED,
    'weight' => 0,
    'region' => 'footer',
    'visibility' => BLOCK_VISIBILITY_NOTLISTED,
    'pages' => '',
    'cache' => DRUPAL_NO_CACHE,
    'title' => '<none>',
  ));
  findit_add_block(array(
    'module' => 'findit',
    'delta' => 'credits',
    'theme' => $default_theme,
    'status' => BLOCK_CUSTOM_ENABLED,
    'weight' => 1,
    'region' => 'footer',
    'visibility' => BLOCK_VISIBILITY_NOTLISTED,
    'pages' => '',
    'cache' => DRUPAL_CACHE_PER_ROLE,
    'title' => '',
  ));
  findit_add_block(array(
    'module' => 'findit',
    'delta' => 'sponsors',
    'theme' => $default_theme,
    'status' => BLOCK_CUSTOM_ENABLED,
    'weight' => 2,
    'region' => 'footer',
    'visibility' => BLOCK_VISIBILITY_NOTLISTED,
    'pages' => '',
    'cache' => DRUPAL_CACHE_PER_ROLE,
    'title' => '',
  ));
  findit_add_block(array(
    'module' => 'system',
    'delta' => 'main',
    'theme' => $admin_theme,
    'status' => BLOCK_CUSTOM_ENABLED,
    'weight' => 0,
    'region' => 'content',
    'visibility' => BLOCK_VISIBILITY_NOTLISTED,
    'pages' => '',
    'cache' => DRUPAL_NO_CACHE,
    'title' => '',
  ));
  findit_add_block(array(
    'module' => 'system',
    'delta' => 'help',
    'theme' => $admin_theme,
    'status' => BLOCK_CUSTOM_ENABLED,
    'weight' => 0,
    'region' => 'help',
    'visibility' => BLOCK_VISIBILITY_NOTLISTED,
    'pages' => '',
    'cache' => DRUPAL_NO_CACHE,
    'title' => '',
  ));
  findit_add_block(array(
    'module' => 'user',
    'delta' => 'login',
    'theme' => $admin_theme,
    'status' => BLOCK_CUSTOM_ENABLED,
    'weight' => 10,
    'region' => 'content',
    'visibility' => BLOCK_VISIBILITY_NOTLISTED,
    'pages' => '',
    'cache' => DRUPAL_NO_CACHE,
    'title' => '',
  ));

  findit_add_menu('footer-menu', $t('Footer menu'), $t('The <em>Footer menu</em> contains useful links for site visitors.'));
  findit_add_menu_link('footer-menu', $t('Provider login'), 'user', 0);
  findit_add_menu_link('footer-menu', $t('Reminder Subscriptions'), 'subscriber', 1);
  findit_add_menu_link('main-menu', $t('Home'), '<front>', -1);

  $vocabularies = array(
    'accessibility_options' => $t('Accessibility'),
    'amenities' => $t('Amenities'),
    'grade_eligibility_options' => $t('Grade eligibility'),
    'neighborhoods' => $t('Neighborhoods'),
    'other_eligibility_options' => $t('Other eligibility'),
    'program_categories' => $t('Program categories'),
    'time_day_of_week' => $t('Day of the week'),
    'time_of_day' => $t('Time of day'),
    'time_of_year' => $t('Time of year'),
    'time_other' => $t('Other times'),
  );

  foreach ($vocabularies as $machine_name => $name) {
    findit_create_vocabulary($name, $machine_name);
    findit_vocabulary_load_terms($machine_name, dirname(__FILE__) . "/data/$machine_name.json");
  }

  findit_add_node_type_page();
  findit_add_node_type_organization();
  findit_add_node_type_program();
  findit_add_node_type_event();
  findit_add_node_type_location();
  findit_add_node_type_contact();
  findit_add_node_type_callout();
  findit_add_node_type_content_alert();

  $node_types = array(
    'page' => array('file_name' => 'pages.json', 'migration_class' => 'NodeJSONMigration'),
    'contact' => array('file_name' => 'contacts.json', 'migration_class' => 'ContactJSONMigration'),
    'location' => array('file_name' => 'locations.json', 'migration_class' => 'LocationJSONMigration'),
    'organization' => array('file_name' => 'organizations.json', 'migration_class' => 'OrganizationJSONMigration'),
    'program' => array('file_name' => 'programs.json', 'migration_class' => 'ProgramJSONMigration'),
    'event' => array('file_name' => 'events.json', 'migration_class' => 'EventJSONMigration'),
    'callout' => array('file_name' => 'callouts.json', 'migration_class' => 'CalloutJSONMigration'),
  );

  foreach ($node_types as $machine_name => $definition) {
    findit_load_nodes($machine_name, dirname(__FILE__) . "/data/{$definition['file_name']}", $definition['migration_class']);
  }

  $q = new EntityFieldQuery();
  $q->entityCondition('entity_type', 'node');
  $result = $q->execute();
  module_load_include('pathauto.inc', 'pathauto');
  pathauto_node_update_alias_multiple(array_keys($result['node']), 'bulkupdate');

  findit_configure_image_styles();

  findit_add_subscriber_type_sms();
  findit_add_subscriber_type_email();

  findit_configure_people();
  findit_create_admin_role();
  findit_create_service_provider_role();
  findit_create_content_manager_role();

  // Enable default permissions for system roles.
  $filtered_html_permission = filter_permission_name($filtered_html_format);
  user_role_grant_permissions(DRUPAL_ANONYMOUS_RID, array(
    'access content',
    $filtered_html_permission,
    'create sms subscriber',
    'update own sms subscriber',
    'create email subscriber',
    'update own email subscriber',
  ));
  user_role_grant_permissions(DRUPAL_AUTHENTICATED_RID, array(
    'access content',
    $filtered_html_permission,
    'create sms subscriber',
    'update own sms subscriber',
    'create email subscriber',
    'update own email subscriber',
  ));

  $service_provider_rid = user_role_load_by_name(FINDIT_ROLE_SERVICE_PROVIDER)->rid;
  user_save((object) array(
    'name' => 'provider',
    'mail' => 'provider@finditcambridge.org',
    'status' => 1,
    'timezone' => date_default_timezone_get(),
    'roles' => array($service_provider_rid => $service_provider_rid),
  ), array('pass' => 'provider'));

  findit_configure_content_index_view_mode();
  findit_configure_search();
  findit_configure_jquery_update();
  findit_configure_killfile_for_content_types(array_keys(node_type_get_types()));

  variable_set('clone_use_node_type_name', 1);
  variable_set('search_active_modules', array('node' => 'node'));
  variable_set('date_format_long', 'D, M d, Y, h:ia');
  variable_set('date_format_medium', 'F j, Y, h:ia');
  variable_set('pathauto_node_pattern', '[node:type]/[node:title]');
  variable_set('site_frontpage', 'frontpage');

  /*CONTENT ALERT MODULE PERMISSIONS*/
  $permissions = array(
    'create content_alert content',
  );

  user_role_grant_permissions(DRUPAL_ANONYMOUS_RID, $permissions);
  user_role_grant_permissions(DRUPAL_AUTHENTICATED_RID, $permissions);
}

/**
 * Configures language settings.
 */
function findit_configure_language_settings() {
  locale_add_language('es', NULL, NULL, LANGUAGE_LTR, '', '', TRUE);

  language_negotiation_set('language', array(
    'locale-url' => array('weight' => -4),
    'locale-browser' => array('weight' => -1),
    'language-default' => array('weight' => 0),
  ));

  $menu = menu_load('main-menu');
  $menu['i18n_mode'] = I18N_MODE_MULTIPLE;
  menu_save($menu);
}

/**
 * Configures image styles.
 */
function findit_configure_image_styles() {
  $style = image_style_save(array(
    'name' => 'large',
    'label' => 'Large (960x960)',
  ));
  $effects = image_effect_save(array(
    'isid' => $style['isid'],
    'weight'=> 0,
    'name' => 'image_scale',
    'data' => array('width' => '960', 'height' => '960', 'upscale' => 0),
  ));
  $style = image_style_save(array(
    'name' => 'medium',
    'label' => 'Medium (600x600)',
  ));
  $effects = image_effect_save(array(
    'isid' => $style['isid'],
    'weight'=> 1,
    'name' => 'image_scale',
    'data' => array('width' => '600', 'height' => '600', 'upscale' => 1),
  ));
  $style = image_style_save(array(
    'name' => FINDIT_IMAGE_STYLE_FEATURED_IMAGE,
    'label' => 'Featured image',
  ));
  image_effect_save(array(
    'isid' => $style['isid'],
    'weight'=> 0,
    'name' => 'manualcrop_crop',
    'data' => array(
      'width' => '100',
      'height' => '100',
      'keepproportions' => 0,
      'reuse_crop_style' => '',
      'style_name' => FINDIT_IMAGE_STYLE_FEATURED_IMAGE
    ),
  ));
  image_effect_save(array(
    'isid' => $style['isid'],
    'weight'=> 1,
    'name' => 'image_scale',
    'data' => array(
      'width' => '629',
      'height' => '629',
      'upscale' => 0
    ),
  ));
}

/**
 * Creates the filtered html format.
 *
 * @return object
 *   The filtereed html format object
 */
function findit_create_filtered_html_format() {
  $filtered_html_format = (object) array(
    'format' => 'filtered_html',
    'name' => 'Filtered HTML',
    'weight' => 0,
    'filters' => array(
      // URL filter.
      'filter_url' => array(
        'weight' => 0,
        'status' => 1,
      ),
      // HTML filter.
      'filter_html' => array(
        'weight' => 1,
        'status' => 1,
      ),
      // Line break filter.
      'filter_autop' => array(
        'weight' => 2,
        'status' => 1,
      ),
      // HTML corrector filter.
      'filter_htmlcorrector' => array(
        'weight' => 10,
        'status' => 1,
      ),
    ),
  );
  filter_format_save($filtered_html_format);
  return $filtered_html_format;
}

/**
 * Creates the full html format.
 *
 * @return object
 *   The full html format object
 */
function findit_create_full_html_format() {
  $full_html_format = (object) array(
    'format' => 'full_html',
    'name' => 'Full HTML',
    'weight' => 1,
    'filters' => array(
      // URL filter.
      'filter_url' => array(
        'weight' => 0,
        'status' => 1,
      ),
      // Line break filter.
      'filter_autop' => array(
        'weight' => 1,
        'status' => 1,
      ),
      // HTML corrector filter.
      'filter_htmlcorrector' => array(
        'weight' => 10,
        'status' => 1,
      ),
    ),
  );
  filter_format_save($full_html_format);
  return $full_html_format;
}

/**
 * Create a default role for site administrators.
 *
 * All available permissions are assigned to that role.
 */
function findit_create_admin_role() {
  $admin_role = new stdClass();
  $admin_role->name = 'administrator';
  $admin_role->weight = 2;
  user_role_save($admin_role);
  user_role_grant_permissions($admin_role->rid, array_keys(module_invoke_all('permission')));
  // Set this as the administrator role.
  variable_set('user_admin_role', $admin_role->rid);
  // Assign user 1 the "administrator" role.
  db_insert('users_roles')
    ->fields(array('uid' => 1, 'rid' => $admin_role->rid))
    ->execute();
}

/**
 * Create a default role for organization managers.
 */
function findit_create_service_provider_role() {
  $role = new stdClass();
  $role->name = FINDIT_ROLE_SERVICE_PROVIDER;
  $role->weight = 3;
  user_role_save($role);
  user_role_grant_permissions($role->rid, array(
    'access content',
    'access contextual links',
    'access toolbar',
    'clone own nodes',
    'create organization content',
    'edit own organization content',
    'delete own organization content',
    'create program content',
    'edit own program content',
    'delete own program content',
    'create event content',
    'edit own event content',
    'delete own event content',
    'create contact content',
    'edit own contact content',
    'create location content',
    'edit own location content',
    'delete own location content',
    'view own unpublished content',
    'view revisions',
    'view the administration theme',
    'access findit dashboard',
  ));
}

/**
 * Create a default role for content managers.
 */
function findit_create_content_manager_role() {
  $role = new stdClass();
  $role->name = FINDIT_ROLE_CONTENT_MANAGER;
  $role->weight = 4;
  user_role_save($role);

  $permissions = array(
    'access content',
    'access content overview',
    'administer nodes',
    'administer nodequeue',
    'clone node',
    'clone own nodes',
    'access findit dashboard',
    'access findit settings',
    'access findit statistics',
    'access killfiled content',
    'bypass killfiled content',
    'undelete killfiled content',
  );

  $types = array_keys(node_type_get_types());
  foreach ( $types as $type ) {
    $permissions[] = "create $type content";
    $permissions[] = "edit own $type content";
    if($type != 'location') {
      $permissions[] = "edit any $type content";
    }
    if($type != 'content_alert') {
      $permissions[] = "delete own $type content";
      $permissions[] = "delete any $type content";
    }
  }

  user_role_grant_permissions($role->rid, $permissions);
}

/**
 * Create 'Compact' date format.
 */
function findit_create_compact_date_format() {
  $format_type = array();
  $format_type['title'] = t('Compact');
  $format_type['type'] = 'compact';
  $format_type['locked'] = 1;
  $format_type['is_new'] = 1;
  system_date_format_type_save($format_type);
  variable_set('date_format_' . $format_type['type'], 'F j, Y');
}

/**
 * Configures clone module.
 */
function findit_configure_clone() {
  foreach (array_keys(node_type_get_types()) as $type) {
    variable_set("clone_reset_$type", 1);
  }
  variable_set('clone_use_node_type_name', 1);
}

/**
 * Configures user settings.
 */
function findit_configure_people() {
  variable_set('user_pictures', FALSE);
  variable_set('user_register', USER_REGISTER_VISITORS_ADMINISTRATIVE_APPROVAL);
  variable_set('user_email_verification', TRUE);

  $entity = 'user';
  $bundle = 'user';

  $first_name = findit_add_text_field($entity, FINDIT_FIELD_FIRST_NAME, $bundle, st('First name'));
  findit_instance_set_settings($first_name, array('user_register_form' => 1));
  field_update_instance($first_name);

  $last_name = findit_add_text_field($entity, FINDIT_FIELD_LAST_NAME, $bundle, st('Last name'));
  findit_instance_set_settings($last_name, array('user_register_form' => 1));
  field_update_instance($last_name);

  $organization_name = findit_add_text_field($entity, FINDIT_FIELD_ORGANIZATION_NAME, $bundle, st('Organization name'));
  findit_instance_set_settings($organization_name, array('user_register_form' => 1));
  field_update_instance($organization_name);

  $phone_number = findit_add_text_field($entity, FINDIT_FIELD_PHONE_NUMBER, $bundle, st('Phone number'));
  findit_instance_set_settings($phone_number, array('user_register_form' => 1));
  field_update_instance($phone_number);
}

/**
 * Creates a custom menu with the given name, title and description.
 */
function findit_add_menu($menu_name, $title, $description = '') {
  $menu = array(
    'menu_name' => $menu_name,
    'title' => $title,
    'description' => $description,
    'i18n' => I18N_MODE_MULTIPLE,
  );
  menu_save($menu);
}

/**
 * Adds a menu link to the given menu.
 *
 * @param string $menu_name
 * @param string $title
 * @param string $path
 * @param int $weight
 */
function findit_add_menu_link($menu_name, $title, $path, $weight = 0) {
  $item = array(
    'menu_name' => $menu_name,
    'link_title' => $title,
    'link_path' => $path,
    'weight' => $weight,
  );
  menu_link_save($item);
}

/**
 * Creates content type Basic page.
 */
function findit_add_node_type_page() {
  $bundle = 'page';

  // Content type setup.

  $type = array(
    'type' => $bundle,
    'name' => st('Basic page'),
    'base' => 'node_content',
    'description' => st("Use <em>basic pages</em> for your static content, such as an 'About us' page."),
    'custom' => 1,
    'modified' => 1,
    'locked' => 0,
  );
  $type = node_type_set_defaults($type);
  node_type_save($type);
  rdf_mapping_save(array(
    'type' => 'node',
    'bundle' => $bundle,
    'mapping' => array(
      'rdftype' => array('foaf:Document'),
    ),
  ));
  variable_set("node_preview_$bundle", DRUPAL_DISABLED);
  variable_set("node_options_$bundle", array('status', 'revision'));
  variable_set("node_submitted_$bundle", FALSE);
  variable_set("language_content_type_$bundle", TRANSLATION_ENABLED);
  variable_set("clone_reset_$bundle", 1);

  // Add fields.

  $body = node_add_body_field($type);
  findit_instance_set_settings($body, array('display_summary' => 0));
  findit_instance_set_widget_setting($body, 'rows', 4);
  findit_instance_set_maxlength($body, 500);
  field_update_instance($body);
}

/**
 * Creates content type Organization.
 */
function findit_add_node_type_organization() {
  $bundle = 'organization';

  // Content type setup.

  $type = array(
    'type' => $bundle,
    'name' => st('Organization'),
    'base' => 'node_content',
    'description' => st(""),
    'custom' => 1,
    'modified' => 1,
    'locked' => 0,
    'title_label' => st('Organization name'),
  );
  $type = node_type_set_defaults($type);
  node_type_save($type);
  rdf_mapping_save(array(
    'type' => 'node',
    'bundle' => $bundle,
    'mapping' => array(
      'rdftype' => array('foaf:Document'),
    ),
  ));
  variable_set("node_preview_$bundle", DRUPAL_DISABLED);
  variable_set("node_options_$bundle", array('revision'));
  variable_set("node_submitted_$bundle", TRUE);
  variable_set("language_content_type_$bundle", TRANSLATION_ENABLED);
  variable_set("clone_reset_$bundle", 1);

  // Add fields.

  $body = node_add_body_field((object) array('type' => $bundle), st('Organization description'));
  findit_instance_set_settings($body, array('display_summary' => 0));
  findit_instance_set_widget_setting($body, 'rows', 4);
  findit_instance_set_maxlength($body, 500);
  findit_instance_set_label_help_description($body, st('Brief description of what your organization is all about. Avoid technical or complex terminology. The first 15 words or so will be displayed in search results.'));
  findit_instance_set_display_type($body, 'teaser', 'text_trimmed_ellipsis');
  findit_instance_set_display_settings($body, 'teaser', array('trim_length' => 155));
  field_update_instance($body);

  $logo = findit_add_image_field('node', FINDIT_FIELD_LOGO, $bundle, st('Picture or logo'));
  findit_configure_image_field_cropping($logo);
  field_update_instance($logo);

  $parent_organization = findit_add_entityreference_field('node', FINDIT_FIELD_PARENT_ORGANIZATION, 'organization', array('organization'), st('Parent organization'));
  findit_instance_set_label_help_description($parent_organization, st('If this organization is part of a larger organization, please type the name of the larger organization here.'));
  findit_instance_set_display_label($parent_organization, 'default', 'hidden');
  findit_instance_set_display_settings($parent_organization, 'default', array('link' => TRUE));
  field_update_instance($parent_organization);

  // Creates FINDIT_FIELD_CONTACTS field.
  findit_add_contacts_field($bundle, st('Contacts'));

  $contacts_additional_info = findit_add_text_long_field('node', FINDIT_FIELD_CONTACTS_ADDITIONAL_INFORMATION, $bundle, st('Additional information'));
  findit_instance_set_label_help_description($contacts_additional_info, st('If needed, insert additional contact information below.'));
  field_update_instance($contacts_additional_info);

  findit_add_locations_field($bundle, st('Organization locations'));

  $always_open = findit_add_list_text_field('node', FINDIT_FIELD_ALWAYS_OPEN, $bundle, st('When is this organization open?'));
  findit_field_set_allowed_values(FINDIT_FIELD_ALWAYS_OPEN, array(
    'office_hours' => st('This organization has specific office hours.'),
    'anytime' => st('This organization does not have specific hours. You can contact them at any time.'),
    'always' => st('This organization is open everyday 24 hours a day.'),
  ));
  findit_instance_set_required($always_open);
  findit_instance_set_widget_type($always_open, 'options_buttons');
  findit_instance_set_default_value($always_open, array(0 => array('value' => 'office_hours')));
  findit_instance_set_display_label($always_open, 'default', 'hidden');
  field_update_instance($always_open);

  $operation_hours = findit_add_office_hours_field('node', FINDIT_FIELD_OPERATION_HOURS, $bundle, st('Hours of operation'), FIELD_CARDINALITY_UNLIMITED);
  findit_field_set_granularity(FINDIT_FIELD_OPERATION_HOURS, 5);
  findit_field_set_setting(FINDIT_FIELD_OPERATION_HOURS, 'hoursformat', 1);
  findit_field_set_setting(FINDIT_FIELD_OPERATION_HOURS, 'valhrs', 1);
  findit_instance_set_description($operation_hours, st('Fill in with the hours of operation for the organization, if applicable.'));
  findit_instance_set_display_label($operation_hours, 'default', 'hidden');
  field_update_instance($operation_hours);

  $organization_url = findit_add_url_field('node', FINDIT_FIELD_ORGANIZATION_URL, $bundle, st("Organization's URL"));
  findit_instance_set_label_help_description($organization_url, st("Enter the URL of the organization's website, if any. Don't forget to insert a 'http://' or a 'https://' at the beginning of the URL provided."));
  findit_instance_set_display_label($organization_url, 'default', 'hidden');
  field_update_instance($organization_url);

  $facebook_page = findit_add_url_field('node', FINDIT_FIELD_FACEBOOK_PAGE, $bundle, st("Organization's Facebook page"));
  findit_instance_set_label_help_description($facebook_page, st("Enter the URL of the organization's Facebook page, if any. Don't forget to insert a 'http://' or a 'https://' at the beginning of the URL provided."));
  findit_instance_set_display_label($facebook_page, 'default', 'hidden');
  field_update_instance($facebook_page);

  $twitter_handle = findit_add_url_field('node', FINDIT_FIELD_TWITTER_HANDLE, $bundle, st("Organization's Twitter handle"));
  findit_instance_set_label_help_description($twitter_handle, st("Enter the organization's Twitter handle/username, if any. Don't forget to insert a 'http://' or a 'https://' at the beginning of the URL provided."));
  findit_instance_set_display_label($twitter_handle, 'default', 'hidden');
  field_update_instance($twitter_handle);

  $instagram_url = findit_add_url_field('node', FINDIT_FIELD_INSTAGRAM_URL, $bundle, st("Organization's Instagram URL"));
  findit_instance_set_label_help_description($instagram_url, st("Enter the organization's Instagram URL, if any.  Don't forget to insert a 'http://' or a 'https://' at the beginning of the URL provided."));
  findit_instance_set_display_label($instagram_url, 'default', 'hidden');
  field_update_instance($instagram_url);

  $tumblr_url = findit_add_url_field('node', FINDIT_FIELD_TUMBLR_URL, $bundle, st("Organization's Tumblr URL"));
  findit_instance_set_label_help_description($tumblr_url, st("Enter the organization's Tumblr URL, if any.  Don't forget to insert a 'http://' or a 'https://' at the beginning of the URL provided."));
  findit_instance_set_display_label($tumblr_url, 'default', 'hidden');
  field_update_instance($tumblr_url);

  $organization_notes = findit_add_text_long_field('node', FINDIT_FIELD_ORGANIZATION_NOTES, $bundle, st('Organization notes'));
  findit_instance_set_label_help_description($organization_notes, st('Information about special hours and other elements that may not fit above.'));
  field_update_instance($organization_notes);

  // Group fields.

  $weight = 0;
  $group_basic_information = (object) array(
    'identifier' => "group_basic_information|node|$bundle|form",
    'group_name' => 'group_basic_information',
    'entity_type' => 'node',
    'bundle' => $bundle,
    'mode' => 'form',
    'label' => st('What'),
    'weight' => $weight++,
    'children' => array(
      'title',
      'body',
      FINDIT_FIELD_LOGO,
      FINDIT_FIELD_PARENT_ORGANIZATION,
    ),
    'format_type' => 'tab',
    'format_settings' => array(
      'instance_settings' => array(
        'required_fields' => 1,
        'show_label' => 1,
      ),
      'formatter' => 'open',
    ),
  );
  field_group_group_save($group_basic_information);

  $group_where = (object) array(
    'identifier' => "group_where|node|$bundle|form",
    'group_name' => 'group_where',
    'entity_type' => 'node',
    'bundle' => $bundle,
    'mode' => 'form',
    'label' => st('Where'),
    'weight' => $weight++,
    'children' => array(
      FINDIT_FIELD_LOCATIONS,
    ),
    'format_type' => 'tab',
    'format_settings' => array(
      'instance_settings' => array(
        'required_fields' => 1,
        'show_label' => 1,
      ),
      'formatter' => 'open',
    ),
  );
  field_group_group_save($group_where);

  $group_when = (object) array(
    'identifier' => "group_when|node|$bundle|form",
    'group_name' => 'group_when',
    'entity_type' => 'node',
    'bundle' => $bundle,
    'mode' => 'form',
    'label' => st('When'),
    'weight' => $weight++,
    'children' => array(
      FINDIT_FIELD_ALWAYS_OPEN,
      FINDIT_FIELD_OPERATION_HOURS,
    ),
    'format_type' => 'tab',
    'format_settings' => array(
      'instance_settings' => array(
        'required_fields' => 1,
        'show_label' => 1,
      ),
      'formatter' => 'open',
    ),
  );
  field_group_group_save($group_when);

  $group_additional_information = (object) array(
    'identifier' => "group_additional_information|node|$bundle|form",
    'group_name' => 'group_additional_information',
    'entity_type' => 'node',
    'bundle' => $bundle,
    'mode' => 'form',
    'label' => st('Websites, Social Media and Additional Information'),
    'weight' => $weight++,
    'children' => array(
      FINDIT_FIELD_ORGANIZATION_URL,
      FINDIT_FIELD_FACEBOOK_PAGE,
      FINDIT_FIELD_TWITTER_HANDLE,
      FINDIT_FIELD_INSTAGRAM_URL,
      FINDIT_FIELD_TUMBLR_URL,
      FINDIT_FIELD_ORGANIZATION_NOTES,
    ),
    'format_type' => 'tab',
    'format_settings' => array(
      'instance_settings' => array(
        'required_fields' => 0,
        'show_label' => 1,
      ),
      'formatter' => 'open',
    ),
  );
  field_group_group_save($group_additional_information);

  $group_contact_info = (object) array(
    'identifier' => "group_contact_info|node|$bundle|form",
    'group_name' => 'group_contact_info',
    'entity_type' => 'node',
    'bundle' => $bundle,
    'mode' => 'form',
    'label' => st('Contact Information'),
    'weight' => $weight++,
    'children' => array(
      FINDIT_FIELD_CONTACTS,
      FINDIT_FIELD_CONTACTS_ADDITIONAL_INFORMATION,
    ),
    'format_type' => 'tab',
    'format_settings' => array(
      'instance_settings' => array(
        'required_fields' => 1,
        'show_label' => 1,
      ),
      'formatter' => 'open',
    ),
  );
  field_group_group_save($group_contact_info);
}

/**
 * Creates content type Program.
 */
function findit_add_node_type_program() {
  $bundle = 'program';

  // Content type setup.

  $type = array(
    'type' => $bundle,
    'name' => st('Program'),
    'base' => 'node_content',
    'description' => st(""),
    'custom' => 1,
    'modified' => 1,
    'locked' => 0,
    'title_label' => st('Program name'),
  );
  $type = node_type_set_defaults($type);
  node_type_save($type);
  rdf_mapping_save(array(
    'type' => 'node',
    'bundle' => $bundle,
    'mapping' => array(
      'rdftype' => array('foaf:Document'),
    ),
  ));
  variable_set("node_preview_$bundle", DRUPAL_DISABLED);
  variable_set("node_options_$bundle", array('revision'));
  variable_set("node_submitted_$bundle", TRUE);
  variable_set("language_content_type_$bundle", TRANSLATION_ENABLED);
  variable_set("clone_reset_$bundle", 1);

  // Add fields.

  $organizations = findit_add_entityreference_field('node', FINDIT_FIELD_ORGANIZATIONS, $bundle, array('organization'), st('Organizations'), FIELD_CARDINALITY_UNLIMITED);
  findit_instance_set_required($organizations);
  findit_instance_set_label_help_description($organizations, st('Type in the organization(s) responsible for this program. We will need that information to connect this form with the organization.'));
  findit_instance_set_display_label($organizations, 'default', 'hidden');
  findit_instance_set_display_settings($organizations, 'default', array('link' => TRUE));
  field_update_instance($organizations);

  $body = node_add_body_field((object) array('type' => $bundle), st('Program description'));
  findit_instance_set_settings($body, array('display_summary' => 0));
  findit_instance_set_widget_setting($body, 'rows', 4);
  findit_instance_set_maxlength($body, 500);
  findit_instance_set_label_help_description($body, st('Brief description of what your program is all about. Avoid technical or complex terminology. The first 15 words or so will be displayed in search results.'));
  findit_instance_set_display_type($body, 'teaser', 'text_trimmed_ellipsis');
  findit_instance_set_display_settings($body, 'teaser', array('trim_length' => 155));
  field_update_instance($body);

  $program_categories = findit_add_term_reference_field('node', FINDIT_FIELD_PROGRAM_CATEGORIES, $bundle, 'program_categories', st('Program categories'), FIELD_CARDINALITY_UNLIMITED);
  findit_instance_set_widget_type($program_categories, 'options_buttons');
  findit_instance_set_label_help_description($program_categories, st('Check all that apply'));
  findit_instance_set_display_label($program_categories, 'default', 'hidden');
  field_update_instance($program_categories);

  $logo = findit_add_image_field('node', FINDIT_FIELD_LOGO, $bundle, st('Picture or logo'));
  findit_configure_image_field_cropping($logo);
  field_update_instance($logo);

  $ongoing = findit_add_list_text_field('node', FINDIT_FIELD_ONGOING, $bundle, st('Is this an ongoing program, does it run during school days, or does it only run between specific start and end dates?'));
  findit_field_set_allowed_values(FINDIT_FIELD_ONGOING, array(
    'between' => st('This program runs between a start and an end date.'),
    'school' => st('This program runs during the school year.'),
    'ongoing' => st('This is an ongoing program.'),
  ));
  findit_instance_set_required($ongoing);
  findit_instance_set_widget_type($ongoing, 'options_buttons');
  findit_instance_set_default_value($ongoing, array(0 => array('value' => 'ongoing')));
  findit_instance_set_display_label($ongoing, 'default', 'hidden');
  field_update_instance($ongoing);

  $program_period = findit_add_date_field('node', FINDIT_FIELD_PROGRAM_PERIOD, $bundle, st('Program start and end'), 1);
  findit_field_set_setting(FINDIT_FIELD_PROGRAM_PERIOD, 'todate', 'required');
  findit_field_set_granularity(FINDIT_FIELD_PROGRAM_PERIOD, array('year', 'month', 'day'));
  findit_instance_set_display_settings($program_period, 'default', array(
    'format_type' => 'long',
  ));
  field_update_instance($program_period);

  $program_time_day_of_week = findit_add_term_reference_field('node', FINDIT_FIELD_TIME_DAY_OF_WEEK, $bundle, 'time_day_of_week', st('Day of the week'), FIELD_CARDINALITY_UNLIMITED);
  findit_instance_set_widget_type($program_time_day_of_week, 'options_buttons');
  findit_instance_set_display_type($program_time_day_of_week, 'default', 'taxonomy_term_reference_plain');
  findit_instance_set_display_label($program_time_day_of_week, 'default', 'inline');
  field_update_instance($program_time_day_of_week);

  $program_time_of_day = findit_add_term_reference_field('node', FINDIT_FIELD_TIME_OF_DAY, $bundle, 'time_of_day', st('Time of day'), FIELD_CARDINALITY_UNLIMITED);
  findit_instance_set_widget_type($program_time_of_day, 'options_buttons');
  findit_instance_set_display_type($program_time_of_day, 'default', 'taxonomy_term_reference_plain');
  findit_instance_set_display_label($program_time_of_day, 'default', 'inline');
  field_update_instance($program_time_of_day);

  $program_time_of_year = findit_add_term_reference_field('node', FINDIT_FIELD_TIME_OF_YEAR, $bundle, 'time_of_year', st('Time of year'), FIELD_CARDINALITY_UNLIMITED);
  findit_instance_set_widget_type($program_time_of_year, 'options_buttons');
  findit_instance_set_display_type($program_time_of_year, 'default', 'taxonomy_term_reference_plain');
  findit_instance_set_display_label($program_time_of_year, 'default', 'inline');
  field_update_instance($program_time_of_year);

  $program_time_other = findit_add_term_reference_field('node', FINDIT_FIELD_TIME_OTHER, $bundle, 'time_other', st('Special times'), FIELD_CARDINALITY_UNLIMITED);
  findit_instance_set_widget_type($program_time_other, 'options_buttons');
  findit_instance_set_display_type($program_time_other, 'default', 'taxonomy_term_reference_plain');
  findit_instance_set_display_label($program_time_other, 'default', 'inline');
  field_update_instance($program_time_other);

  $when_additional_information = findit_add_text_long_field('node', FINDIT_FIELD_WHEN_ADDITIONAL_INFORMATION, $bundle, st('When - Additional information'));
  findit_instance_set_display_label($when_additional_information, 'default', 'hidden');
  field_update_instance($when_additional_information);

  $reach = findit_add_list_text_field('node', FINDIT_FIELD_REACH, $bundle, st('Where does this program happen?'));
  findit_field_set_allowed_values(FINDIT_FIELD_REACH, array(
    'locations' => st('The program happens at the location(s) specified below'),
    'where_needed' => st('The program serves people at their homes or wherever it is needed'),
    'time_dependent' => st('The program location changes over time'),
  ));
  findit_instance_set_required($reach);
  findit_instance_set_widget_type($reach, 'options_buttons');
  findit_instance_set_default_value($reach, array(0 => array('value' => 'locations')));
  findit_instance_set_display_label($reach, 'default', 'hidden');
  field_update_instance($reach);

  $locations = findit_add_locations_field($bundle, st('Program locations'));
  findit_instance_set_label_help_description($locations, st('Enter the name of each location of the program. This may not necessarily be the same location as the organization\'s address.'));
  field_update_instance($locations);

  $location_notes = findit_add_text_long_field('node', FINDIT_FIELD_LOCATION_NOTES, $bundle, st('Location Notes'));
  field_update_instance($location_notes);

  $transportation = findit_add_list_text_field('node', FINDIT_FIELD_TRANSPORTATION, $bundle, st('Transportation'), FIELD_CARDINALITY_UNLIMITED);
  findit_instance_set_widget_type($transportation, 'options_buttons');
  field_update_instance($transportation);

  $transportation_notes = findit_add_text_long_field('node', FINDIT_FIELD_TRANSPORTATION_NOTES, $bundle, st('Transportation notes'));
  findit_instance_set_label_help_description($transportation_notes, 'Enter notes for transportation and parking. We will use the location address field to refer users to an outside service for specific transportation information.');
  field_update_instance($transportation_notes);

  $age_eligibility = findit_add_list_text_field('node', FINDIT_FIELD_AGE_ELIGIBILITY, $bundle, st('Ages'), FIELD_CARDINALITY_UNLIMITED);
  findit_field_set_allowed_values(FINDIT_FIELD_AGE_ELIGIBILITY, findit_get_ages());
  findit_instance_set_label_help_description($age_eligibility, st('Check all that apply'));
  findit_instance_set_widget_type($age_eligibility, 'options_buttons');
  findit_instance_set_display_type($age_eligibility, 'teaser', 'list_key');
  findit_instance_set_display_label($age_eligibility, 'teaser', 'inline');
  findit_instance_set_display_type($age_eligibility, 'default', 'list_key');
  findit_instance_set_display_label($age_eligibility, 'default', 'hidden');
  field_update_instance($age_eligibility);

  $grade_eligibility = findit_add_term_reference_field('node', FINDIT_FIELD_GRADE_ELIGIBILITY, $bundle, 'grade_eligibility_options', st('Grade eligibility'), FIELD_CARDINALITY_UNLIMITED);
  findit_instance_set_label_help_description($grade_eligibility, st('Check all that apply if, in addition to age, your program requires participants to be at specific grades'));
  findit_instance_set_widget_type($grade_eligibility, 'options_buttons');
  findit_instance_set_display_type($grade_eligibility, 'default', 'findit_utilities_taxonomy_tid');
  findit_instance_set_display_label($grade_eligibility, 'default', 'hidden');
  field_update_instance($grade_eligibility);

  $other_eligibility = findit_add_term_reference_field('node', FINDIT_FIELD_OTHER_ELIGIBILITY, $bundle, 'other_eligibility_options', st('Other eligibility'), FIELD_CARDINALITY_UNLIMITED);
  findit_instance_set_widget_type($other_eligibility, 'options_buttons');
  field_update_instance($other_eligibility);

  $eligibility_notes = findit_add_text_long_field('node', FINDIT_FIELD_ELIGIBILITY_NOTES, $bundle, st('Eligibility - additional information'));
  findit_instance_set_label_help_description($eligibility_notes, st('If needed, insert additional eligibility information below.'));
  field_update_instance($eligibility_notes);

  $accessibility = findit_add_term_reference_field('node', FINDIT_FIELD_ACCESSIBILITY, $bundle, 'accessibility_options', st('Accessibility'), FIELD_CARDINALITY_UNLIMITED);
  findit_instance_set_widget_type($accessibility, 'options_buttons');
  findit_instance_set_display_type($accessibility, 'default', 'taxonomy_term_reference_plain');
  field_update_instance($accessibility);

  $accessibility_notes = findit_add_text_long_field('node', FINDIT_FIELD_ACCESSIBILITY_NOTES, $bundle, st('Accessibility - additional information'));
  findit_instance_set_label_help_description($accessibility_notes, st('If needed, insert additional accessibility information below.'));
  field_update_instance($accessibility_notes);

  $gratis = findit_add_list_boolean_field('node', FINDIT_FIELD_GRATIS, $bundle, st('Is this a free program?'));
  findit_field_set_allowed_values(FINDIT_FIELD_GRATIS, array(
    0 => st('No'),
    1 => st('Yes'),
  ));
  findit_instance_set_required($gratis);
  findit_instance_set_widget_type($gratis, 'options_buttons');
  findit_instance_set_default_value($gratis, array(0 => array('value' => '0')));
  field_update_instance($gratis);

  $cost = findit_add_text_long_field('node', FINDIT_FIELD_COST, $bundle, st('Program cost'));
  findit_instance_set_label_help_description($cost, st('Describe the cost of your program. Example: The program is $20 per person plus $14 for a team jersey.'));
  findit_instance_set_widget_setting($cost, 'rows', 2);
  findit_instance_set_display_label($cost, 'default', 'hidden');
  field_update_instance($cost);

  $cost_subsidies = findit_add_list_text_field('node', FINDIT_FIELD_COST_SUBSIDIES, $bundle, st('Cost subsidies available'), FIELD_CARDINALITY_UNLIMITED);
  findit_field_set_allowed_values(FINDIT_FIELD_COST_SUBSIDIES, array(
    'free' => st('Free'),
    'aid' => st('Financial Aid and/or Scholarship Available'),
    'vouchers' => st('Accepts Vouchers'),
    'scale' => st('Sliding scale based on income'),
  ));
  findit_instance_set_widget_type($cost_subsidies, 'options_buttons');
  field_update_instance($cost_subsidies);

  $financial_aid_notes = findit_add_text_long_field('node', FINDIT_FIELD_FINANCIAL_AID_NOTES, $bundle, st('Financial support - additional information'));
  findit_instance_set_label_help_description($financial_aid_notes, st('If needed, insert additional financial support notes below.'));
  findit_instance_set_display_label($financial_aid_notes, 'default', 'hidden');
  field_update_instance($financial_aid_notes);

  $financial_aid_file = findit_add_file_field('node', FINDIT_FIELD_FINANCIAL_AID_FILE, $bundle, st('Financial support - additional information - file'));
  findit_instance_set_label_help_description($financial_aid_file, st('Are the financial support instructions in a file that people should be able to download? If so, add the name of the file below.'));
  findit_instance_set_display_label($financial_aid_file, 'default', 'hidden');
  findit_instance_set_settings($financial_aid_file, array('file_extensions' => 'pdf doc docx txt'));
  field_update_instance($financial_aid_file);

  $financial_aid_url = findit_add_url_field('node', FINDIT_FIELD_FINANCIAL_AID_URL, $bundle, st('Financial support - additional information - URL'));
  findit_instance_set_label_help_description($financial_aid_url, st("URL of the financial support page. Don't forget to insert a 'http://' or a 'https://' at the beginning of the URL provided."));
  findit_instance_set_display_label($financial_aid_url, 'default', 'hidden');
  findit_instance_set_settings($financial_aid_url, array('title_field' => 1));
  field_update_instance($financial_aid_url);

  $registration = findit_add_list_text_field('node', FINDIT_FIELD_REGISTRATION, $bundle, st('Is Registration/Application required?'));
  findit_field_set_allowed_values(FINDIT_FIELD_REGISTRATION, array(
    'not_required' => st('Not required'),
    'ongoing' => st('Ongoing'),
    'specific_dates' => st('Specific dates'),
  ));
  findit_instance_set_required($registration);
  findit_instance_set_widget_type($registration, 'options_buttons');
  findit_instance_set_default_value($registration, array(0 => array('value' => 'not_required')));
  field_update_instance($registration);

  $registration_dates = findit_add_date_field('node', FINDIT_FIELD_REGISTRATION_DATES, $bundle, st('Registration/Application period'));
  findit_instance_set_description($registration_dates, st("Enter the start and end dates of the registration/application period. Information about specific dates and times can be provided in the 'instructions' field below."));
  findit_field_set_setting(FINDIT_FIELD_REGISTRATION_DATES, 'todate', 'required');
  findit_field_set_granularity(FINDIT_FIELD_REGISTRATION_DATES, array('year', 'month', 'day'));
  findit_instance_set_display_settings($registration_dates, 'default', array(
    'format_type' => 'long',
  ));
  findit_instance_set_display_label($registration_dates, 'default', 'hidden');
  field_update_instance($registration_dates);

  $registration_instructions = findit_add_text_long_field('node', FINDIT_FIELD_REGISTRATION_INSTRUCTIONS, $bundle, st('Registration/Application instructions'));
  findit_instance_set_label_help_description($registration_instructions, st('Enter a text describing how to register/apply for your program'));
  findit_instance_set_display_label($registration_instructions, 'default', 'hidden');
  field_update_instance($registration_instructions);

  $registration_file = findit_add_file_field('node', FINDIT_FIELD_REGISTRATION_FILE, $bundle, st('Registration/Application instructions - File'));
  findit_instance_set_label_help_description($registration_file, st('Are the registration/application instructions in a file that people should be able to download? If so, add the name of the file here'));
  findit_instance_set_settings($registration_file, array('file_extensions' => 'pdf doc docx txt'));
  findit_instance_set_display_label($registration_file, 'default', 'hidden');
  field_update_instance($registration_file);

  $registration_url = findit_add_url_field('node', FINDIT_FIELD_REGISTRATION_URL, $bundle, st('Registration/Application instructions - URL'));
  findit_instance_set_label_help_description($registration_url, st("URL of the registration/application page.  Don't forget to insert a 'http://' or a 'https://' at the beginning of the URL provided."));
  findit_instance_set_display_label($registration_url, 'default', 'hidden');
  findit_instance_set_settings($registration_url, array('title_field' => 1));
  field_update_instance($registration_url);

  $program_url = findit_add_url_field('node', FINDIT_FIELD_PROGRAM_URL, $bundle, st('Program URL'));
  findit_instance_set_label_help_description($program_url, st("Enter the URL of the program's website, if any.  Don't forget to insert a 'http://' or a 'https://' at the beginning of the URL provided."));
  findit_instance_set_display_label($program_url, 'default', 'hidden');
  field_update_instance($program_url);

  $facebook_page = findit_add_url_field('node', FINDIT_FIELD_FACEBOOK_PAGE, $bundle, st('Program Facebook page'));
  findit_instance_set_label_help_description($facebook_page, st("Enter the URL of the program's Facebook page, if any.  Don't forget to insert a 'http://' or a 'https://' at the beginning of the URL provided."));
  findit_instance_set_display_label($facebook_page, 'default', 'hidden');
  field_update_instance($facebook_page);

  $twitter_handle = findit_add_url_field('node', FINDIT_FIELD_TWITTER_HANDLE, $bundle, st('Program Twitter handle'));
  findit_instance_set_label_help_description($twitter_handle, st("Enter the program's Twitter handle/username, if any. Don't forget to insert a 'http://' or a 'https://' at the beginning of the URL provided."));
  findit_instance_set_display_label($twitter_handle, 'default', 'hidden');
  field_update_instance($twitter_handle);

  $instagram_url = findit_add_url_field('node', FINDIT_FIELD_INSTAGRAM_URL, $bundle, st('Program Instagram URL'));
  findit_instance_set_label_help_description($instagram_url, st("Enter the program's Instagram URL, if any.  Don't forget to insert a 'http://' or a 'https://' at the beginning of the URL provided."));
  findit_instance_set_display_label($instagram_url, 'default', 'hidden');
  field_update_instance($instagram_url);

  $tumblr_url = findit_add_url_field('node', FINDIT_FIELD_TUMBLR_URL, $bundle, st('Program Tumblr URL'));
  findit_instance_set_label_help_description($tumblr_url, st("Enter the program's Tumblr URL, if any.  Don't forget to insert a 'http://' or a 'https://' at the beginning of the URL provided."));
  findit_instance_set_display_label($tumblr_url, 'default', 'hidden');
  field_update_instance($tumblr_url);

  // Creates FINDIT_FIELD_CONTACTS field.
  findit_add_contacts_field($bundle, st('Contacts'));

  $contacts_additional_info = findit_add_text_long_field('node', FINDIT_FIELD_CONTACTS_ADDITIONAL_INFORMATION, $bundle, st('Additional information'));
  findit_instance_set_label_help_description($contacts_additional_info, st('If needed, insert additional contact information below.'));
  field_update_instance($contacts_additional_info);

  $additional_information_file = findit_add_file_field('node', FINDIT_FIELD_ADDITIONAL_INFORMATION_FILE, $bundle, st('Additional information file'));
  findit_instance_set_label_help_description($additional_information_file, st('Upload your program flyer or additional information below.'));
  findit_instance_set_settings($additional_information_file, array('file_extensions' => 'pdf doc docx png jpg jpeg gif'));
  findit_instance_set_display_label($additional_information_file, 'default', 'inline');
  field_update_instance($additional_information_file);

  $amenities = findit_add_term_reference_field('node', FINDIT_FIELD_AMENITIES, $bundle, 'amenities', st('Amenities'), FIELD_CARDINALITY_UNLIMITED);
  findit_instance_set_label_help_description($amenities, st("Does your program provide the following for participants?"));
  findit_instance_set_widget_type($amenities, 'options_buttons');
  findit_instance_set_display_type($amenities, 'default', 'taxonomy_term_reference_plain');
  field_update_instance($amenities);

  // Group fields.

  $weight = 0;
  $group_basic_information = (object) array(
    'identifier' => "group_basic_information|node|$bundle|form",
    'group_name' => 'group_basic_information',
    'entity_type' => 'node',
    'bundle' => $bundle,
    'mode' => 'form',
    'label' => st('What'),
    'weight' => $weight++,
    'children' => array(
      'title',
      'body',
      FINDIT_FIELD_PROGRAM_CATEGORIES,
      FINDIT_FIELD_ORGANIZATIONS,
      FINDIT_FIELD_LOGO,
      FINDIT_FIELD_AMENITIES,
    ),
    'format_type' => 'tab',
    'format_settings' => array(
      'instance_settings' => array(
        'required_fields' => 1,
        'show_label' => 1,
      ),
      'formatter' => 'open',
    ),
  );
  field_group_group_save($group_basic_information);

  $group_when = (object) array(
    'identifier' => "group_when|node|$bundle|form",
    'group_name' => 'group_when',
    'entity_type' => 'node',
    'bundle' => $bundle,
    'mode' => 'form',
    'label' => st('When'),
    'weight' => $weight++,
    'children' => array(
      FINDIT_FIELD_ONGOING,
      FINDIT_FIELD_PROGRAM_PERIOD,
      FINDIT_FIELD_TIME_DAY_OF_WEEK,
      FINDIT_FIELD_TIME_OF_DAY,
      FINDIT_FIELD_TIME_OF_YEAR,
      FINDIT_FIELD_TIME_OTHER,
      FINDIT_FIELD_WHEN_ADDITIONAL_INFORMATION,
    ),
    'format_type' => 'tab',
    'format_settings' => array(
      'instance_settings' => array(
        'required_fields' => 0,
        'show_label' => 1,
      ),
      'formatter' => 'open',
    ),
  );
  field_group_group_save($group_when);

  $group_registration = (object) array(
    'identifier' => "group_registration|node|$bundle|form",
    'group_name' => 'group_registration',
    'entity_type' => 'node',
    'bundle' => $bundle,
    'mode' => 'form',
    'label' => st('Registration/Application'),
    'weight' => $weight++,
    'children' => array(
      FINDIT_FIELD_REGISTRATION,
      FINDIT_FIELD_REGISTRATION_DATES,
      FINDIT_FIELD_REGISTRATION_INSTRUCTIONS,
      FINDIT_FIELD_REGISTRATION_FILE,
      FINDIT_FIELD_REGISTRATION_URL,
    ),
    'format_type' => 'tab',
    'format_settings' => array(
      'instance_settings' => array(
        'required_fields' => 0,
        'show_label' => 1,
      ),
      'formatter' => 'open',
    ),
  );
  field_group_group_save($group_registration);

  $group_where = (object) array(
    'identifier' => "group_where|node|$bundle|form",
    'group_name' => 'group_where',
    'entity_type' => 'node',
    'bundle' => $bundle,
    'mode' => 'form',
    'label' => st('Where'),
    'weight' => $weight++,
    'children' => array(
      FINDIT_FIELD_REACH,
      FINDIT_FIELD_LOCATIONS,
      FINDIT_FIELD_LOCATION_NOTES,
      FINDIT_FIELD_TRANSPORTATION,
      FINDIT_FIELD_TRANSPORTATION_NOTES,
    ),
    'format_type' => 'tab',
    'format_settings' => array(
      'instance_settings' => array(
        'required_fields' => 0,
        'show_label' => 1,
      ),
      'formatter' => 'open',
    ),
  );
  field_group_group_save($group_where);

  $group_audience = (object) array(
    'identifier' => "group_audience|node|$bundle|form",
    'group_name' => 'group_audience',
    'entity_type' => 'node',
    'bundle' => $bundle,
    'mode' => 'form',
    'label' => st('Who (for whom)'),
    'weight' => $weight++,
    'children' => array(
      FINDIT_FIELD_AGE_ELIGIBILITY,
      FINDIT_FIELD_GRADE_ELIGIBILITY,
      FINDIT_FIELD_OTHER_ELIGIBILITY,
      FINDIT_FIELD_ELIGIBILITY_NOTES,
      FINDIT_FIELD_ACCESSIBILITY,
      FINDIT_FIELD_ACCESSIBILITY_NOTES,
    ),
    'format_type' => 'tab',
    'format_settings' => array(
      'instance_settings' => array(
        'required_fields' => 0,
        'show_label' => 1,
      ),
      'formatter' => 'open',
    ),
  );
  field_group_group_save($group_audience);

  $group_cost = (object) array(
    'identifier' => "group_cost|node|$bundle|form",
    'group_name' => 'group_cost',
    'entity_type' => 'node',
    'bundle' => $bundle,
    'mode' => 'form',
    'label' => st('Cost'),
    'weight' => $weight++,
    'children' => array(
      FINDIT_FIELD_GRATIS,
      FINDIT_FIELD_COST,
      FINDIT_FIELD_COST_SUBSIDIES,
      FINDIT_FIELD_FINANCIAL_AID_NOTES,
      FINDIT_FIELD_FINANCIAL_AID_FILE,
      FINDIT_FIELD_FINANCIAL_AID_URL,
    ),
    'format_type' => 'tab',
    'format_settings' => array(
      'instance_settings' => array(
        'required_fields' => 0,
        'show_label' => 1,
      ),
      'formatter' => 'open',
    ),
  );
  field_group_group_save($group_cost);

  $group_additional_information = (object) array(
    'identifier' => "group_additional_information|node|$bundle|form",
    'group_name' => 'group_additional_information',
    'entity_type' => 'node',
    'bundle' => $bundle,
    'mode' => 'form',
    'label' => st('Websites, Social Media and Additional Information'),
    'weight' => $weight++,
    'children' => array(
      FINDIT_FIELD_PROGRAM_URL,
      FINDIT_FIELD_FACEBOOK_PAGE,
      FINDIT_FIELD_TWITTER_HANDLE,
      FINDIT_FIELD_INSTAGRAM_URL,
      FINDIT_FIELD_TUMBLR_URL,
      FINDIT_FIELD_ADDITIONAL_INFORMATION_FILE,
    ),
    'format_type' => 'tab',
    'format_settings' => array(
      'instance_settings' => array(
        'required_fields' => 0,
        'show_label' => 1,
      ),
      'formatter' => 'open',
    ),
  );
  field_group_group_save($group_additional_information);

  $group_contact_info = (object) array(
    'identifier' => "group_contact_info|node|$bundle|form",
    'group_name' => 'group_contact_info',
    'entity_type' => 'node',
    'bundle' => $bundle,
    'mode' => 'form',
    'label' => st('Contact Information'),
    'weight' => $weight++,
    'children' => array(
      FINDIT_FIELD_CONTACTS,
      FINDIT_FIELD_CONTACTS_ADDITIONAL_INFORMATION,
    ),
    'format_type' => 'tab',
    'format_settings' => array(
      'instance_settings' => array(
        'required_fields' => 1,
        'show_label' => 1,
      ),
      'formatter' => 'open',
    ),
  );
  field_group_group_save($group_contact_info);
}

/**
 * Creates content type Event.
 */
function findit_add_node_type_event() {
  $bundle = 'event';

  // Content type setup.

  $type = array(
    'type' => $bundle,
    'name' => st('Event'),
    'base' => 'node_content',
    'description' => st(""),
    'custom' => 1,
    'modified' => 1,
    'locked' => 0,
    'title_label' => st('Event name'),
  );
  $type = node_type_set_defaults($type);
  node_type_save($type);
  rdf_mapping_save(array(
    'type' => 'node',
    'bundle' => $bundle,
    'mapping' => array(
      'rdftype' => array('foaf:Document'),
    ),
  ));
  variable_set("node_preview_$bundle", DRUPAL_DISABLED);
  variable_set("node_options_$bundle", array('revision'));
  variable_set("node_submitted_$bundle", TRUE);
  variable_set("language_content_type_$bundle", TRANSLATION_ENABLED);
  variable_set("clone_reset_$bundle", 1);

  // Add fields.

  $organizations = findit_add_entityreference_field('node', FINDIT_FIELD_ORGANIZATIONS, $bundle, array('organization'), st('Organizer(s)'), FIELD_CARDINALITY_UNLIMITED);
  findit_instance_set_required($organizations);
  findit_instance_set_label_help_description($organizations, st("Type in the organization(s) responsible for this event. We need this information to connect this form with the organization's form."));
  findit_instance_set_display_label($organizations, 'default', 'hidden');
  findit_instance_set_display_settings($organizations, 'default', array('link' => TRUE));
  field_update_instance($organizations);

  $body = node_add_body_field((object) array('type' => $bundle), st('Event description'));
  findit_instance_set_settings($body, array('display_summary' => 0));
  findit_instance_set_widget_setting($body, 'rows', 4);
  findit_instance_set_maxlength($body, 500);
  findit_instance_set_label_help_description($body, st('Brief description of what your event is all about. Avoid technical or complex terminology. The first 15 words or so will be displayed in search results.'));
  findit_instance_set_display_type($body, 'teaser', 'text_trimmed_ellipsis');
  findit_instance_set_display_settings($body, 'teaser', array('trim_length' => 155));
  field_update_instance($body);

  $event_categories = findit_add_term_reference_field('node', FINDIT_FIELD_PROGRAM_CATEGORIES, $bundle, 'program_categories', st('Event categories'), FIELD_CARDINALITY_UNLIMITED);
  findit_instance_set_widget_type($event_categories, 'options_buttons');
  findit_instance_set_label_help_description($event_categories, st('Check all that apply'));
  findit_instance_set_display_label($event_categories, 'default', 'hidden');
  field_update_instance($event_categories);

  $programs = findit_add_entityreference_field('node', FINDIT_FIELD_PROGRAMS, $bundle, array('program'), st('Associated program(s)'), FIELD_CARDINALITY_UNLIMITED);
  findit_instance_set_label_help_description($programs, st("Is this event part of an existing program or activity? For instance, does it mark the celebration of a class, or an important milestone within a larger activity? If so, list the name(s) of the associated program(s) below."));
  findit_instance_set_display_label($programs, 'default', 'hidden');
  findit_instance_set_display_settings($programs, 'default', array('link' => TRUE));
  field_update_instance($programs);

  $logo = findit_add_image_field('node', FINDIT_FIELD_LOGO, $bundle, st('Picture or logo'));
  findit_configure_image_field_cropping($logo);
  field_update_instance($logo);

  $event_date = findit_add_date_field('node', FINDIT_FIELD_EVENT_DATE, $bundle, st('Event date(s)'), FIELD_CARDINALITY_UNLIMITED);
  findit_field_set_setting(FINDIT_FIELD_EVENT_DATE, 'todate', 'required');
  findit_field_set_setting(FINDIT_FIELD_EVENT_DATE, 'repeat', 1);
  findit_instance_set_required($event_date);
  findit_instance_set_widget_type($event_date, 'date_popup');
  findit_instance_set_widget_setting($event_date, 'date_single_day', array(
    'date_single_day' => '1',
    'end_after_midnight' => '0',
  ));
  findit_instance_set_display_settings($event_date, 'default', array(
    'format_type' => 'long',
    'multiple_number' => '1',
    'multiple_from' => 'now',
    'show_remaining_days' => FALSE,
    'show_repeat_rule'    => 'hide',
  ));
  findit_instance_set_display_type($event_date, 'teaser', 'date_default');
  findit_instance_set_display_label($event_date, 'teaser', 'hidden');
  findit_instance_set_display_settings($event_date, 'teaser', array(
    'format_type' => 'long',
    'multiple_number' => '1',
    'multiple_from' => 'now',
    'show_remaining_days' => FALSE,
    'show_repeat_rule'    => 'hide',
  ));
  field_update_instance($event_date);

  $event_date_notes = findit_add_text_long_field('node', FINDIT_FIELD_EVENT_DATE_NOTES, $bundle, st('Event Date - Notes'));
  findit_instance_set_label_help_description($event_date_notes, st('Please add any special regarding your event date (Ex. "repeats every last Friday of the month" or "call to confirm.")'));
  findit_instance_set_display_label($event_date_notes, 'default', 'hidden');
  field_update_instance($event_date_notes);

  $event_time_of_year = findit_add_term_reference_field('node', FINDIT_FIELD_TIME_OF_YEAR, $bundle, 'time_of_year', st('Time of year'), FIELD_CARDINALITY_UNLIMITED);
  findit_instance_set_widget_type($event_time_of_year, 'options_buttons');
  findit_instance_set_display_type($event_time_of_year, 'default', 'taxonomy_term_reference_plain');
  findit_instance_set_display_label($event_time_of_year, 'default', 'inline');
  field_update_instance($event_time_of_year);

  $event_time_other = findit_add_term_reference_field('node', FINDIT_FIELD_TIME_OTHER, $bundle, 'time_other', st('Special times'), FIELD_CARDINALITY_UNLIMITED);
  findit_instance_set_widget_type($event_time_other, 'options_buttons');
  findit_instance_set_display_type($event_time_other, 'default', 'taxonomy_term_reference_plain');
  findit_instance_set_display_label($event_time_other, 'default', 'inline');
  field_update_instance($event_time_other);

  $when_additional_information = findit_add_text_long_field('node', FINDIT_FIELD_WHEN_ADDITIONAL_INFORMATION, $bundle, st('When - Additional information'));
  findit_instance_set_display_label($when_additional_information, 'default', 'hidden');
  field_update_instance($when_additional_information);

  $locations = findit_add_locations_field($bundle, st('Event locations'));
  findit_instance_set_label_help_description($locations, st('Enter the name of each location of the event. This may not necessarily be the same location as the organization\'s address.'));
  field_update_instance($locations);

  $transportation = findit_add_list_text_field('node', FINDIT_FIELD_TRANSPORTATION, $bundle, st('Transportation'), FIELD_CARDINALITY_UNLIMITED);
  findit_field_set_allowed_values(FINDIT_FIELD_TRANSPORTATION, array(
    'no' => st('No transportation provided'),
    'some' => st("Transportation from school provided for some eligible students - check with your child's school"),
    'to' => st('Transportation provided to the venue - check Transportation notes'),
    'from' => st('Transportation provided from the venue - check Transportation notes'),
  ));
  findit_instance_set_widget_type($transportation, 'options_buttons');
  field_update_instance($transportation);

  $transportation_notes = findit_add_text_long_field('node', FINDIT_FIELD_TRANSPORTATION_NOTES, $bundle, st('Transportation notes'));
  findit_instance_set_label_help_description($transportation_notes, 'Enter notes for transportation and parking. We will use the location address field to refer users to an outside service for specific transportation information.');
  field_update_instance($transportation_notes);

  $age_eligibility = findit_add_list_text_field('node', FINDIT_FIELD_AGE_ELIGIBILITY, $bundle, st('Ages'), FIELD_CARDINALITY_UNLIMITED);
  findit_instance_set_label_help_description($age_eligibility, st('Check all that apply'));
  findit_instance_set_widget_type($age_eligibility, 'options_buttons');
  findit_instance_set_display_type($age_eligibility, 'teaser', 'list_key');
  findit_instance_set_display_label($age_eligibility, 'teaser', 'inline');
  findit_instance_set_display_type($age_eligibility, 'default', 'list_key');
  findit_instance_set_display_label($age_eligibility, 'default', 'hidden');
  field_update_instance($age_eligibility);

  $grade_eligibility = findit_add_term_reference_field('node', FINDIT_FIELD_GRADE_ELIGIBILITY, $bundle, 'grade_eligibility_options', st('Grade eligibility'), FIELD_CARDINALITY_UNLIMITED);
  findit_instance_set_label_help_description($grade_eligibility, st('Check all that apply if, in addition to age, your event requires participants to be at specific grades'));
  findit_instance_set_widget_type($grade_eligibility, 'options_buttons');
  findit_instance_set_display_type($grade_eligibility, 'default', 'findit_utilities_taxonomy_tid');
  findit_instance_set_display_label($grade_eligibility, 'default', 'hidden');
  field_update_instance($grade_eligibility);

  $other_eligibility = findit_add_term_reference_field('node', FINDIT_FIELD_OTHER_ELIGIBILITY, $bundle, 'other_eligibility_options', st('Other eligibility'), FIELD_CARDINALITY_UNLIMITED);
  findit_instance_set_widget_type($other_eligibility, 'options_buttons');
  field_update_instance($other_eligibility);

  $eligibility_notes = findit_add_text_long_field('node', FINDIT_FIELD_ELIGIBILITY_NOTES, $bundle, st('Eligibility - additional information'));
  findit_instance_set_label_help_description($eligibility_notes, st('If needed, insert additional eligibility information below.'));
  field_update_instance($eligibility_notes);

  $accessibility = findit_add_term_reference_field('node', FINDIT_FIELD_ACCESSIBILITY, $bundle, 'accessibility_options', st('Accessibility'), FIELD_CARDINALITY_UNLIMITED);
  findit_instance_set_widget_type($accessibility, 'options_buttons');
  findit_instance_set_display_type($accessibility, 'default', 'taxonomy_term_reference_plain');
  field_update_instance($accessibility);

  $accessibility_notes = findit_add_text_long_field('node', FINDIT_FIELD_ACCESSIBILITY_NOTES, $bundle, st('Accessibility - additional information'));
  findit_instance_set_label_help_description($accessibility_notes, st('If needed, insert additional accessibility information below'));
  field_update_instance($accessibility_notes);

  $event_gratis = findit_add_list_text_field('node', FINDIT_FIELD_GRATIS, $bundle, st('Is this a free event?'));
  findit_instance_set_required($event_gratis);
  findit_instance_set_widget_type($event_gratis, 'options_buttons');
  findit_instance_set_default_value($event_gratis, array(0 => array('value' => '0')));
  field_update_instance($event_gratis);

  $cost = findit_add_text_long_field('node', FINDIT_FIELD_COST, $bundle, st('Event cost'));
  findit_instance_set_label_help_description($cost, st('Describe the cost of your event. Example: The event is $20 per person plus $14 for a team jersey.'));
  findit_instance_set_widget_setting($cost, 'rows', 2);
  findit_instance_set_display_label($cost, 'default', 'hidden');
  field_update_instance($cost);

  $cost_subsidies = findit_add_list_text_field('node', FINDIT_FIELD_COST_SUBSIDIES, $bundle, st('Cost subsidies available'), FIELD_CARDINALITY_UNLIMITED);
  findit_instance_set_widget_type($cost_subsidies, 'options_buttons');
  field_update_instance($cost_subsidies);

  $financial_aid_notes = findit_add_text_long_field('node', FINDIT_FIELD_FINANCIAL_AID_NOTES, $bundle, st('Financial support - additional information'));
  findit_instance_set_label_help_description($financial_aid_notes, st('If needed, insert additional financial support notes below'));
  findit_instance_set_display_label($financial_aid_notes, 'default', 'hidden');
  field_update_instance($financial_aid_notes);

  $financial_aid_file = findit_add_file_field('node', FINDIT_FIELD_FINANCIAL_AID_FILE, $bundle, st('Financial support - additional information - file'));
  findit_instance_set_label_help_description($financial_aid_file, st('Are the financial support instructions in a file that people should be able to download? If so, add the name of the file here'));
  findit_instance_set_settings($financial_aid_file, array('file_extensions' => 'pdf doc docx txt'));
  findit_instance_set_display_label($financial_aid_file, 'default', 'hidden');
  field_update_instance($financial_aid_file);

  $financial_aid_url = findit_add_url_field('node', FINDIT_FIELD_FINANCIAL_AID_URL, $bundle, st('Financial support - additional information - URL'));
  findit_instance_set_label_help_description($financial_aid_url, st("URL of the financial support page.  Don't forget to insert a 'http://' or a 'https://' at the beginning of the URL provided."));
  findit_instance_set_display_label($financial_aid_url, 'default', 'hidden');
  findit_instance_set_settings($financial_aid_url, array('title_field' => 1));
  field_update_instance($financial_aid_url);

  $registration = findit_add_list_text_field('node', FINDIT_FIELD_REGISTRATION, $bundle, st('Is Registration/Application required?'));
  findit_instance_set_required($registration);
  findit_instance_set_widget_type($registration, 'options_buttons');
  findit_instance_set_default_value($registration, array(0 => array('value' => 'not_required')));
  field_update_instance($registration);

  $registration_dates = findit_add_date_field('node', FINDIT_FIELD_REGISTRATION_DATES, $bundle, st('Registration/Application period'));
  findit_instance_set_description($registration_dates, st("Enter the start and end dates of the registration/application period. Information about specific dates and times can be provided in the 'instructions' field below."));
  findit_instance_set_display_settings($registration_dates, 'default', array(
    'format_type' => 'long',
  ));
  findit_instance_set_display_label($registration_dates, 'default', 'hidden');
  field_update_instance($registration_dates);

  $registration_instructions = findit_add_text_long_field('node', FINDIT_FIELD_REGISTRATION_INSTRUCTIONS, $bundle, st('Registration/Application instructions'));
  findit_instance_set_label_help_description($registration_instructions, st('Enter a text describing how to register/apply for your event'));
  findit_instance_set_display_label($registration_instructions, 'default', 'hidden');
  field_update_instance($registration_instructions);

  $registration_file = findit_add_file_field('node', FINDIT_FIELD_REGISTRATION_FILE, $bundle, st('Registration/Application instructions - File'));
  findit_instance_set_label_help_description($registration_file, st('Name of the file with registration/application instructions'));
  findit_instance_set_settings($registration_file, array('file_extensions' => 'pdf doc docx txt'));
  findit_instance_set_display_label($registration_file, 'default', 'hidden');
  field_update_instance($registration_file);

  $registration_url = findit_add_url_field('node', FINDIT_FIELD_REGISTRATION_URL, $bundle, st('Registration/Application instructions - URL'));
  findit_instance_set_label_help_description($registration_url, st("URL of the registration/application page.  Don't forget to insert a 'http://' or a 'https://' at the beginning of the URL provided."));
  findit_instance_set_display_label($registration_url, 'default', 'hidden');
  findit_instance_set_settings($registration_url, array('title_field' => 1));
  field_update_instance($registration_url);

  // Creates FINDIT_FIELD_CONTACTS field.
  findit_add_contacts_field($bundle, st('Contacts'));

  $contacts_additional_info = findit_add_text_long_field('node', FINDIT_FIELD_CONTACTS_ADDITIONAL_INFORMATION, $bundle, st('Additional information'));
  findit_instance_set_label_help_description($contacts_additional_info, st('If needed, insert additional contact information below.'));
  field_update_instance($contacts_additional_info);

  $event_url = findit_add_url_field('node', FINDIT_FIELD_EVENT_URL, $bundle, st('Event URL'));
  findit_instance_set_label_help_description($event_url, st("Enter the URL of the event's website, if any.  Don't forget to insert a 'http://' or a 'https://' at the beginning of the URL provided."));
  findit_instance_set_display_label($event_url, 'default', 'hidden');
  field_update_instance($event_url);

  $facebook_page = findit_add_url_field('node', FINDIT_FIELD_FACEBOOK_PAGE, $bundle, st('Event Facebook page'));
  findit_instance_set_label_help_description($facebook_page, st("Enter the URL of the event's Facebook page, if any.  Don't forget to insert a 'http://' or a 'https://' at the beginning of the URL provided."));
  findit_instance_set_display_label($facebook_page, 'default', 'hidden');
  field_update_instance($facebook_page);

  $twitter_handle = findit_add_url_field('node', FINDIT_FIELD_TWITTER_HANDLE, $bundle, st('Event Twitter handle'));
  findit_instance_set_label_help_description($twitter_handle, st("Enter the event's Twitter handle/username, if any. Don't forget to insert a 'http://' or a 'https://' at the beginning of the URL provided."));
  findit_instance_set_display_label($twitter_handle, 'default', 'hidden');
  field_update_instance($twitter_handle);

  $instagram_url = findit_add_url_field('node', FINDIT_FIELD_INSTAGRAM_URL, $bundle, st('Event Instagram URL'));
  findit_instance_set_label_help_description($instagram_url, st("Enter the event's Instagram URL, if any.  Don't forget to insert a 'http://' or a 'https://' at the beginning of the URL provided."));
  findit_instance_set_display_label($instagram_url, 'default', 'hidden');
  field_update_instance($instagram_url);

  $tumblr_url = findit_add_url_field('node', FINDIT_FIELD_TUMBLR_URL, $bundle, st('Event Tumblr URL'));
  findit_instance_set_label_help_description($tumblr_url, st("Enter the event's Tumblr URL, if any.  Don't forget to insert a 'http://' or a 'https://' at the beginning of the URL provided."));
  findit_instance_set_display_label($tumblr_url, 'default', 'hidden');
  field_update_instance($tumblr_url);

  $additional_information_file = findit_add_file_field('node', FINDIT_FIELD_ADDITIONAL_INFORMATION_FILE, $bundle, st('Additional information file'));
  findit_instance_set_label_help_description($additional_information_file, st('Upload your event flyer or additional information below.'));
  findit_instance_set_settings($additional_information_file, array('file_extensions' => 'pdf doc docx png jpg jpeg gif'));
  findit_instance_set_display_label($additional_information_file, 'default', 'inline');
  field_update_instance($additional_information_file);

  $amenities = findit_add_term_reference_field('node', FINDIT_FIELD_AMENITIES, $bundle, 'amenities', st('Amenities'), FIELD_CARDINALITY_UNLIMITED);
  findit_instance_set_label_help_description($amenities, st("Does your event provide the following for participants?"));
  findit_instance_set_widget_type($amenities, 'options_buttons');
  findit_instance_set_display_type($amenities, 'default', 'taxonomy_term_reference_plain');
  field_update_instance($amenities);

  // Group fields.

  $weight = 0;
  $group_basic_information = (object) array(
    'identifier' => "group_basic_information|node|$bundle|form",
    'group_name' => 'group_basic_information',
    'entity_type' => 'node',
    'bundle' => $bundle,
    'mode' => 'form',
    'label' => st('What'),
    'weight' => $weight++,
    'children' => array(
      'title',
      'body',
      FINDIT_FIELD_PROGRAM_CATEGORIES,
      FINDIT_FIELD_ORGANIZATIONS,
      FINDIT_FIELD_PROGRAMS,
      FINDIT_FIELD_LOGO,
      FINDIT_FIELD_AMENITIES,
    ),
    'format_type' => 'tab',
    'format_settings' => array(
      'instance_settings' => array(
        'required_fields' => 1,
        'show_label' => 1,
      ),
      'formatter' => 'open',
    ),
  );
  field_group_group_save($group_basic_information);

  $group_when = (object) array(
    'identifier' => "group_when|node|$bundle|form",
    'group_name' => 'group_when',
    'entity_type' => 'node',
    'bundle' => $bundle,
    'mode' => 'form',
    'label' => st('When'),
    'weight' => $weight++,
    'children' => array(
      FINDIT_FIELD_EVENT_DATE,
      FINDIT_FIELD_EVENT_DATE_NOTES,
      FINDIT_FIELD_TIME_OF_YEAR,
      FINDIT_FIELD_TIME_OTHER,
      FINDIT_FIELD_WHEN_ADDITIONAL_INFORMATION,
    ),
    'format_type' => 'tab',
    'format_settings' => array(
      'instance_settings' => array(
        'required_fields' => 0,
        'show_label' => 1,
      ),
      'formatter' => 'open',
    ),
  );
  field_group_group_save($group_when);

  $group_registration = (object) array(
    'identifier' => "group_registration|node|$bundle|form",
    'group_name' => 'group_registration',
    'entity_type' => 'node',
    'bundle' => $bundle,
    'mode' => 'form',
    'label' => st('Registration/Application'),
    'weight' => $weight++,
    'children' => array(
      FINDIT_FIELD_REGISTRATION,
      FINDIT_FIELD_REGISTRATION_DATES,
      FINDIT_FIELD_REGISTRATION_INSTRUCTIONS,
      FINDIT_FIELD_REGISTRATION_FILE,
      FINDIT_FIELD_REGISTRATION_URL,
    ),
    'format_type' => 'tab',
    'format_settings' => array(
      'instance_settings' => array(
        'required_fields' => 0,
        'show_label' => 1,
      ),
      'formatter' => 'open',
    ),
  );
  field_group_group_save($group_registration);

  $group_where = (object) array(
    'identifier' => "group_where|node|$bundle|form",
    'group_name' => 'group_where',
    'entity_type' => 'node',
    'bundle' => $bundle,
    'mode' => 'form',
    'label' => st('Where'),
    'weight' => $weight++,
    'children' => array(
      FINDIT_FIELD_LOCATIONS,
      FINDIT_FIELD_TRANSPORTATION,
      FINDIT_FIELD_TRANSPORTATION_NOTES,
    ),
    'format_type' => 'tab',
    'format_settings' => array(
      'instance_settings' => array(
        'required_fields' => 0,
        'show_label' => 1,
      ),
      'formatter' => 'open',
    ),
  );
  field_group_group_save($group_where);

  $group_audience = (object) array(
    'identifier' => "group_audience|node|$bundle|form",
    'group_name' => 'group_audience',
    'entity_type' => 'node',
    'bundle' => $bundle,
    'mode' => 'form',
    'label' => st('Who (for whom)'),
    'weight' => $weight++,
    'children' => array(
      FINDIT_FIELD_AGE_ELIGIBILITY,
      FINDIT_FIELD_GRADE_ELIGIBILITY,
      FINDIT_FIELD_OTHER_ELIGIBILITY,
      FINDIT_FIELD_ELIGIBILITY_NOTES,
      FINDIT_FIELD_ACCESSIBILITY,
      FINDIT_FIELD_ACCESSIBILITY_NOTES,
    ),
    'format_type' => 'tab',
    'format_settings' => array(
      'instance_settings' => array(
        'required_fields' => 0,
        'show_label' => 1,
      ),
      'formatter' => 'open',
    ),
  );
  field_group_group_save($group_audience);

  $group_cost = (object) array(
    'identifier' => "group_cost|node|$bundle|form",
    'group_name' => 'group_cost',
    'entity_type' => 'node',
    'bundle' => $bundle,
    'mode' => 'form',
    'label' => st('Cost'),
    'weight' => $weight++,
    'children' => array(
      FINDIT_FIELD_GRATIS,
      FINDIT_FIELD_COST,
      FINDIT_FIELD_COST_SUBSIDIES,
      FINDIT_FIELD_FINANCIAL_AID_NOTES,
      FINDIT_FIELD_FINANCIAL_AID_FILE,
      FINDIT_FIELD_FINANCIAL_AID_URL,
    ),
    'format_type' => 'tab',
    'format_settings' => array(
      'instance_settings' => array(
        'required_fields' => 0,
        'show_label' => 1,
      ),
      'formatter' => 'open',
    ),
  );
  field_group_group_save($group_cost);

  $group_additional_information = (object) array(
    'identifier' => "group_additional_information|node|$bundle|form",
    'group_name' => 'group_additional_information',
    'entity_type' => 'node',
    'bundle' => $bundle,
    'mode' => 'form',
    'label' => st('Websites, Social Media and Additional Information'),
    'weight' => $weight++,
    'children' => array(
      FINDIT_FIELD_EVENT_URL,
      FINDIT_FIELD_FACEBOOK_PAGE,
      FINDIT_FIELD_TWITTER_HANDLE,
      FINDIT_FIELD_INSTAGRAM_URL,
      FINDIT_FIELD_TUMBLR_URL,
      FINDIT_FIELD_ADDITIONAL_INFORMATION_FILE,
    ),
    'format_type' => 'tab',
    'format_settings' => array(
      'instance_settings' => array(
        'required_fields' => 0,
        'show_label' => 1,
      ),
      'formatter' => 'open',
    ),
  );
  field_group_group_save($group_additional_information);

  $group_contact_info = (object) array(
    'identifier' => "group_contact_info|node|$bundle|form",
    'group_name' => 'group_contact_info',
    'entity_type' => 'node',
    'bundle' => $bundle,
    'mode' => 'form',
    'label' => st('Contact Information'),
    'weight' => $weight++,
    'children' => array(
      FINDIT_FIELD_CONTACTS,
      FINDIT_FIELD_CONTACTS_ADDITIONAL_INFORMATION,
    ),
    'format_type' => 'tab',
    'format_settings' => array(
      'instance_settings' => array(
        'required_fields' => 1,
        'show_label' => 1,
      ),
      'formatter' => 'open',
    ),
  );
  field_group_group_save($group_contact_info);
}

/**
 * Creates content type Location.
 */
function findit_add_node_type_location() {
  $bundle = 'location';

  // Content type setup.

  $type = array(
    'type' => $bundle,
    'name' => st('Location'),
    'base' => 'node_content',
    'description' => st(""),
    'custom' => 1,
    'modified' => 1,
    'locked' => 0,
  );
  $type = node_type_set_defaults($type);
  node_type_save($type);
  rdf_mapping_save(array(
    'type' => 'node',
    'bundle' => $bundle,
    'mapping' => array(
      'rdftype' => array('foaf:Document'),
    ),
  ));
  variable_set("node_preview_$bundle", DRUPAL_DISABLED);
  variable_set("node_options_$bundle", array('status', 'revision'));
  variable_set("node_submitted_$bundle", FALSE);
  variable_set('clone_omitted', variable_get('clone_omitted', array()) + array($bundle => $bundle));

  // Auto generate node title.
  variable_set('auto_entitylabel_node_location', '1');
  variable_set('auto_entitylabel_pattern_node_location', '[node:field_address:thoroughfare], [node:field_address:locality], [node:field_address:administrative-area], [node:field_address:postal-code]');
  variable_set('auto_entitylabel_php_node_location', '2');

  // Add fields.

  $address = findit_add_addressfield_field('node', FINDIT_FIELD_ADDRESS, $bundle, st('Address'));
  findit_instance_set_required($address);
  findit_instance_set_display_label($address, 'default', 'hidden');
  findit_instance_set_widget_setting($address, 'use_widget_handlers', 0);
  findit_instance_set_widget_settings($address, array(
    'format_handlers' => array(
      'address' => 'address',
      'address-hide-country' => 'address-hide-country',
    )
  ));
  field_update_instance($address);

  $neighborhoods = findit_add_term_reference_field('node', FINDIT_FIELD_NEIGHBORHOODS, $bundle, 'neighborhoods', st('Neighborhoods'), FIELD_CARDINALITY_UNLIMITED);
  findit_instance_set_required($neighborhoods);
  findit_instance_set_display_label($neighborhoods, 'default', 'inline');
  findit_instance_set_widget_type($neighborhoods, 'svg_select');
  findit_instance_set_display_type($neighborhoods, 'default', 'taxonomy_term_reference_plain');
  field_update_instance($neighborhoods);

  $transportation_notes = findit_add_text_long_field('node', FINDIT_FIELD_TRANSPORTATION_NOTES, $bundle, st('Transportation and parking notes'));
  findit_instance_set_label_help_description($transportation_notes, st('Enter notes for transportation and parking. We will use the geocode to refer users to an outside service for specific transportation information.'));
  field_update_instance($transportation_notes);
}

/**
 * Creates content type Contact.
 */
function findit_add_node_type_contact() {
  $bundle = 'contact';

  // Content type setup.

  $type = array(
    'type' => $bundle,
    'name' => st('Contact'),
    'base' => 'node_content',
    'description' => st(""),
    'custom' => 1,
    'modified' => 1,
    'locked' => 0,
    'title_label' => st('Name'),
  );
  $type = node_type_set_defaults($type);
  node_type_save($type);
  rdf_mapping_save(array(
    'type' => 'node',
    'bundle' => $bundle,
    'mapping' => array(
      'rdftype' => array('foaf:Document'),
    ),
  ));
  variable_set("node_preview_$bundle", DRUPAL_DISABLED);
  variable_set("node_options_$bundle", array('status', 'revision'));
  variable_set("node_submitted_$bundle", FALSE);
  variable_set('clone_omitted', variable_get('clone_omitted', array()) + array($bundle => $bundle));

  // Add fields.
  $role = findit_add_text_field('node', FINDIT_FIELD_CONTACT_ROLE, $bundle, st('Role'));
  findit_instance_set_display_label($role, 'default', 'hidden');
  findit_instance_set_display_label($role, 'teaser', 'hidden');
  findit_instance_set_display_type($role, 'teaser', 'text_plain');
  field_update_instance($role);

  $phone = findit_add_telephone_field('node', FINDIT_FIELD_CONTACT_PHONE, $bundle, st('Phone'));
  findit_instance_set_display_label($phone, 'default', 'hidden');
  findit_instance_set_display_type($phone, 'default', 'telephone_link');
  findit_instance_set_display_label($phone, 'teaser', 'hidden');
  findit_instance_set_display_type($phone, 'teaser', 'telephone_link');
  field_update_instance($phone);

  $phone_extension = findit_add_text_field('node', FINDIT_FIELD_CONTACT_PHONE_EXTENSION, $bundle, st('Extension number'));
  findit_instance_set_display_label($phone_extension, 'default', 'hidden');
  findit_instance_set_display_label($phone_extension, 'teaser', 'hidden');
  findit_instance_set_display_type($phone_extension, 'teaser', 'text_plain');
  field_update_instance($phone_extension);

  $tty_number = findit_add_telephone_field('node', FINDIT_FIELD_CONTACT_TTY_NUMBER, $bundle, st('TTY number'));
  findit_instance_set_display_label($tty_number, 'default', 'hidden');
  findit_instance_set_display_type($tty_number, 'default', 'telephone_link');
  findit_instance_set_display_label($tty_number, 'teaser', 'hidden');
  findit_instance_set_display_type($tty_number, 'teaser', 'telephone_link');
  field_update_instance($tty_number);

  $email = findit_add_email_field('node', FINDIT_FIELD_CONTACT_EMAIL, $bundle, st('Email'));
  findit_instance_set_display_label($email, 'default', 'inline');
  findit_instance_set_display_type($email, 'default', 'email_default');
  findit_instance_set_display_label($email, 'teaser', 'hidden');
  findit_instance_set_display_type($email, 'teaser', 'email_default');
  field_update_instance($email);
}

/**
 * Creates content type Callout.
 */
function findit_add_node_type_callout() {
  $bundle = 'callout';

  // Content type setup.

  $type = array(
    'type' => $bundle,
    'name' => st('Callout'),
    'base' => 'node_content',
    'description' => st("Use callouts to create teasers with images for featured links."),
    'custom' => 1,
    'modified' => 1,
    'locked' => 0,
    'title_label' => st('Title'),
  );
  $type = node_type_set_defaults($type);
  node_type_save($type);
  rdf_mapping_save(array(
    'type' => 'node',
    'bundle' => $bundle,
    'mapping' => array(
      'rdftype' => array('foaf:Document'),
    ),
  ));
  variable_set("node_preview_$bundle", DRUPAL_DISABLED);
  variable_set("node_options_$bundle", array('status', 'revision'));
  variable_set("node_submitted_$bundle", FALSE);
  variable_set('clone_omitted', variable_get('clone_omitted', array()) + array($bundle => $bundle));
  $bundle_settings = field_bundle_settings('node', $bundle);
  $bundle_settings['view_modes']['teaser']['custom_settings'] = FALSE;
  field_bundle_settings('node', $bundle, $bundle_settings);

  $body = node_add_body_field($type, st('Description'));
  findit_instance_set_settings($body, array('display_summary' => 0));
  findit_instance_set_widget_setting($body, 'rows', 4);
  findit_instance_set_maxlength($body, 500);
  field_update_instance($body);

  // Add fields.
  $link = findit_add_text_field('node', FINDIT_FIELD_CALLOUT_TARGET, $bundle, st('Link'));
  findit_instance_set_display_label($link, 'default', 'hidden');
  findit_instance_set_required($link);
  findit_instance_set_display_type($link, 'teaser', 'text_plain');
  findit_instance_set_display_label($link, 'teaser', 'hidden');
  field_update_instance($link);
  $image = findit_add_image_field('node', FINDIT_FIELD_LOGO, $bundle, st('Image'));
  findit_instance_set_required($image);
  findit_instance_set_display_type($image, 'default', 'image');
  findit_instance_set_display_label($image, 'default', 'hidden');
  findit_instance_set_display_settings($image, 'default', array(
    'image_style' => 'medium',
  ));
  findit_instance_set_display_type($image, 'teaser', 'image');
  findit_instance_set_display_label($image, 'teaser', 'hidden');
  findit_instance_set_display_settings($image, 'teaser', array(
    'image_style' => 'medium',
  ));
  field_update_instance($image);
}

/**
 * Creates content type Content Alert.
 */
function findit_add_node_type_content_alert() {
  $bundle = 'content_alert';

  // Content type setup.

  $type = array(
    'type' => $bundle,
    'name' => st('Content Alert'),
    'base' => 'node_content',
    'description' => st(""),
    'custom' => 1,
    'modified' => 1,
    'locked' => 0,
    //'title_label' => st('Name'),
  );
  $type = node_type_set_defaults($type);
  node_type_save($type);
  //@todo: do we need RDF?
  /*rdf_mapping_save(array(
    'type' => 'node',
    'bundle' => $bundle,
    'mapping' => array(
      'rdftype' => array('foaf:Document'),
    ),
  ));*/
  variable_set("node_preview_$bundle", DRUPAL_DISABLED);
  variable_set("node_options_$bundle", array('status', 'revision'));
  variable_set("node_submitted_$bundle", FALSE);
  //variable_set('clone_omitted', variable_get('clone_omitted', array()) + array($bundle => $bundle));

  // Add fields.

  $field_ca_description = findit_add_text_long_field('node', 'field_ca_description', $bundle, st('Description'));
  findit_instance_set_description($field_ca_description, st('Please type in the description of the problem or inaccuracy.'));
  findit_instance_set_display_label($field_ca_description, 'default', 'above');
  findit_instance_set_display_type($field_ca_description, 'default', 'text_default');
  findit_instance_set_display_label($field_ca_description, 'teaser', 'above');
  findit_instance_set_display_type($field_ca_description, 'teaser', 'text_default');
  field_update_instance($field_ca_description);

  $field_ca_report_author_email = findit_add_email_field('node', 'field_ca_report_author_email', $bundle, st('Report Author Email'));
  findit_instance_set_description($field_ca_report_author_email, st('Please type in your email address.'));
  findit_instance_set_display_label($field_ca_report_author_email, 'default', 'above');
  findit_instance_set_display_type($field_ca_report_author_email, 'default', 'email_default');

  findit_instance_set_display_label($field_ca_report_author_email, 'teaser', 'above');
  findit_instance_set_display_type($field_ca_report_author_email, 'teaser', 'email_default');
  field_update_instance($field_ca_report_author_email);

  $field_ca_report_author_name = findit_add_text_field('node', 'field_ca_report_author_name', $bundle, st('Report Author Name'));
  findit_instance_set_description($field_ca_report_author_name, st('Please type in your name.'));
  findit_instance_set_display_label($field_ca_report_author_name, 'default', 'above');
  findit_instance_set_display_type($field_ca_report_author_name, 'default', 'text_default');
  findit_instance_set_display_label($field_ca_report_author_name, 'teaser', 'above');
  findit_instance_set_display_type($field_ca_report_author_name, 'teaser', 'text_default');
  field_update_instance($field_ca_report_author_name);

  $field_ca_alert_id = findit_add_entityreference_field('node', 'field_ca_alert_id', $bundle, array('event', 'organization', 'program'), st('Page'), 1);
  findit_instance_set_widget_type($field_ca_alert_id, 'options_select');
  findit_instance_set_display_label($field_ca_alert_id, 'default', 'above');
  findit_instance_set_display_type($field_ca_alert_id, 'default', 'views_field_formatter');
  findit_instance_set_display_settings($field_ca_alert_id, 'default', array(
    'views_field_formatter' => array(
      'implode_character' => '',
      'multiple' => 0,
      'view' => 'content_alert_page_full_report::default',
    ),
  ));

  findit_instance_set_display_label($field_ca_alert_id, 'teaser', 'above');
  findit_instance_set_display_type($field_ca_alert_id, 'teaser', 'views_field_formatter');
  findit_instance_set_display_settings($field_ca_alert_id, 'teaser', array(
    'views_field_formatter' => array(
      'implode_character' => '',
      'multiple' => 0,
      'view' => 'content_alert_page_full_report::default',
    ),
  ));
  field_update_instance($field_ca_alert_id);

  $field_ca_alert_status = findit_add_list_text_field('node', 'field_ca_alert_status', $bundle, st('Alert status'));
  findit_field_set_allowed_values('field_ca_alert_status', array(
    'open' => st('Open'),
    'closed' => st('Closed'),
  ));
  findit_instance_set_required($field_ca_alert_status);
  findit_instance_set_widget_type($field_ca_alert_status, 'options_select');
  findit_instance_set_default_value($field_ca_alert_status, array(0 => array('value' => 'open')));
  findit_instance_set_display_label($field_ca_alert_status, 'default', 'above');
  findit_instance_set_display_type($field_ca_alert_status, 'default', 'list_default');
  field_update_instance($field_ca_alert_status);

  $field_ca_alert_notes = findit_add_text_long_field('node', 'field_ca_alert_notes', $bundle, st('Alert notes'));
  findit_instance_set_display_label($field_ca_alert_notes, 'default', 'above');
  findit_instance_set_display_type($field_ca_alert_notes, 'default', 'text_default');
  field_update_instance($field_ca_alert_notes);
}

/**
 * Load taxonomy terms for the given vocabulary from the source path.
 *
 * @param string $machine_name
 *   The machine name of a vocabulary.
 * @param string $path
 *   The path to a data file.
 */
function findit_vocabulary_load_terms($machine_name, $path) {
  Migration::registerMigration('TaxonomyTermJSONMigration', $machine_name, array(
    'vocabulary' => $machine_name,
    'path' => $path,
    'disable_hooks' => array(
      'taxonomy_term_insert' => array('pathauto'),
    ),
  ));
  $migration = Migration::getInstance($machine_name);
  $migration->processImport();
}

/**
 * Loads nodes of the given type from the source path.
 *
 * @param string $type
 *   The machine name of a content type.
 * @param string $path
 *   The path to a file.
 */
function findit_load_nodes($type, $path, $migration_class) {
  Migration::registerMigration($migration_class, $type, array(
    'type' => $type,
    'path' => $path,
    'disable_hooks' => array(
      'node_insert' => array('pathauto'),
    ),
  ));
  $migration = Migration::getInstance($type);
  $migration->processImport();
}

/**
 * Creates subscriber entity for SMS.
 */
function findit_add_subscriber_type_sms() {
  $controller = new SubscriberEntityBundleController('subscriber_entity_bundle');

  // Content type setup.
  $bundle = new stdClass();
  $bundle->name = 'sms';
  $bundle->label = st('SMS subscriber');
  $bundle->is_new = TRUE;
  $bundle->description = t("Subscriptions for an SMS number.");
  $bundle->unique_field = 'field_subscriber_voipnumber';

  $controller->save($bundle);

  // Add fields.
  $voipnumber = findit_add_voipnumber_field('subscriber_entity', FINDIT_FIELD_SUBSCRIBER_VOIPNUMBER, $bundle->name, st('Mobile number'));
  findit_instance_set_required($voipnumber);
  field_update_instance($voipnumber);

  $enabled = findit_add_list_boolean_field('subscriber_entity', FINDIT_FIELD_SUBSCRIBER_ENABLED, $bundle->name, st('Is the number enabled?'));
  findit_field_set_allowed_values(FINDIT_FIELD_SUBSCRIBER_ENABLED, array(
    0 => st('Disabled'),
    1 => st('Enabled'),
  ));
  findit_instance_set_required($enabled);
  findit_instance_set_widget_type($enabled, 'options_buttons');
  $enabled['default_value'] = array(array('value' => 0));
  field_update_instance($enabled);

  $events = findit_add_entityreference_field('subscriber_entity', FINDIT_FIELD_SUBSCRIBER_EVENTS, $bundle->name, array('event'), st('Events subscribed to'), FIELD_CARDINALITY_UNLIMITED);
  findit_instance_set_widget_settings($events, array('references_dialog_search' => TRUE));
  $events['default_value_function'] = 'findit_subscriber_entityreference_default_value';
  field_update_instance($events);
}

/**
 * Creates subscriber entity for Email.
 */
function findit_add_subscriber_type_email() {
  $controller = new SubscriberEntityBundleController('subscriber_entity_bundle');

  // Content type setup.
  $bundle = new stdClass();
  $bundle->name = 'email';
  $bundle->label = st('Email subscriber');
  $bundle->is_new = TRUE;
  $bundle->description = t("Subscriptions for an email address.");
  $bundle->unique_field = 'field_subscriber_email';

  $controller->save($bundle);

  // Enable token view mode.
  field_bundle_settings(
    'subscriber_entity',
    'email',
    array('view_modes' => array('token' => array('custom_settings' => TRUE)))
  );

  // Add fields.
  $email = findit_add_email_field('subscriber_entity', FINDIT_FIELD_SUBSCRIBER_EMAIL, $bundle->name, st('Email address'));
  findit_instance_set_required($email);
  findit_instance_set_display_type($email, 'token', 'email_plain');
  findit_instance_set_display_label($email, 'token', 'hidden');
  field_update_instance($email);

  $enabled = findit_add_list_boolean_field('subscriber_entity', FINDIT_FIELD_SUBSCRIBER_ENABLED, $bundle->name, st('Is the number enabled?'));
  findit_field_set_allowed_values(FINDIT_FIELD_SUBSCRIBER_ENABLED, array(
    0 => st('Disabled'),
    1 => st('Enabled'),
  ));
  findit_instance_set_required($enabled);
  findit_instance_set_widget_type($enabled, 'options_buttons');
  $enabled['default_value'] = array(array('value' => 0));
  field_update_instance($enabled);

  $events = findit_add_entityreference_field('subscriber_entity', FINDIT_FIELD_SUBSCRIBER_EVENTS, $bundle->name, array('event'), st('Events subscribed to'), FIELD_CARDINALITY_UNLIMITED);
  findit_instance_set_widget_settings($events, array('references_dialog_search' => TRUE));
  $events['default_value_function'] = 'findit_subscriber_entityreference_default_value';
  field_update_instance($events);
}

/**
 * Adds contacts field to a node type.
 *
 * @param $bundle
 *   The node bundle.
 * @param $label
 *   The label for the field instance.
 *
 * @return
 *   Field instance.
 */
function findit_add_contacts_field($bundle, $label) {
  $contacts = findit_add_entityreference_field('node', FINDIT_FIELD_CONTACTS, $bundle, array('contact'), $label, FIELD_CARDINALITY_UNLIMITED);
  findit_instance_set_widget_settings($contacts, array('references_dialog_add' => TRUE));
  findit_instance_set_display_label($contacts, 'default', 'hidden');
  findit_instance_set_display_type($contacts, 'default', 'entityreference_entity_view');
  findit_instance_set_display_settings($contacts, 'default', array('view_mode' => 'full', 'links' => 0));
  findit_instance_set_display_label($contacts, 'teaser', 'inline');
  findit_instance_set_display_type($contacts, 'teaser', 'entityreference_entity_view');
  findit_instance_set_display_settings($contacts, 'teaser', array('view_mode' => 'teaser', 'links' => 0));
  field_update_instance($contacts);

  return $contacts;
}

/**
 * Adds locations field to a node type.
 *
 * @param $bundle
 *   The node bundle.
 * @param $label
 *   The label for the field instance.
 *
 * @return array
 *   Field instance.
 */
function findit_add_locations_field($bundle, $label) {
  $locations = findit_add_entityreference_field('node', FINDIT_FIELD_LOCATIONS, $bundle, array('location'), $label, FIELD_CARDINALITY_UNLIMITED);
  findit_field_set_entityreference_selection_by_view(FINDIT_FIELD_LOCATIONS, 'locations_autocomplete', 'entityreference_1');
  findit_instance_set_label_help_description($locations, t("Enter each location for the $bundle. The location might already be in the system, so start typing to see if the location pops up. If not, then create a new one by selecting 'Create Location' at the bottom of the field."));
  findit_instance_set_widget_settings($locations, array('references_dialog_add' => TRUE));
  findit_instance_set_display_type($locations, 'default', 'entityreference_entity_view');
  findit_instance_set_display_settings($locations, 'default', array('view_mode' => 'full', 'links' => 0));
  findit_instance_set_display_label($locations, 'default', 'hidden');
  field_update_instance($locations);

  return $locations;
}

/**
 * Configure content_index view mode.
 */
function findit_configure_content_index_view_mode() {
  $fields = field_info_field_map();
  $bundles = array('organization', 'program', 'event', 'contact', 'location');
  $entity_type = 'node';
  $view_mode = 'content_index';

  foreach ($bundles as $bundle) {
    $settings = field_bundle_settings($entity_type, $bundle);
    $settings['view_modes'][$view_mode]['custom_settings'] = TRUE;
    field_bundle_settings($entity_type, $bundle, $settings);

    $instances = field_info_instances($entity_type, $bundle);
    foreach ($instances as $instance) {
      switch ($instance['widget']['type']) {
        case 'text_textfield':
        case 'text_textarea':
        case 'text_textarea_with_summary':
        case 'telephone_default':
          findit_instance_set_display_type($instance, $view_mode, 'text_plain');
          break;

        case 'options_buttons':
          $widget_type = $fields[$instance['field_name']]['type'];
          if ($widget_type == 'list_text') {
            findit_instance_set_display_type($instance, $view_mode, 'list_default');
          }
          else if ($widget_type == 'taxonomy_term_reference') {
            findit_instance_set_display_type($instance, $view_mode, 'taxonomy_term_reference_plain');
          }
          break;

        case 'url_external':
          findit_instance_set_display_type($instance, $view_mode, 'url_default');
          break;

        case 'email_textfield':
          findit_instance_set_display_type($instance, $view_mode, 'email_plain');
          break;

        case 'file_generic':
          findit_instance_set_display_type($instance, $view_mode, 'file_default');
          break;

        case 'date_select':
        case 'date_popup':
          findit_instance_set_display_type($instance, $view_mode, 'date_default');
          break;

        case 'entityreference_autocomplete':
          findit_instance_set_display_type($instance, $view_mode, 'entityreference_entity_view');
          findit_instance_set_display_settings($instance, $view_mode, array('view_mode' => $view_mode, 'links' => 0));
          break;

        case 'office_hours':
          findit_instance_set_display_type($instance, $view_mode, 'office_hours');
          break;

        case 'addressfield_standard':
          findit_instance_set_display_type($instance, $view_mode, 'addressfield_default');
          break;

        case 'svg_select':
          findit_instance_set_display_type($instance, $view_mode, 'taxonomy_term_reference_plain');
          break;
      }

      findit_instance_set_display_label($instance, $view_mode, 'hidden');
      field_update_instance($instance);
    }
  }
}

/**
 * Configures search and facets.
 */
function findit_configure_search() {
  $server = entity_create('search_api_server', array(
    'name' => 'Solr',
    'machine_name' => 'solr',
    'class' => 'search_api_solr_service',
    'enabled' => 1,
  ));
  $server->options =  array(
    'clean_ids' => true,
    'site_hash' => true,
    'scheme' => 'http',
    'host' => 'localhost',
    'port' => '8080',
    'path' => '/solr',
    'http_user' => '',
    'http_pass' => '',
    'excerpt' => 0,
    'retrieve_data' => 0,
    'highlight_data' => 0,
    'skip_schema_check' => 0,
    'solr_version' => '',
    'http_method' => 'AUTO',
    'log_query' => 0,
    'log_response' => 0,
  );
  $server->save();
  $server->title->value;

  $index = entity_create('search_api_index', array(
    'name' => 'Main index',
    'machine_name' => 'main_index',
    'server' => 'solr',
    'item_type' => 'node',
    'read_only' => 0,
    'status' => 1
  ));
  $index->options = array(
    'datasource' => array(
      'bundles' => array(
        0 => 'event',
        1 => 'organization',
        2 => 'program',
      ),
    ),
    'index_directly' => 0,
    'cron_limit' => '50',
    'fields' => array(
      'author' => array(
        'type' => 'integer',
        'entity_type' => 'user',
      ),
      'body:value' => array(
        'type' => 'text',
      ),
      'changed' => array(
        'type' => 'date',
      ),
      'created' => array(
        'type' => 'date',
      ),
      'field_age_eligibility' => array(
        'type' => 'list<integer>',
      ),
      'field_cost_subsidies' => array(
        'type' => 'list<string>',
      ),
      'field_event_date:value' => array(
        'type' => 'list<date>',
      ),
      'field_event_date:value2' => array(
        'type' => 'list<date>',
      ),
      'field_gratis' => array(
        'type' => 'boolean',
      ),
      'field_locations' => array(
        'type' => 'list<integer>',
        'entity_type' => 'node',
      ),
      'field_locations:field_neighborhoods' => array(
        'type' => 'list<list<integer>>',
        'entity_type' => 'taxonomy_term',
      ),
      'field_ongoing' => array(
        'type' => 'string',
      ),
      'field_organizations' => array(
        'type' => 'list<integer>',
        'entity_type' => 'node',
      ),
      'field_organizations_node_eb:field_age_eligibility' => array(
        'type' => 'list<list<integer>>',
      ),
      'field_organizations_node_eb:field_cost_subsidies' => array(
        'type' => 'list<list<string>>',
      ),
      'field_organizations_node_eb:field_program_categories' => array(
        'type' => 'list<list<integer>>',
        'entity_type' => 'taxonomy_term',
      ),
      'field_program_categories' => array(
        'type' => 'list<integer>',
        'entity_type' => 'taxonomy_term',
      ),
      'field_program_period:value' => array(
        'type' => 'date',
      ),
      'field_program_period:value2' => array(
        'type' => 'date',
      ),
      'field_programs' => array(
        'type' => 'list<integer>',
        'entity_type' => 'node',
      ),
      'field_time_of_year' => array(
        'type' => 'list<integer>',
        'entity_type' => 'taxonomy_term',
      ),
      'nid' => array(
        'type' => 'integer',
      ),
      'search_api_language' => array(
        'type' => 'string',
      ),
      'search_api_viewed' => array(
        'type' => 'string',
      ),
      'status' => array(
        'type' => 'integer',
      ),
      'title' => array(
        'type' => 'text',
        'boost' => '8.0',
      ),
      'type' => array(
        'type' => 'string',
      ),
      'vid' => array(
        'type' => 'integer',
      ),
    ),
    'data_alter_callbacks' => array(
      'search_api_alter_bundle_filter' => array(
        'status' => 0,
        'weight' => '-10',
        'settings' => array(
          'default' => '1',
          'bundles' => array(
          ),
        ),
      ),
      'search_api_alter_node_access' => array(
        'status' => 0,
        'weight' => '0',
        'settings' =>
        array(
        ),
      ),
      'search_api_alter_node_status' => array(
        'status' => 1,
        'weight' => '0',
        'settings' => array(
        ),
      ),
      'search_api_alter_language_control' => array(
        'status' => 0,
        'weight' => '0',
        'settings' =>
        array(
          'lang_field' => '',
          'languages' =>
          array(
          ),
        ),
      ),
      'search_api_alter_add_viewed_entity' => array(
        'status' => 1,
        'weight' => '0',
        'settings' => array(
          'mode' => 'content_index',
        ),
      ),
      'search_api_alter_add_url' => array(
        'status' => 0,
        'weight' => '0',
        'settings' =>
        array(
        ),
      ),
      'search_api_alter_add_aggregation' => array(
        'status' => 0,
        'weight' => '0',
        'settings' =>
        array(
        ),
      ),
      'search_api_alter_add_hierarchy' => array(
        'status' => 1,
        'weight' => '0',
        'settings' => array(
          'fields' => array(
            'field_program_categories:parent' => 'field_program_categories:parent',
          ),
        ),
      ),
    ),
    'processors' => array(
      'search_api_case_ignore' => array(
        'status' => 1,
        'weight' => '0',
        'settings' =>
        array(
          'fields' =>
          array(
            'title' => true,
          ),
        ),
      ),
      'search_api_html_filter' => array(
        'status' => 1,
        'weight' => '10',
        'settings' =>
        array(
          'fields' =>
          array(
            'title' => true,
            'search_api_viewed' => true,
          ),
          'title' => 0,
          'alt' => 1,
          'tags' => '',
        ),
      ),
      'search_api_tokenizer' => array(
        'status' => 0,
        'weight' => '20',
        'settings' => array(
          'fields' => array(
            'title' => true,
          ),
          'spaces' => '[^[:alnum:]]',
          'ignorable' => '[\']',
        ),
      ),
      'search_api_stopwords' => array(
        'status' => 0,
        'weight' => '30',
        'settings' =>
        array(
          'fields' =>
          array(
            'title' => true,
          ),
          'file' => '',
          'stopwords' => '',
        ),
      ),
      'search_api_highlighting' => array(
        'status' => 0,
        'weight' => '35',
        'settings' => array(
          'prefix' => '<strong>',
          'suffix' => '</strong>',
          'excerpt' => 1,
          'excerpt_length' => '256',
          'exclude_fields' => array(
          ),
          'highlight' => 'always',
        ),
      ),
    )
  );
  $index->save();
}

/**
 * Configures jquery_update.
 */
function findit_configure_jquery_update() {
  variable_set('jquery_update_jquery_version', '1.10');
  variable_set('jquery_update_jquery_admin_version', 'default');
}

/**
 * Configures cropping settings for an image field instance.
 */
function findit_configure_image_field_cropping(&$field_instance) {
  findit_instance_set_widget_setting($field_instance, 'manualcrop_enable', 1);
  findit_instance_set_widget_setting($field_instance, 'manualcrop_keyboard', 1);
  findit_instance_set_widget_setting($field_instance, 'manualcrop_thumblist', 0);
  findit_instance_set_widget_setting($field_instance, 'manualcrop_inline_crop', 0);
  findit_instance_set_widget_setting($field_instance, 'manualcrop_crop_info', 1);
  findit_instance_set_widget_setting($field_instance, 'manualcrop_instant_preview', 1);
  findit_instance_set_widget_setting($field_instance, 'manualcrop_instant_crop', 0);
  findit_instance_set_widget_setting($field_instance, 'manualcrop_default_crop_area', 1);
  findit_instance_set_widget_setting($field_instance, 'manualcrop_maximize_default_crop_area', 0);
  findit_instance_set_widget_setting($field_instance, 'manualcrop_styles_mode', 'include');
  findit_instance_set_widget_setting($field_instance, 'manualcrop_styles_list', array(FINDIT_IMAGE_STYLE_FEATURED_IMAGE => FINDIT_IMAGE_STYLE_FEATURED_IMAGE));
  findit_instance_set_widget_setting($field_instance, 'manualcrop_require_cropping', array());

  findit_instance_set_display_settings($field_instance, 'default', array(
    'image_style' => FINDIT_IMAGE_STYLE_FEATURED_IMAGE
  ));
}

/**
 * Enable killfile (trash bin functionality) for content types.
 */
function findit_configure_killfile_for_content_types($bundles) {
  foreach ($bundles as $bundle) {
    $record = array();
    $record['type'] = $bundle;
    $record['publish_on_undelete'] = TRUE;

    drupal_write_record('killfile_node_types', $record);
  }
}

/**
 * Reorder node add links.
 */
function findit_update_7001() {
  $router_paths = array();

  $item = menu_get_item('node/add');
  foreach (system_admin_menu_block($item) as $menu_link) {
    $router_paths[$menu_link['router_path']] = $menu_link;
  }

  $bundles = array(
    'organization' => -5,
    'program' => -4,
    'event' => -3,
    'contact' => -2,
    'location' => -1,
  );

  foreach ($bundles as $bundle => $weight) {
    $path = "node/add/$bundle";

    if ($router_paths[$path]) {
      $menu_link = $router_paths[$path];
      $menu_link['weight'] = $weight;
      $menu_link['customized'] = 1;
      menu_link_save($menu_link);
    }
  }

  menu_cache_clear_all();
}

/**
 * Update settings for new Find It settings page.
 */
function findit_update_7002() {
  // Update Find It dashboard block setting with new path.
  db_update('block')
    ->fields(array(
      'pages' => "admin/findit\nadmin/findit/dashboard",
    ))
    ->condition('module', 'views')
    ->condition('delta', 'my_content-block')
    ->condition('theme', 'seven')
    ->execute();

  // Update permissions for Find It admin pages.
  if ($role = user_role_load_by_name('administrator')) {
    $permissions = array(
      'access findit dashboard',
      'access findit settings',
    );

    user_role_grant_permissions($role->rid, $permissions);
  }

  if ($role = user_role_load_by_name(FINDIT_ROLE_CONTENT_MANAGER)) {
    $permissions = array(
      'access findit dashboard',
      'access findit settings',
    );

    user_role_grant_permissions($role->rid, $permissions);
  }

  if ($role = user_role_load_by_name(FINDIT_ROLE_SERVICE_PROVIDER)) {
    $permissions = array(
      'access findit dashboard',
    );

    user_role_grant_permissions($role->rid, $permissions);
  }

  // Set Find It Cambridge's service provider guidebook url.
  variable_set('findit_service_provider_guidebook_url', 'content/find-it-cambridges-guidebook');
}


/**
 * Make body fields trim with ellipsis.
 */
function findit_update_7003() {
  module_enable(array('field_ellipsis'));

  foreach (array('organization', 'program', 'event') as $bundle) {
    $instance = field_info_instance('node', 'body', $bundle);
    $instance['display']['teaser']['type'] = 'text_trimmed_ellipsis';
    field_update_instance($instance);
  }
}

/**
 * Make organizations field required in program and events.
 */
function findit_update_7004() {
  foreach (array('program', 'event') as $bundle) {
    $instance = field_info_instance('node', FINDIT_FIELD_ORGANIZATIONS, $bundle);
    $instance['required'] = TRUE;
    field_update_instance($instance);
  }
}

/**
 * Update field_ongoing options.
 */
function findit_update_7005() {
  findit_field_set_allowed_values(FINDIT_FIELD_ONGOING, array(
    'between' => st('This program runs between a start and an end date.'),
    'school' => st('This program runs during the school year.'),
    'ongoing' => st('This is an ongoing program.'),
  ));
}

/**
 * Update field_locations help text.
 */
function findit_update_7006() {
  foreach (array('organization', 'program', 'event') as $bundle) {
    $instance = field_info_instance('node', FINDIT_FIELD_LOCATIONS, $bundle);
    findit_instance_set_label_help_description($instance, t("Enter each location for the $bundle. The location might already be in the system, so start typing to see if the location pops up. If not, then create a new one by selecting 'Create Location' at the bottom of the field."));
    field_update_instance($instance);
  }
}

/**
 * Sort autocomplete options for field_locations field.
 */
function findit_update_7007() {
  $handler_settings = array(
    'target_bundles' => array('location'),
    'sort' => array(
      'type' => 'property',
      'property' => 'title',
      'direction' => 'ASC',
    ),
  );

  findit_field_set_handler_settings(FINDIT_FIELD_LOCATIONS, $handler_settings);
}

/**
 * Display label for field_neighborhoods field inline.
 */
function findit_update_7008() {
  $instance = field_info_instance('node', FINDIT_FIELD_NEIGHBORHOODS, 'location');
  findit_instance_set_display_label($instance, 'default', 'inline');
  field_update_instance($instance);
}

/**
 * Show operation hours in 12 hours format.
 */
function findit_update_7009() {
  $instance = field_info_instance('node', FINDIT_FIELD_OPERATION_HOURS, 'organization');
  findit_instance_set_display_settings($instance, 'default', array('hoursformat' => 1));
  field_update_instance($instance);
}

/**
 * Update permissions for new Find It statistics page.
 */
function findit_update_7010() {
  if ($role = user_role_load_by_name('administrator')) {
    $permissions = array(
      'access findit statistics',
    );

    user_role_grant_permissions($role->rid, $permissions);
  }

  if ($role = user_role_load_by_name(FINDIT_ROLE_CONTENT_MANAGER)) {
    $permissions = array(
      'access findit statistics',
    );

    user_role_grant_permissions($role->rid, $permissions);
  }
}

/**
 * Make tables sortables.
 */
function findit_update_7011() {
  module_enable(array('libraries', 'tablesorter'));
  variable_set('tablesorter_theme', 'blue');
}

/**
 * Update field_registration_dates label.
 */
function findit_update_7012() {
  foreach (array('program', 'event') as $bundle) {
    $instance = field_info_instance('node', FINDIT_FIELD_REGISTRATION_DATES, $bundle);
    $instance['label'] = t('Registration/Application period');
    field_update_instance($instance);
  }
}

/**
 * Enable Solr search.
 */
function findit_update_7013() {
  module_enable(array(
    'search_api',
    'search_api_solr',
    'entityreference_backreference',
    'findit_search',
  ));
  findit_configure_search();
}

/**
 * Delete the View used for search.
 */
function findit_update_7014() {
  if ($view = views_get_view('search')) {
    views_delete_view($view);
  }
}

/**
 * Update permissions for new Find It statistics page.
 *
 * Delete capacity field.
 */
function findit_update_7015() {
  field_delete_field(FINDIT_FIELD_CAPACITY);
  field_delete_field(FINDIT_FIELD_CAPACITY_VALUE);
}

/**
 * Create reach and location notes fields and update program nodes.
 */
function findit_update_7016() {
  $bundle = 'program';

  $reach = findit_add_list_text_field('node', FINDIT_FIELD_REACH, $bundle, st('Where does this program happen?'));
  findit_field_set_allowed_values(FINDIT_FIELD_REACH, array(
    'locations' => st('The program happens at the location(s) specified below'),
    'where_needed' => st('The program serves people at their homes or wherever it is needed (see notes below)'),
    'time_dependent' => st('The program location changes over time (see notes below)'),
  ));
  findit_instance_set_required($reach);
  findit_instance_set_widget_type($reach, 'options_buttons');
  findit_instance_set_default_value($reach, array(0 => array('value' => 'locations')));
  findit_instance_set_display_label($reach, 'default', 'hidden');
  field_update_instance($reach);

  $location_notes = findit_add_text_long_field('node', FINDIT_FIELD_LOCATION_NOTES, $bundle, st('Location Notes'));
  findit_instance_set_display_label($location_notes, 'default', 'hidden');
  field_update_instance($location_notes);

  $nodes = node_load_multiple(array(), array('type' => $bundle));

  foreach ($nodes as $node) {
    $node->field_reach[LANGUAGE_NONE][0]['value'] = 'locations';
    node_save($node);
  }
}

/**
 * Configure single day setting for event dates.
 */
function findit_update_7017() {
  module_enable(array('date_popup', 'date_single_day'));

  $instance = field_info_instance('node', FINDIT_FIELD_EVENT_DATE, 'event');
  findit_instance_set_widget_type($instance, 'date_popup');
  findit_instance_set_widget_setting($instance, 'date_single_day', array(
    'date_single_day' => '1',
    'end_after_midnight' => '0',
  ));
  field_update_instance($instance);
}

/**
 * Enable jquery_update.
 */
function findit_update_7018() {
  module_enable(array('jquery_update'));
  findit_configure_jquery_update();
}

/**
 * Show label of location notes field.
 */
function findit_update_7019() {
  $instance = field_info_instance('node', FINDIT_FIELD_LOCATION_NOTES, 'program');
  findit_instance_set_display_label($instance, 'default', 'above');
  field_update_instance($instance);
}

/**
 * Update display configuration for age eligibility field.
 *
 * @see findit_format_age_range
 */
function findit_update_7020() {
  foreach (array('program', 'event') as $bundle) {
    foreach (array('default', 'teaser') as $view_mode) {
      $instance = field_info_instance('node', FINDIT_FIELD_AGE_ELIGIBILITY, $bundle);
      // The list_key formatted is expected by the function that renders the age
      // range.
      findit_instance_set_display_type($instance, $view_mode, 'list_key');
      field_update_instance($instance);
    }
  }
}

/**
 * Add field_registration_dates description.
 */
function findit_update_7021() {
  foreach (array('program', 'event') as $bundle) {
    $instance = field_info_instance('node', FINDIT_FIELD_REGISTRATION_DATES, $bundle);
    $instance['description'] = t("Enter the start and end dates of the registration/application period. Information about specific dates and times can be provided in the 'instructions' field below.");
    field_update_instance($instance);
  }
}

/**
 * Add FINDIT_FIELD_ALWAYS_OPEN field to organization.
 */
function findit_update_7022() {
  $bundle = 'organization';

  $always_open = findit_add_list_boolean_field('node', FINDIT_FIELD_ALWAYS_OPEN, $bundle, st('Is this organization always open?'));
  findit_field_set_allowed_values(FINDIT_FIELD_ALWAYS_OPEN, array(
    0 => st('This organization is NOT always open.'),
    1 => st('This organization is always open.'),
  ));
  findit_instance_set_required($always_open);
  findit_instance_set_widget_type($always_open, 'options_buttons');
  findit_instance_set_default_value($always_open, array(0 => array('value' => '0')));
  findit_instance_set_display_label($always_open, 'default', 'hidden');
  field_update_instance($always_open);

  $nodes = node_load_multiple(array(), array('type' => $bundle));

  foreach ($nodes as $node) {
    $node->{FINDIT_FIELD_ALWAYS_OPEN}[LANGUAGE_NONE][0]['value'] = '0';
    node_save($node);
  }
}

/**
 * Allow Ongoing Registration for program and events.
 *
 * Note that it is required to call findit_field_set_allowed_values() twice.
 * This is because there is a validation that prevents changing the list of
 * allowed values if the option being removed is already in use. Therefore,
 * we first add the extra options, update nodes using old options to use the new
 * options, and finally update the list of allowed values removing the options
 * that will no longer be used.
 *
 * @see list_field_update_forbid()
 */
function findit_update_7023() {
  findit_field_set_allowed_values(FINDIT_FIELD_REGISTRATION, array(
    'required' => st('Required'),
    'not_required' => st('Not required'),
    'ongoing' => st('Ongoing'),
    'specific_dates' => st('Specific dates'),
  ));

  $nodes = array_merge(
    node_load_multiple(array(), array('type' => 'program')),
    node_load_multiple(array(), array('type' => 'event'))
  );

  foreach ($nodes as $node) {
    $value = field_get_items('node', $node, FINDIT_FIELD_REGISTRATION, $node->language)[0]['value'];

    if ($value == 'required') {
      $node->{FINDIT_FIELD_REGISTRATION}[LANGUAGE_NONE][0]['value'] = 'specific_dates';
      node_save($node);
    }
  }

  findit_field_set_allowed_values(FINDIT_FIELD_REGISTRATION, array(
    'not_required' => st('Not required'),
    'ongoing' => st('Ongoing'),
    'specific_dates' => st('Specific dates'),
  ));
}

/**
 * Update text in label and options for FINDIT_FIELD_ALWAYS_OPEN field.
 */
function findit_update_7024() {
  $instance = field_info_instance('node', FINDIT_FIELD_ALWAYS_OPEN, 'organization');
  $instance['label'] = t('When is this organization open?');
  field_update_instance($instance);

  findit_field_set_allowed_values(FINDIT_FIELD_ALWAYS_OPEN, array(
    0 => st('This organization has specific office hours.'),
    1 => st('This organization is open everyday 24 hours a day.'),
  ));
}

/**
 * Enable cropping for featured image.
 */
function findit_update_7025() {
  module_enable(array('manualcrop'));

  $style = image_style_save(array(
    'name' => FINDIT_IMAGE_STYLE_FEATURED_IMAGE,
    'label' => 'Featured image',
  ));
  image_effect_save(array(
    'isid' => $style['isid'],
    'weight'=> 0,
    'name' => 'manualcrop_crop',
    'data' => array(
      'width' => '100',
      'height' => '100',
      'keepproportions' => 0,
      'reuse_crop_style' => '',
      'style_name' => FINDIT_IMAGE_STYLE_FEATURED_IMAGE
    ),
  ));
  image_effect_save(array(
    'isid' => $style['isid'],
    'weight'=> 1,
    'name' => 'image_scale',
    'data' => array(
      'width' => '629',
      'height' => '629',
      'upscale' => 0
    ),
  ));

  foreach (array('organization', 'program', 'event') as $bundle) {
    $instance = field_info_instance('node', FINDIT_FIELD_LOGO, $bundle);
    findit_instance_set_widget_settings($instance, array(
      'manualcrop_enable' => 1,
      'manualcrop_keyboard' => 1,
      'manualcrop_thumblist' => 0,
      'manualcrop_inline_crop' => 0,
      'manualcrop_crop_info' => 1,
      'manualcrop_instant_preview' => 1,
      'manualcrop_instant_crop' => 0,
      'manualcrop_default_crop_area' => 1,
      'manualcrop_maximize_default_crop_area' => 0,
      'manualcrop_styles_mode' => 'include',
      'manualcrop_styles_list' => array(FINDIT_IMAGE_STYLE_FEATURED_IMAGE => FINDIT_IMAGE_STYLE_FEATURED_IMAGE),
      'manualcrop_require_cropping' => array(),
    ));
    findit_instance_set_display_settings($instance, 'default', array(
      'image_style' => FINDIT_IMAGE_STYLE_FEATURED_IMAGE
    ));
    field_update_instance($instance);
  }
}

/**
 * Allow FINDIT_FIELD_ALWAYS_OPEN to have three options.
 */
function findit_update_7026() {
  $bundle = 'organization';

  field_delete_field(FINDIT_FIELD_ALWAYS_OPEN);

  $always_open = findit_add_list_text_field('node', FINDIT_FIELD_ALWAYS_OPEN, $bundle, st('When is this organization open?'));
  findit_field_set_allowed_values(FINDIT_FIELD_ALWAYS_OPEN, array(
    'office_hours' => st('This organization has specific office hours.'),
    'anytime' => st('This organization does not have specific hours. You can contact them at any time.'),
    'always' => st('This organization is open everyday 24 hours a day.'),
  ));
  findit_instance_set_required($always_open);
  findit_instance_set_widget_type($always_open, 'options_buttons');
  findit_instance_set_default_value($always_open, array(0 => array('value' => 'office_hours')));
  findit_instance_set_display_label($always_open, 'default', 'hidden');
  field_update_instance($always_open);

  $nodes = node_load_multiple(array(), array('type' => $bundle));

  foreach ($nodes as $node) {
    $node->{FINDIT_FIELD_ALWAYS_OPEN}[LANGUAGE_NONE][0]['value'] = 'office_hours';
    node_save($node);
  }
}

/**
 * Add Content Alert functionality
 */
function findit_update_7027() {
  module_enable(array('views_field_formatter'));
  findit_add_node_type_content_alert();
  $permissions = array(
    'create content_alert content',
  );

  user_role_grant_permissions(DRUPAL_ANONYMOUS_RID, $permissions);
  user_role_grant_permissions(DRUPAL_AUTHENTICATED_RID, $permissions);

  module_enable(array('content_alert'));
}

/**
 * Disable slide_with_style module.
 */
function findit_update_7028() {
  module_disable(array('slide_with_style'));
}

/**
 * Hide repeating dates in event default display.
 */
function findit_update_7029() {
  $instance = field_info_instance('node', FINDIT_FIELD_EVENT_DATE, 'event');
  findit_instance_set_display_settings($instance, 'default', array(
    'multiple_number' => '0',
  ));
  field_update_instance($instance);
}

/**
 * Make 'My Content' view its own tab in the Find It Dashboard.
 */
function findit_update_7030() {
  db_delete('block')
    ->condition('module', 'views')
    ->condition('delta', 'my_content-block')
    ->execute();

  $view = views_get_view('my_content');
  $view->delete();
  ctools_include('object-cache');
  ctools_object_cache_clear('view', $view->name);
}

/**
 * Update contact additional information field label.
 */
function findit_update_7031() {
  foreach (array('organization', 'program', 'event') as $bundle) {
    $instance = field_info_instance('node', FINDIT_FIELD_CONTACTS_ADDITIONAL_INFORMATION, $bundle);
    $instance['label'] = t('Additional information');
    field_update_instance($instance);
  }
}

/**
 * Update special when related fields label.
 */
function findit_update_7032() {
  foreach (array('program', 'event') as $bundle) {
    $instance = field_info_instance('node', FINDIT_FIELD_TIME_DAY_OF_WEEK, $bundle);
    if (!empty($instance)) {
      $instance['label'] = t('Day of the week');
      findit_instance_set_display_type($instance, 'default', 'taxonomy_term_reference_plain');
      findit_instance_set_display_label($instance, 'default', 'inline');
      field_update_instance($instance);
    }

    $instance = field_info_instance('node', FINDIT_FIELD_TIME_OF_DAY, $bundle);
    if (!empty($instance)) {
      $instance['label'] = t('Time of day');
      findit_instance_set_display_type($instance, 'default', 'taxonomy_term_reference_plain');
      findit_instance_set_display_label($instance, 'default', 'inline');
      field_update_instance($instance);
    }

    $instance = field_info_instance('node', FINDIT_FIELD_TIME_OF_YEAR, $bundle);
    if (!empty($instance)) {
      $instance['label'] = t('Time of year');
      findit_instance_set_display_type($instance, 'default', 'taxonomy_term_reference_plain');
      findit_instance_set_display_label($instance, 'default', 'inline');
      field_update_instance($instance);
    }

    $instance = field_info_instance('node', FINDIT_FIELD_TIME_OTHER, $bundle);
    if (!empty($instance)) {
      $instance['label'] = t('Special times');
      findit_instance_set_display_type($instance, 'default', 'taxonomy_term_reference_plain');
      findit_instance_set_display_label($instance, 'default', 'inline');
      field_update_instance($instance);
    }
  }
}

/**
 * Disable Highlights block.
 */
function findit_update_7033() {
  db_update('block')
    ->fields(array(
        'region' => -1,
        'status' => 0,
      ))
    ->condition('module', 'findit')
    ->condition('delta', 'highlights')
    ->execute();
}

/**
 * Add FAQ link to footer.
 */
function findit_update_7034() {
  $t = get_t();
  findit_add_menu_link('footer-menu', $t('Frequently Asked Questions'), '<front>', 5);
}

/**
 * Render amenities as plain text.
 */
function findit_update_7035() {
  foreach (array('program', 'event') as $bundle) {
    $instance = field_info_instance('node', FINDIT_FIELD_AMENITIES, $bundle);
    if (!empty($instance)) {
      findit_instance_set_display_type($instance, 'default', 'taxonomy_term_reference_plain');
      field_update_instance($instance);
    }
  }
}

/**
 * Enable and configure SMTP for Sendgrid.
 */
function findit_update_7036() {
  module_enable(array('smtp'));

  // SMTP variables should be set in module's configuration page.
}

/**
 * Update Transportation field label.
 */
function findit_update_7037() {
  foreach (array('program', 'event') as $bundle) {
    $instance = field_info_instance('node', FINDIT_FIELD_TRANSPORTATION, $bundle);
    if (!empty($instance)) {
      $instance['label'] = t('Transportation');
      field_update_instance($instance);
    }
  }
}

/**
 * Fix reply e-mail top-level domain.
 */
function findit_update_7038() {
  // SMTP variables should be set in module's configuration page.
}

/**
 * Update field_reach options' label.
 */
function findit_update_7039() {
  findit_field_set_allowed_values(FINDIT_FIELD_REACH, array(
    'locations' => st('The program happens at the location(s) specified below'),
    'where_needed' => st('The program serves people at their homes or wherever it is needed'),
    'time_dependent' => st('The program location changes over time'),
  ));
}

/**
 * Update field_event_date display settings.
 */
function findit_update_7040() {
  $instance = field_info_instance('node', FINDIT_FIELD_EVENT_DATE, 'event');
  findit_instance_set_display_settings($instance, 'default', array(
    'format_type' => 'long',
    'multiple_number' => '1',
    'multiple_from' => 'now',
    'show_remaining_days' => FALSE,
    'show_repeat_rule'    => 'hide',
  ));
  field_update_instance($instance);
}

/**
 * Switch calendar display in front page.
 */
function findit_update_7041() {
  findit_create_compact_date_format();

  $view = views_get_view('event_calendar');
  $view->delete();
  ctools_include('object-cache');
  ctools_object_cache_clear('view', $view->name);

  db_update('block')
    ->fields(array(
      'region' => -1,
      'status' => BLOCK_CUSTOM_FIXED,
    ))
    ->condition('module', 'views')
    ->condition('delta', 'event_calendar-block_1')
    ->execute();

  db_update('block')
    ->fields(array(
      'status' => BLOCK_CUSTOM_ENABLED,
      'weight' => 3,
      'region' => 'content',
      'visibility' => BLOCK_VISIBILITY_LISTED,
      'pages' => '<front>',
      'cache' => DRUPAL_CACHE_PER_ROLE,
      'title' => '',
    ))
    ->condition('module', 'views')
    ->condition('delta', 'event_calendar-block_2')
    ->execute();
}

/**
 * Add "Add to Calendar" block.
 */
function findit_update_7042() {
  module_enable(array('addtocal', 'findit_addtocalendar'));

  findit_add_block(array(
    'module' => 'findit_addtocalendar',
    'delta' => 'add-to-calendar',
    'theme' => 'findit_cambridge',
    'status' => BLOCK_CUSTOM_ENABLED,
    'weight' => 1,
    'region' => 'title',
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages' => 'node/*',
    'title' => '',
    'cache' => DRUPAL_NO_CACHE,
    'node_types' => array(
      'event',
    ),
  ));
}

/**
 * Allow using relative dates in calendar view.
 */
function findit_update_7043() {
  $view = views_get_view('event_calendar');
  $view->delete();
  ctools_include('object-cache');
  ctools_object_cache_clear('view', $view->name);
}

/**
 * Enable Views numeric filter for lists module.
 */
function findit_update_7044() {
  module_enable(array('vnfl'));
}

/**
 * Add monthly calendar filters.
 */
function findit_update_7045() {
  db_update('block')
    ->fields(array(
      'pages' => "search\nsearch/*\ncalendar/month\ncalendar/month/*",
    ))
    ->condition('module', 'findit_search')
    ->condition('delta', 'filters')
    ->execute();

  $view = views_get_view('event_calendar');
  $view->delete();
  ctools_include('object-cache');
  ctools_object_cache_clear('view', $view->name);
}

/**
 * Show applied filters on monthly calendar view.
 */
function findit_update_7046() {
  db_update('block')
    ->fields(array(
      'pages' => "search\nsearch/*\ncalendar/month\ncalendar/month/*",
    ))
    ->condition('module', 'findit')
    ->condition('delta', 'title')
    ->execute();

  db_update('block')
    ->fields(array(
      'pages' => "search\nsearch/*\ncalendar/month\ncalendar/month/*",
    ))
    ->condition('module', 'findit_search')
    ->condition('delta', 'summary')
    ->execute();
}

/**
 * Enable administration views.
 */
function findit_update_7047() {
  module_enable(array('views_bulk_operations', 'admin_views'));
}

/**
 * Allow service providers delete their own content.
 */
function findit_update_7048() {
  if ($role = user_role_load_by_name(FINDIT_ROLE_SERVICE_PROVIDER)) {
    $permissions = array(
      'delete own organization content',
      'delete own program content',
      'delete own event content',
      'delete own location content',
    );

    user_role_grant_permissions($role->rid, $permissions);
  }
}

/**
 * Enable honeypot module and protect user registration form.
 */
function findit_update_7049() {
  module_enable(array('honeypot'));

  variable_set('honeypot_form_user_register_form', 1);
}

/**
 * Set Pinterest verification metatag value.
 */
function findit_update_7050() {
  variable_set('findit_pinterest_verification', '8feef2c722188baaccfc954436671a0b');
}

/**
 * Format grade ranges.
 */
function findit_update_7051() {
  module_enable(array('findit_utilities'));

  foreach (array('program', 'event') as $bundle) {
    $instance = field_info_instance('node', FINDIT_FIELD_GRADE_ELIGIBILITY, $bundle);
    if (!empty($instance)) {
      findit_instance_set_display_type($instance, 'default', 'findit_utilities_taxonomy_tid');
      findit_instance_set_display_label($instance, 'default', 'hidden');
      field_update_instance($instance);
    }
  }
}

/**
 * Delete honeypot_form_user_register_form variable.
 *
 * @see findit_utilities_form_alter()
 */
function findit_update_7052() {
  // Forms to be protected are specified in findit_utilities_form_alter().
  variable_del('honeypot_form_user_register_form');
}

/**
 * Save draft
 */
function findit_update_7053() {
  module_disable(array('publish_button'));
  module_enable(array('save_draft'));

  variable_set('save_draft_enabled_event', TRUE);
  variable_set('save_draft_enabled_organization', TRUE);
  variable_set('save_draft_enabled_program', TRUE);

  variable_set('save_draft_skip_required_event', TRUE);
  variable_set('save_draft_skip_required_organization', TRUE);
  variable_set('save_draft_skip_required_program', TRUE);

  $content_manager = user_role_load_by_name(FINDIT_ROLE_CONTENT_MANAGER);
  $service_provider =  user_role_load_by_name(FINDIT_ROLE_SERVICE_PROVIDER);

  user_role_grant_permissions($content_manager->rid, array('save draft'));
  user_role_grant_permissions($service_provider->rid, array('save draft'));
}

/**
 * Remove publish_button variables.
 */
function findit_update_7054() {
  variable_del('publish_button_content_type_organization');
  variable_del('publish_button_content_type_program');
  variable_del('publish_button_content_type_event');
}

/**
 * Hide label of additional information file.
 */
function findit_update_7055() {
  foreach (array('program', 'event') as $bundle) {
    $instance = field_info_instance('node', FINDIT_FIELD_ADDITIONAL_INFORMATION_FILE, $bundle);
    if (!empty($instance)) {
      findit_instance_set_display_label($instance, 'default', 'inline');
      field_update_instance($instance);
    }
  }
}

/**
 * Show title as url link text and hide label.
 */
function findit_update_7056() {
  foreach (array('program', 'event') as $bundle) {
    foreach (array(FINDIT_FIELD_REGISTRATION_URL, FINDIT_FIELD_FINANCIAL_AID_URL, FINDIT_FIELD_FINANCIAL_AID_FILE) as $field) {
      $instance = field_info_instance('node', $field, $bundle);
      if (!empty($instance)) {
        if ($instance['widget']['type'] == 'url_external') {
          findit_instance_set_settings($instance, array('title_field' => 1));
        }
        findit_instance_set_display_label($instance, 'default', 'hidden');
        field_update_instance($instance);
      }
    }
  }
}

/**
 * Add When - Additional information field.
 */
function findit_update_7057() {
  foreach (array('program', 'event') as $bundle) {
    $when_additional_information = findit_add_text_long_field('node', FINDIT_FIELD_WHEN_ADDITIONAL_INFORMATION, $bundle, st('When - Additional information'));
    findit_instance_set_display_label($when_additional_information, 'default', 'hidden');
    field_update_instance($when_additional_information);
  }
}

/**
 * Show locations autocomplete based on user role.
 */
function findit_update_7058() {
  findit_field_set_entityreference_selection_by_view(FINDIT_FIELD_LOCATIONS, 'locations_autocomplete', 'entityreference_1');
}

/**
 * Revoke content manager permission to delete other's location content.
 */
function findit_update_7059() {
  if ($role = user_role_load_by_name(FINDIT_ROLE_CONTENT_MANAGER)) {
    $permissions = array(
      'edit any location content',
    );

    user_role_revoke_permissions($role->rid, $permissions);
  }
}

/**
 * Delete location name and description fields.
 */
function findit_update_7060() {
  field_delete_field(FINDIT_FIELD_LOCATION_NAME);
  field_delete_field(FINDIT_FIELD_LOCATION_DESCRIPTION);

  variable_set('auto_entitylabel_pattern_node_location', '[node:field_address:thoroughfare], [node:field_address:locality], [node:field_address:administrative-area], [node:field_address:postal-code]');
}

/**
 * Rename homepage callout.
 */
function findit_update_7061() {
  $q = new EntityFieldQuery();
  $q->entityCondition('entity_type', 'node');
  $q->entityCondition('bundle', 'callout');
  $q->propertyCondition('title', t('Family Resources and Support'), '=');
  $q->propertyCondition('status', NODE_PUBLISHED);

  $result = $q->execute();

  if (!empty($result['node'])) {
    $node = node_load(array_shift($result['node'])->nid);
    $node->title = t('Other Resources and Support');
    node_save($node);
  }
}

/**
 * Make location autocomplete render as plain text.
 */
function findit_update_7062() {
  $view = views_get_view('locations_autocomplete');
  $view->delete();
  ctools_include('object-cache');
  ctools_object_cache_clear('view', $view->name);
}

/**
 * Update field_cost_subsidies options.
 */
function findit_update_7063() {
  findit_field_set_allowed_values(FINDIT_FIELD_COST_SUBSIDIES, array(
    'free' => st('Free'),
    'aid' => st('Financial Aid and/or Scholarship Available'),
    'vouchers' => st('Accepts Vouchers'),
    'scale' => st('Sliding scale based on income'),
  ));
}

/**
 * Add costs block.
 */
function findit_update_7064() {
  findit_add_block(array(
    'module' => 'findit',
    'delta' => 'costs',
    'theme' => 'findit_cambridge',
    'status' => BLOCK_CUSTOM_ENABLED,
    'weight' => 11,
    'region' => 'content',
    'visibility' => BLOCK_VISIBILITY_NOTLISTED,
    'pages' => '',
    'cache' => DRUPAL_NO_CACHE,
    'title' => '',
    'node_types' => array(
      'event',
      'program',
    ),
  ));
}

/**
 * Hide field_cost_subsidies label.
 */
function findit_update_7065() {
  foreach (array('program', 'event') as $bundle) {
    $instance = field_info_instance('node', FINDIT_FIELD_COST_SUBSIDIES, $bundle);
    if (!empty($instance)) {
      findit_instance_set_display_label($instance, 'default', 'hidden');
      field_update_instance($instance);
    }
  }
}

/**
 * Allow image fields to set an 'alt' attribute.
 */
function findit_update_7066() {
  $image_fields = field_read_fields(array('type' => 'image'));
  foreach ($image_fields as $machine_name => $configuration) {
    $image_field_instances = field_read_instances(array('field_name' => $machine_name));
    foreach ($image_field_instances as $instance) {
      findit_instance_set_settings($instance, array('alt_field' => 1));
      field_update_instance($instance);
    }
  }
}

/**
 * Update program categories for program and events to include parents.
 */
function findit_update_7067() {
  $nodes = array_merge(
    node_load_multiple(array(), array('type' => 'program')),
    node_load_multiple(array(), array('type' => 'event'))
  );

  $vocabulary = taxonomy_vocabulary_machine_name_load('program_categories');
  $tree = taxonomy_get_tree($vocabulary->vid);

  foreach ($nodes as $node) {
    if (!empty($node->{FINDIT_FIELD_PROGRAM_CATEGORIES})) {
      $tids = findit_flatten_taxonomy_ids($node->{FINDIT_FIELD_PROGRAM_CATEGORIES}[LANGUAGE_NONE]);
      $tids_structure = findit_prepare_taxonomy_ids(_findit_taxonomy_add_parents($tids, $tree));

      $node->{FINDIT_FIELD_PROGRAM_CATEGORIES}[LANGUAGE_NONE] = $tids_structure;
      node_save($node);
    }
  }
}

/**
 * save_draft module gets turned ON for every content type in the system unless explicitly turned off.
 */
function findit_update_7068() {

  variable_set('save_draft_enabled_page', FALSE);
  variable_set('save_draft_enabled_callout', FALSE);
  variable_set('save_draft_enabled_contact', FALSE);
  variable_set('save_draft_enabled_content_alert', FALSE);
  variable_set('save_draft_enabled_location', FALSE);
}

/**
 * Add parent organization field.
 */
function findit_update_7069() {
  $parent_organization = findit_add_entityreference_field('node', FINDIT_FIELD_PARENT_ORGANIZATION, 'organization', array('organization'), st('Parent organization'));
  findit_instance_set_label_help_description($parent_organization, st('If this organization is part of a larger organization, please type the name of the larger organization here.'));
  findit_instance_set_display_label($parent_organization, 'default', 'hidden');
  findit_instance_set_display_settings($parent_organization, 'default', array('link' => TRUE));
  field_update_instance($parent_organization);

  findit_add_block(array(
    'module' => 'findit',
    'delta' => 'affiliated-organizations',
    'theme' => 'findit_cambridge',
    'status' => BLOCK_CUSTOM_ENABLED,
    'weight' => 9,
    'region' => 'content',
    'visibility' => BLOCK_VISIBILITY_NOTLISTED,
    'pages' => '',
    'cache' => DRUPAL_NO_CACHE,
    'title' => '',
    'node_types' => array(
      'organization',
    ),
  ));
}

/**
 * Allow file fields to accept 30 MB uploads.
 */
function findit_update_7070() {
  $file_fields = field_read_fields(array('type' => 'file'));
  foreach ($file_fields as $machine_name => $configuration) {
    $file_field_instances = field_read_instances(array('field_name' => $machine_name));
    foreach ($file_field_instances as $instance) {
      findit_instance_set_settings($instance, array('max_filesize' => '30 MB'));
      field_update_instance($instance);
    }
  }
}

/**
 * Add and update field configuration for Contact content type.
 */
function findit_update_7071() {
  $bundle = 'contact';

  $phone_extension = findit_add_text_field('node', FINDIT_FIELD_CONTACT_PHONE_EXTENSION, $bundle, st('Extension number'));
  findit_instance_set_display_label($phone_extension, 'default', 'hidden');
  findit_instance_set_display_label($phone_extension, 'teaser', 'hidden');
  findit_instance_set_display_type($phone_extension, 'teaser', 'text_plain');
  field_update_instance($phone_extension);

  $tty_number = findit_add_telephone_field('node', FINDIT_FIELD_CONTACT_TTY_NUMBER, $bundle, st('TTY number'));
  findit_instance_set_display_label($tty_number, 'default', 'hidden');
  findit_instance_set_display_type($tty_number, 'default', 'telephone_link');
  findit_instance_set_display_label($tty_number, 'teaser', 'hidden');
  findit_instance_set_display_type($tty_number, 'teaser', 'telephone_link');
  field_update_instance($tty_number);

  $phone = field_info_instance('node', FINDIT_FIELD_CONTACT_PHONE, $bundle);
  if (!empty($phone)) {
    findit_instance_set_display_type($phone, 'default', 'telephone_link');
    findit_instance_set_display_type($phone, 'teaser', 'telephone_link');
    field_update_instance($phone);
  }

  $email = field_info_instance('node', FINDIT_FIELD_CONTACT_EMAIL, $bundle);
  if (!empty($email)) {
    findit_instance_set_display_type($email, 'default', 'email_default');
    findit_instance_set_display_type($email, 'teaser', 'email_default');
    field_update_instance($email);
  }
}

/**
 * Make Contacts field show only own nodes for service providers.
 */
function findit_update_7072() {
  findit_field_set_entityreference_selection_by_view(FINDIT_FIELD_CONTACTS, 'contacts_autocomplete', 'entityreference_1');
}

/**
 * Make parent organizations autocomplete field list published nodes only.
 */
function findit_update_7073() {
  findit_field_set_entityreference_selection_by_view(FINDIT_FIELD_PARENT_ORGANIZATION, 'organizations_autocomplete', 'entityreference_1');
}

/**
 * Make location autocomplete list published nodes only.
 */
function findit_update_7074() {
  $view = views_get_view('locations_autocomplete');
  $view->delete();
  ctools_include('object-cache');
  ctools_object_cache_clear('view', $view->name);
}

/**
 * Update content manager permissions.
 */
function findit_update_7075() {
  if ($role = user_role_load_by_name(FINDIT_ROLE_CONTENT_MANAGER)) {
    $permissions = array(
      'administer nodes',
      'clone node',
      'clone own nodes',
    );

    user_role_grant_permissions($role->rid, $permissions);
  }
}

/**
 * Delete Infant from grade eligibility options vocabulary.
 */
function findit_update_7076() {
  $infant = taxonomy_get_term_by_name('Infant', 'grade_eligibility_options');
  $infant_tid = array_shift($infant)->tid;
  taxonomy_term_delete($infant_tid);
}

/**
 * Use content_index view mode with tags stripped in search index.
 */
function findit_update_7077() {
  findit_configure_content_index_view_mode();

  $index = search_api_index_load('main_index', TRUE);

  $config = array(
    'options' => $index->options,
  );

  $config['options']['data_alter_callbacks']['search_api_alter_add_viewed_entity']['settings']['mode'] = 'content_index';
  $config['options']['processors']['search_api_html_filter']['status'] = 1;
  $config['options']['processors']['search_api_html_filter']['settings']['fields']['search_api_viewed'] = true;

  search_api_index_edit($index->id, $config);
}

/**
 * Configure content trash bin functionality.
 */
function findit_update_7078() {
  module_enable(array('cf', 'killfile'));

  findit_configure_killfile_for_content_types(array_keys(node_type_get_types()));

  if ($role = user_role_load_by_name(FINDIT_ROLE_CONTENT_MANAGER)) {
    $permissions = array(
      'access killfiled content',
      'bypass killfiled content',
      'undelete killfiled content',
    );

    user_role_grant_permissions($role->rid, $permissions);
  }

  // The permission is removed because it exposes content that has been sent to
  // the trash bin.
  if ($role = user_role_load_by_name(FINDIT_ROLE_SERVICE_PROVIDER)) {
    $permissions = array(
      'access content overview',
    );

    user_role_revoke_permissions($role->rid, $permissions);
  }

  $view = views_get_view('my_content');
  $view->delete();
  ctools_include('object-cache');
  ctools_object_cache_clear('view', $view->name);
}
