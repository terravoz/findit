<?php
/**
 * @file
 * Install, update and uninstall functions for the standard installation profile.
 */

require_once DRUPAL_ROOT . '/profiles/findit/findit.inc';

/**
 * Implements hook_install().
 *
 * Perform actions to set up the site for this profile.
 *
 * @see system_install()
 */
function findit_install() {
  $filtered_html_format = findit_create_filtered_html_format();
  $full_html_format = findit_create_full_html_format();

  $default_theme = 'bartik';
  $admin_theme = 'seven';

  theme_enable(array($default_theme));
  variable_set('theme_default', $default_theme);
  findit_enable_admin_theme($admin_theme);

  // enable some standard blocks.
  findit_add_block(array(
    'module' => 'system',
    'delta' => 'main',
    'theme' => $default_theme,
    'status' => 1,
    'weight' => 0,
    'region' => 'content',
    'visibility' => 0,
    'pages' => '',
    'cache' => -1,
  ));
  findit_add_block(array(
    'module' => 'search',
    'delta' => 'form',
    'theme' => $default_theme,
    'status' => 1,
    'weight' => -1,
    'region' => 'sidebar_first',
    'visibility' => 0,
    'pages' => '',
    'cache' => -1,
  ));
  findit_add_block(array(
    'module' => 'user',
    'delta' => 'login',
    'theme' => $default_theme,
    'status' => 1,
    'weight' => 0,
    'region' => 'sidebar_first',
    'visibility' => 0,
    'pages' => '',
    'cache' => -1,
  ));
  findit_add_block(array(
    'module' => 'system',
    'delta' => 'navigation',
    'theme' => $default_theme,
    'status' => 1,
    'weight' => 0,
    'region' => 'sidebar_first',
    'visibility' => 0,
    'pages' => '',
    'cache' => -1,
  ));
  findit_add_block(array(
    'module' => 'system',
    'delta' => 'powered-by',
    'theme' => $default_theme,
    'status' => 1,
    'weight' => 10,
    'region' => 'footer',
    'visibility' => 0,
    'pages' => '',
    'cache' => -1,
  ));
  findit_add_block(array(
    'module' => 'system',
    'delta' => 'help',
    'theme' => $default_theme,
    'status' => 1,
    'weight' => 0,
    'region' => 'help',
    'visibility' => 0,
    'pages' => '',
    'cache' => -1,
  ));
  findit_add_block(array(
    'module' => 'system',
    'delta' => 'main',
    'theme' => $admin_theme,
    'status' => 1,
    'weight' => 0,
    'region' => 'content',
    'visibility' => 0,
    'pages' => '',
    'cache' => -1,
  ));
  findit_add_block(array(
    'module' => 'system',
    'delta' => 'help',
    'theme' => $admin_theme,
    'status' => 1,
    'weight' => 0,
    'region' => 'help',
    'visibility' => 0,
    'pages' => '',
    'cache' => -1,
  ));
  findit_add_block(array(
    'module' => 'user',
    'delta' => 'login',
    'theme' => $admin_theme,
    'status' => 1,
    'weight' => 10,
    'region' => 'content',
    'visibility' => 0,
    'pages' => '',
    'cache' => -1,
  ));

  // TODO: Look for alternative.
  // Manual placement of blocks created by modules can interfere with default
  // block placement functionality.
  findit_add_block(array(
    'module' => 'views',
    'delta' => 'announcements-block_current',
    'theme' => $default_theme,
    'status' => 1,
    'weight' => 10,
    'region' => 'content',
    'visibility' => 1,
    'pages' => '<front>',
    'cache' => -1,
  ));

  $vocabularies = array(
    'organization_type' => st('Organization type'),
    'categories' => st('Categories'),
    'program_licensors' => st('Program licensors'),
    'program_accreditors' => st('Program accreditors'),
    'times' => st('Times'),
    'transportation_options' => st('Transportation options'),
    'parking_options' => st('Parking availability'),
    'age_eligibility_options' => st('Age eligibility'),
    'grade_eligibility_options' => st('Grade eligibility'),
    'other_eligibility_options' => st('Other eligibility'),
    'languages' => st('Languages the staff speaks'),
    'accessibility_options' => st('Accessibility'),
    'financial_aid_opportunities' => st('Financial aid opportunities'),
    'audience' => st('Audience'),
    'amenities' => st('Amenities'),
    'location_type' => st('Location type'),
  );

  foreach ($vocabularies as $machine_name => $name) {
    findit_create_vocabulary($name, $machine_name);
    findit_vocabulary_load_terms($machine_name, dirname(__FILE__) . "/data/$machine_name.json");
  }

  findit_add_node_type_page();
  findit_add_node_type_organization();
  findit_add_node_type_program();
  findit_add_node_type_event();
  findit_add_node_type_announcement();
  findit_add_node_type_location();

  findit_configure_people();
  findit_create_admin_role();
  findit_create_organization_manager_role();
  findit_create_content_manager_role();

  // Enable default permissions for system roles.
  $filtered_html_permission = filter_permission_name($filtered_html_format);
  user_role_grant_permissions(DRUPAL_ANONYMOUS_RID, array('access content', 'search content', 'access comments', $filtered_html_permission));
  user_role_grant_permissions(DRUPAL_AUTHENTICATED_RID, array('access content', 'search content', 'access comments', 'post comments', 'skip comment approval', $filtered_html_permission));
}

/**
 * Creates the filtered html format.
 *
 * @return object
 */
function findit_create_filtered_html_format() {
  $filtered_html_format = (object) array(
    'format' => 'filtered_html',
    'name' => 'Filtered HTML',
    'weight' => 0,
    'filters' => array(
      // URL filter.
      'filter_url' => array(
        'weight' => 0,
        'status' => 1,
      ),
      // HTML filter.
      'filter_html' => array(
        'weight' => 1,
        'status' => 1,
      ),
      // Line break filter.
      'filter_autop' => array(
        'weight' => 2,
        'status' => 1,
      ),
      // HTML corrector filter.
      'filter_htmlcorrector' => array(
        'weight' => 10,
        'status' => 1,
      ),
    ),
  );
  filter_format_save($filtered_html_format);
  return $filtered_html_format;
}

/**
 * Creates the full html format.
 *
 * @return object
 */
function findit_create_full_html_format() {
  $full_html_format = (object) array(
    'format' => 'full_html',
    'name' => 'Full HTML',
    'weight' => 1,
    'filters' => array(
      // URL filter.
      'filter_url' => array(
        'weight' => 0,
        'status' => 1,
      ),
      // Line break filter.
      'filter_autop' => array(
        'weight' => 1,
        'status' => 1,
      ),
      // HTML corrector filter.
      'filter_htmlcorrector' => array(
        'weight' => 10,
        'status' => 1,
      ),
    ),
  );
  filter_format_save($full_html_format);
  return $full_html_format;
}

/**
 * Create a default role for site administrators.
 *
 * All available permissions are assigned to that role.
 */
function findit_create_admin_role() {
  $admin_role = new stdClass();
  $admin_role->name = 'administrator';
  $admin_role->weight = 2;
  user_role_save($admin_role);
  user_role_grant_permissions($admin_role->rid, array_keys(module_invoke_all('permission')));
  // Set this as the administrator role.
  variable_set('user_admin_role', $admin_role->rid);
  // Assign user 1 the "administrator" role.
  db_insert('users_roles')
    ->fields(array('uid' => 1, 'rid' => $admin_role->rid))
    ->execute();
}

/**
 * Create a default role for organization managers.
 */
function findit_create_organization_manager_role() {
  $role = new stdClass();
  $role->name = FINDIT_ROLE_ORGANIZATION_MANAGER;
  $role->weight = 3;
  user_role_save($role);
  user_role_grant_permissions($role->rid, array(
    'access administration pages',
    'access content',
    'access content overview',
    'access contextual links',
    'access comments',
    'access toolbar',
    'administer taxonomy',
    'post comments',
    'skip comment approval',
    'create organization content',
    'edit any organization content',
    'delete any organization content',
    'create program content',
    'edit any program content',
    'delete any program content',
    'create event content',
    'edit any event content',
    'delete any event content',
    'create location content',
    'edit any location content',
    'delete any location content',
    'view own unpublished content',
    'view the administration theme',
  ));
}

/**
 * Create a default role for content managers.
 */
function findit_create_content_manager_role() {
  $role = new stdClass();
  $role->name = FINDIT_ROLE_CONTENT_MANAGER;
  $role->weight = 4;
  user_role_save($role);
  user_role_grant_permissions($role->rid, array(
    'access content',
    'create announcement content',
    'edit any announcement content',
    'delete any announcement content',
  ));
}

function findit_configure_people() {
  variable_set('user_pictures', '1');
  variable_set('user_picture_dimensions', '1024x1024');
  variable_set('user_picture_file_size', '800');
  variable_set('user_picture_style', 'thumbnail');
  variable_set('user_register', USER_REGISTER_VISITORS);
}

function findit_add_node_type_page() {
  $bundle = 'page';

  // Content type setup.

  $type = array(
    'type' => $bundle,
    'name' => st('Basic page'),
    'base' => 'node_content',
    'description' => st("Use <em>basic pages</em> for your static content, such as an 'About us' page."),
    'custom' => 1,
    'modified' => 1,
    'locked' => 0,
  );
  $type = node_type_set_defaults($type);
  node_type_save($type);
  rdf_mapping_save(array(
    'type' => 'node',
    'bundle' => $bundle,
    'mapping' => array(
      'rdftype' => array('foaf:Document'),
    ),
  ));
  variable_set("node_options_$bundle", array('status'));
  variable_set("comment_$bundle", COMMENT_NODE_HIDDEN);
  variable_set("node_submitted_$bundle", FALSE);
}

function findit_add_node_type_organization() {
  $bundle = 'organization';

  // Content type setup.

  $type = array(
    'type' => $bundle,
    'name' => st('Organization'),
    'base' => 'node_content',
    'description' => st(""),
    'custom' => 1,
    'modified' => 1,
    'locked' => 0,
    'title_label' => st('Organization name'),
  );
  $type = node_type_set_defaults($type);
  node_type_save($type);
  rdf_mapping_save(array(
    'type' => 'node',
    'bundle' => $bundle,
    'mapping' => array(
      'rdftype' => array('foaf:Document'),
    ),
  ));
  variable_set("node_options_$bundle", array('status'));
  variable_set("comment_$bundle", COMMENT_NODE_HIDDEN);
  variable_set("node_submitted_$bundle", FALSE);

  // Add fields.

  $body = node_add_body_field((object) array('type' => $bundle), st('Organization description'));
  findit_instance_set_description($body, st('Brief description of what your organization is so that the people who are going to use or participate in your programs and/or events will know what it is all about (50 words). Avoid technical or complex terminology.'));
  findit_instance_set_required($body);
  field_update_instance($body);

  findit_add_image_field('node', FINDIT_FIELD_LOGO, $bundle, st('Picture or logo'));

  findit_add_term_reference_field('node', FINDIT_FIELD_ORGANIZATION_TYPE, $bundle, 'organization_type', st('Organization type'));

  $organization_url = findit_add_url_field('node', FINDIT_FIELD_ORGANIZATION_URL, $bundle, st('Organization\'s URL'));
  findit_instance_set_description($organization_url, st('Enter the URL of the organization\'s website, if any.'));
  field_update_instance($organization_url);

  $facebook_page = findit_add_url_field('node', FINDIT_FIELD_FACEBOOK_PAGE, $bundle, st('Organization\'s Facebook page'));
  findit_instance_set_description($facebook_page, st('Enter the URL of the organization\'s Facebook page, if any.'));
  field_update_instance($facebook_page);

  $twitter_handle = findit_add_text_field('node', FINDIT_FIELD_TWITTER_HANDLE, $bundle, st('Organization\'s Twitter handle'));
  findit_instance_set_description($twitter_handle, st('Enter the URL of the organization\'s Facebook page, if any.'));
  field_update_instance($twitter_handle);

  $contact_information = findit_add_text_long_field('node', FINDIT_FIELD_CONTACT_INFORMATION, $bundle, st('Contact information'));
  findit_instance_set_description($contact_information, st('For each office of the organization, provide the following information: a) name, role and contact information (email, phone, etc.); b) Office address (street, city, state, zip); c) Office hours (Sunday: noon-5pm, Monday: 9am-5pm, etc).'));
  field_update_instance($contact_information);

  $organization_notes = findit_add_text_long_field('node', FINDIT_FIELD_ORGANIZATION_NOTES, $bundle, st('Organization notes'));
  findit_instance_set_description($organization_notes, st('Information about special hours and other elements that may not fit above.'));
  field_update_instance($organization_notes);

  // Group fields.

  $weight = 0;
  $group_basic_information = (object) array(
    'identifier' => "group_basic_information|node|$bundle|form",
    'group_name' => 'group_basic_information',
    'entity_type' => 'node',
    'bundle' => $bundle,
    'mode' => 'form',
    'label' => st('What'),
    'weight' => $weight++,
    'children' => array(
      'title',
      'body',
      FINDIT_FIELD_LOGO,
      FINDIT_FIELD_ORGANIZATION_TYPE,
      FINDIT_FIELD_ORGANIZATION_URL,
      FINDIT_FIELD_FACEBOOK_PAGE,
      FINDIT_FIELD_TWITTER_HANDLE,
    ),
    'format_type' => 'fieldset',
    'format_settings' => array(
      'instance_settings' => array(
        'required_fields' => 1,
        'show_label' => 1,
      ),
      'formatter' => 'open',
    ),
  );
  field_group_group_save($group_basic_information);

  $group_contact_information = (object) array(
    'identifier' => "group_contact_information|node|$bundle|form",
    'group_name' => 'group_contact_information',
    'entity_type' => 'node',
    'bundle' => $bundle,
    'mode' => 'form',
    'label' => st('Contact Information'),
    'weight' => $weight++,
    'children' => array(
      FINDIT_FIELD_CONTACT_INFORMATION,
      FINDIT_FIELD_ORGANIZATION_NOTES,
    ),
    'format_type' => 'fieldset',
    'format_settings' => array(
      'instance_settings' => array(
        'required_fields' => 0,
        'show_label' => 1,
      ),
      'formatter' => 'open',
    ),
  );
  field_group_group_save($group_contact_information);
}

function findit_add_node_type_program() {
  $bundle = 'program';

  // Content type setup.

  $type = array(
    'type' => $bundle,
    'name' => st('Program'),
    'base' => 'node_content',
    'description' => st(""),
    'custom' => 1,
    'modified' => 1,
    'locked' => 0,
    'title_label' => st('Program name'),
  );
  $type = node_type_set_defaults($type);
  node_type_save($type);
  rdf_mapping_save(array(
    'type' => 'node',
    'bundle' => $bundle,
    'mapping' => array(
      'rdftype' => array('foaf:Document'),
    ),
  ));
  variable_set("node_options_$bundle", array('status'));
  variable_set("comment_$bundle", COMMENT_NODE_HIDDEN);
  variable_set("node_submitted_$bundle", FALSE);

  // Add fields.

  $organizations = findit_add_entityreference_field('node', FINDIT_FIELD_ORGANIZATIONS, $bundle, array('organization'), st('Organizations'), FIELD_CARDINALITY_UNLIMITED);
  findit_instance_set_description($organizations, st('Type in the organization(s) responsible for this program. We will need that information to connect this form with the organization.'));
  findit_instance_set_required($organizations);
  findit_instance_set_widget_settings($organizations, array('references_dialog_add' => TRUE));
  field_update_instance($organizations);

  findit_add_image_field('node', FINDIT_FIELD_LOGO, $bundle, st('Picture or logo'));

  $categories = findit_add_term_reference_field('node', FINDIT_FIELD_CATEGORIES, $bundle, 'categories', st('Program categories'), FIELD_CARDINALITY_UNLIMITED);
  findit_instance_set_required($categories);
  findit_instance_set_widget_type($categories, 'options_buttons');
  field_update_instance($categories);

  findit_add_list_boolean_field('node', FINDIT_FIELD_LICENSED, $bundle, st('Are you licensed?'));
  findit_field_set_allowed_values(FINDIT_FIELD_LICENSED, array(
    1 => st('Yes'),
    0 => st('No'),
  ));

  $program_licensors = findit_add_term_reference_field('node', FINDIT_FIELD_PROGRAM_LICENSORS, $bundle, 'program_licensors', st('Program licensors'), FIELD_CARDINALITY_UNLIMITED);
  findit_instance_set_widget_type($program_licensors, 'options_buttons');
  field_update_instance($program_licensors);

  findit_add_list_boolean_field('node', FINDIT_FIELD_ACCREDITED, $bundle, st('Are you accredited?'));
  findit_field_set_allowed_values(FINDIT_FIELD_ACCREDITED, array(
    1 => st('Yes'),
    0 => st('No'),
  ));

  $program_accreditors = findit_add_term_reference_field('node', FINDIT_FIELD_PROGRAM_ACCREDITORS, $bundle, 'program_accreditors', st('Program accreditors'), FIELD_CARDINALITY_UNLIMITED);
  findit_instance_set_widget_type($program_accreditors, 'options_buttons');
  field_update_instance($program_accreditors);

  findit_add_list_boolean_field('node', FINDIT_FIELD_QRIS, $bundle, st('Do you participate in QRIS - Quality Rating Improvement System?'));
  findit_field_set_allowed_values(FINDIT_FIELD_QRIS, array(
    1 => st('Yes'),
    0 => st('No'),
  ));

  findit_add_text_long_field('node', FINDIT_FIELD_QRIS_LEVEL, $bundle, st('If yes, at what level are you currently at?'));

  $program_times = findit_add_term_reference_field('node', FINDIT_FIELD_TIMES, $bundle, 'times', st('Program times'), FIELD_CARDINALITY_UNLIMITED);
  findit_instance_set_widget_type($program_times, 'options_buttons');
  field_update_instance($program_times);

  $program_schedule = findit_add_text_long_field('node', FINDIT_FIELD_SCHEDULE, $bundle, st('Program schedule'));
  findit_instance_set_description($program_schedule, st("In the box below, insert the days and times of the program. Please provide as much detail about the events as possible. Don't forget to add special days such as: 12/25: Closed for Christmas, July 10: Special presentation for parents, etc. If needed, feel free to insert multiple sections."));
  field_update_instance($program_schedule);

  $program_locations = findit_add_entityreference_field('node', FINDIT_FIELD_LOCATIONS, $bundle, array('location'), st('Program locations'), FIELD_CARDINALITY_UNLIMITED);
  findit_instance_set_description($program_locations, st("Enter the name of the site for each location of where the program is going to run. This may not necessarily be the same location as the Provider's address."));
  findit_instance_set_widget_settings($program_locations, array('references_dialog_add' => TRUE));
  field_update_instance($program_locations);

  $transportation = findit_add_list_text_field('node', FINDIT_FIELD_TRANSPORTATION, $bundle, st('Is transportation provided to participants of the program?'), FIELD_CARDINALITY_UNLIMITED);
  findit_field_set_allowed_values(FINDIT_FIELD_TRANSPORTATION, array(
    'to' => st('Transportation provided to the program'),
    'from' => st('Transportation provided from the program'),
  ));
  findit_instance_set_widget_type($transportation, 'options_buttons');
  field_update_instance($transportation);

  $transportation_options = findit_add_term_reference_field('node', FINDIT_FIELD_TRANSPORTATION_OPTIONS, $bundle, 'transportation_options', st('Transportation options'), FIELD_CARDINALITY_UNLIMITED);
  findit_instance_set_widget_type($transportation_options, 'options_buttons');
  field_update_instance($transportation_options);

  $parking_options = findit_add_term_reference_field('node', FINDIT_FIELD_PARKING_OPTIONS, $bundle, 'parking_options', st('Parking availability'), FIELD_CARDINALITY_UNLIMITED);
  findit_instance_set_widget_type($parking_options, 'options_buttons');
  field_update_instance($parking_options);

  $transportation_notes = findit_add_text_long_field('node', FINDIT_FIELD_TRANSPORTATION_NOTES, $bundle, st('Transportation - notes'));
  findit_instance_set_description($transportation_notes, st('If needed, insert additional transportation notes below'));
  field_update_instance($transportation_notes);

  $age_eligibility = findit_add_term_reference_field('node', FINDIT_FIELD_AGE_ELIGIBILITY, $bundle, 'age_eligibility_options', st('Age eligibility'), FIELD_CARDINALITY_UNLIMITED);
  findit_instance_set_widget_type($age_eligibility, 'options_buttons');
  field_update_instance($age_eligibility);

  $grade_eligibility = findit_add_term_reference_field('node', FINDIT_FIELD_GRADE_ELIGIBILITY, $bundle, 'grade_eligibility_options', st('Grade eligibility'), FIELD_CARDINALITY_UNLIMITED);
  findit_instance_set_widget_type($grade_eligibility, 'options_buttons');
  field_update_instance($grade_eligibility);

  $other_eligibility = findit_add_term_reference_field('node', FINDIT_FIELD_OTHER_ELIGIBILITY, $bundle, 'other_eligibility_options', st('Other eligibility'), FIELD_CARDINALITY_UNLIMITED);
  findit_instance_set_widget_type($other_eligibility, 'options_buttons');
  field_update_instance($other_eligibility);

  $eligibility_notes = findit_add_text_long_field('node', FINDIT_FIELD_ELIGIBILITY_NOTES, $bundle, st('Eligibility - notes'));
  findit_instance_set_description($eligibility_notes, st('If needed, insert additional elegibility notes below'));
  field_update_instance($eligibility_notes);

  $staff_languages = findit_add_term_reference_field('node', FINDIT_FIELD_STAFF_LANGUAGES, $bundle, 'languages', st('Languages the staff speaks'), FIELD_CARDINALITY_UNLIMITED);
  findit_instance_set_widget_type($staff_languages, 'options_buttons');
  field_update_instance($staff_languages);

  $accessibility = findit_add_term_reference_field('node', FINDIT_FIELD_ACCESSIBILITY, $bundle, 'accessibility_options', st('Accessibility'), FIELD_CARDINALITY_UNLIMITED);
  findit_instance_set_widget_type($accessibility, 'options_buttons');
  field_update_instance($accessibility);

  findit_add_list_boolean_field('node', FINDIT_FIELD_GRATIS, $bundle, st('Is this a free program?'));
  findit_field_set_allowed_values(FINDIT_FIELD_GRATIS, array(
    1 => st('Yes'),
    0 => st('No'),
  ));

  findit_add_text_long_field('node', FINDIT_FIELD_COST, $bundle, st('If not free, how much would it cost? And for how many hours/sessions?'));

  $financial_aid = findit_add_term_reference_field('node', FINDIT_FIELD_FINANCIAL_AID, $bundle, 'financial_aid_opportunities', st('Financial aid opportunities'), FIELD_CARDINALITY_UNLIMITED);
  findit_instance_set_widget_type($financial_aid, 'options_buttons');
  field_update_instance($financial_aid);

  $financial_aid_notes = findit_add_text_long_field('node', FINDIT_FIELD_FINANCIAL_AID_NOTES, $bundle, st('Financial aid - notes'));
  findit_instance_set_description($financial_aid_notes, st('If needed, insert additional financial aid notes below'));
  field_update_instance($financial_aid_notes);

  $registration = findit_add_list_text_field('node', FINDIT_FIELD_REGISTRATION, $bundle, st('Registration/Application'));
  findit_field_set_allowed_values(FINDIT_FIELD_REGISTRATION, array(
    'ongoing' => st('Ongoing'),
    'dates' => st('Specific dates'),
  ));
  findit_instance_set_widget_type($registration, 'options_buttons');
  field_update_instance($registration);

  findit_add_date_field('node', FINDIT_FIELD_REGISTRATION_DATES, $bundle, st('If needed, type the registration/application dates'), FIELD_CARDINALITY_UNLIMITED);

  $registration_instructions = findit_add_text_long_field('node', FINDIT_FIELD_REGISTRATION_INSTRUCTIONS, $bundle, st('Registration/Application instructions'));
  findit_instance_set_description($registration_instructions, st('Every program is different. Please provide a detailed step-by-step explanation of how to register/apply to your program.'));
  field_update_instance($registration_instructions);

  $registration_file = findit_add_file_field('node', FINDIT_FIELD_REGISTRATION_FILE, $bundle, st('Registration/Application instructions - file'));
  findit_instance_set_description($registration_file, st('Are the registration/application instructions in a file that people should be able to download? If so, add the name of the file here'));
  field_update_instance($registration_file);

  $registration_url = findit_add_url_field('node', FINDIT_FIELD_REGISTRATION_URL, $bundle, st('Registration/Application - URL'));
  findit_instance_set_description($registration_url, st('URL of the registration/application page'));
  field_update_instance($registration_url);

  $registration_notes = findit_add_text_long_field('node', FINDIT_FIELD_REGISTRATION_NOTES, $bundle, st('Registration/Application - special notes'));
  findit_instance_set_description($registration_notes, st('Insert here special tips that parents should pay special attention to when registering/applying for this program'));
  field_update_instance($registration_notes);

  $program_url = findit_add_url_field('node', FINDIT_FIELD_PROGRAM_URL, $bundle, st('Program URL'));
  findit_instance_set_description($program_url, st('Enter the URL of the program\'s website, if any.'));
  field_update_instance($program_url);

  $facebook_page = findit_add_url_field('node', FINDIT_FIELD_FACEBOOK_PAGE, $bundle, st('Program Facebook page'));
  findit_instance_set_description($facebook_page, st("Enter the URL of the program's Facebook page, if any."));
  field_update_instance($facebook_page);

  $twitter_handle = findit_add_text_field('node', FINDIT_FIELD_TWITTER_HANDLE, $bundle, st('Program Twitter handle'));
  findit_instance_set_description($twitter_handle, st("Enter the program's Twitter handle/username, if any."));
  field_update_instance($twitter_handle);

  $contact_information = findit_add_text_long_field('node', FINDIT_FIELD_CONTACT_INFORMATION, $bundle, st('Contact'));
  findit_instance_set_description($contact_information, st('Please include the most useful and reliable contact information below'));
  field_update_instance($contact_information);

  $body = node_add_body_field((object) array('type' => $bundle), st('Program description'));
  findit_instance_set_description($body, st('Brief description of what your program is so that the people who are going to use or participate in your program will know what it is all about (50 words). Avoid technical or complex terminology.'));
  findit_instance_set_required($body);
  field_update_instance($body);

  // Group fields.

  $weight = 0;
  $group_basic_information = (object) array(
    'identifier' => "group_basic_information|node|$bundle|form",
    'group_name' => 'group_basic_information',
    'entity_type' => 'node',
    'bundle' => $bundle,
    'mode' => 'form',
    'label' => st('What'),
    'weight' => $weight++,
    'children' => array(
      'title',
      FINDIT_FIELD_ORGANIZATIONS,
      FINDIT_FIELD_LOGO,
      FINDIT_FIELD_CATEGORIES,
    ),
    'format_type' => 'fieldset',
    'format_settings' => array(
      'instance_settings' => array(
        'required_fields' => 1,
        'show_label' => 1,
      ),
      'formatter' => 'open',
    ),
  );
  field_group_group_save($group_basic_information);

  $group_licensing_accreditation = (object) array(
    'identifier' => "group_licensing_accreditation|node|$bundle|form",
    'group_name' => 'group_licensing_accreditation',
    'entity_type' => 'node',
    'bundle' => $bundle,
    'mode' => 'form',
    'label' => st('Licensing and accreditation'),
    'weight' => $weight++,
    'children' => array(
      FINDIT_FIELD_LICENSED,
      FINDIT_FIELD_PROGRAM_LICENSORS,
      FINDIT_FIELD_ACCREDITED,
      FINDIT_FIELD_PROGRAM_ACCREDITORS,
      FINDIT_FIELD_QRIS,
      FINDIT_FIELD_QRIS_LEVEL,
    ),
    'format_type' => 'fieldset',
    'format_settings' => array(
      'instance_settings' => array(
        'required_fields' => 1,
        'show_label' => 1,
      ),
      'formatter' => 'open',
    ),
  );
  field_group_group_save($group_licensing_accreditation);

  $group_when = (object) array(
    'identifier' => "group_when|node|$bundle|form",
    'group_name' => 'group_when',
    'entity_type' => 'node',
    'bundle' => $bundle,
    'mode' => 'form',
    'label' => st('When'),
    'weight' => $weight++,
    'children' => array(
      FINDIT_FIELD_TIMES,
      FINDIT_FIELD_SCHEDULE,
    ),
    'format_type' => 'fieldset',
    'format_settings' => array(
      'instance_settings' => array(
        'required_fields' => 0,
        'show_label' => 1,
      ),
      'formatter' => 'open',
    ),
  );
  field_group_group_save($group_when);

  $group_where = (object) array(
    'identifier' => "group_where|node|$bundle|form",
    'group_name' => 'group_where',
    'entity_type' => 'node',
    'bundle' => $bundle,
    'mode' => 'form',
    'label' => st('Where'),
    'weight' => $weight++,
    'children' => array(
      FINDIT_FIELD_LOCATIONS,
      FINDIT_FIELD_TRANSPORTATION,
      FINDIT_FIELD_TRANSPORTATION_OPTIONS,
      FINDIT_FIELD_PARKING_OPTIONS,
      FINDIT_FIELD_TRANSPORTATION_NOTES,
    ),
    'format_type' => 'fieldset',
    'format_settings' => array(
      'instance_settings' => array(
        'required_fields' => 0,
        'show_label' => 1,
      ),
      'formatter' => 'open',
    ),
  );
  field_group_group_save($group_where);

  $group_audience = (object) array(
    'identifier' => "group_audience|node|$bundle|form",
    'group_name' => 'group_audience',
    'entity_type' => 'node',
    'bundle' => $bundle,
    'mode' => 'form',
    'label' => st('Who (For Whom)'),
    'weight' => $weight++,
    'children' => array(
      FINDIT_FIELD_AGE_ELIGIBILITY,
      FINDIT_FIELD_GRADE_ELIGIBILITY,
      FINDIT_FIELD_OTHER_ELIGIBILITY,
      FINDIT_FIELD_ELIGIBILITY_NOTES,
      FINDIT_FIELD_STAFF_LANGUAGES,
      FINDIT_FIELD_ACCESSIBILITY,
    ),
    'format_type' => 'fieldset',
    'format_settings' => array(
      'instance_settings' => array(
        'required_fields' => 0,
        'show_label' => 1,
      ),
      'formatter' => 'open',
    ),
  );
  field_group_group_save($group_audience);

  $group_cost = (object) array(
    'identifier' => "group_cost|node|$bundle|form",
    'group_name' => 'group_cost',
    'entity_type' => 'node',
    'bundle' => $bundle,
    'mode' => 'form',
    'label' => st('Cost'),
    'weight' => $weight++,
    'children' => array(
      FINDIT_FIELD_GRATIS,
      FINDIT_FIELD_COST,
      FINDIT_FIELD_FINANCIAL_AID,
      FINDIT_FIELD_FINANCIAL_AID_NOTES,
    ),
    'format_type' => 'fieldset',
    'format_settings' => array(
      'instance_settings' => array(
        'required_fields' => 0,
        'show_label' => 1,
      ),
      'formatter' => 'open',
    ),
  );
  field_group_group_save($group_cost);

  $group_registration = (object) array(
    'identifier' => "group_registration|node|$bundle|form",
    'group_name' => 'group_registration',
    'entity_type' => 'node',
    'bundle' => $bundle,
    'mode' => 'form',
    'label' => st('Registration/Application'),
    'weight' => $weight++,
    'children' => array(
      FINDIT_FIELD_REGISTRATION,
      FINDIT_FIELD_REGISTRATION_DATES,
      FINDIT_FIELD_REGISTRATION_INSTRUCTIONS,
      FINDIT_FIELD_REGISTRATION_FILE,
      FINDIT_FIELD_REGISTRATION_URL,
      FINDIT_FIELD_REGISTRATION_NOTES,
    ),
    'format_type' => 'fieldset',
    'format_settings' => array(
      'instance_settings' => array(
        'required_fields' => 0,
        'show_label' => 1,
      ),
      'formatter' => 'open',
    ),
  );
  field_group_group_save($group_registration);

  $group_additional_information = (object) array(
    'identifier' => "group_additional_information|node|$bundle|form",
    'group_name' => 'group_additional_information',
    'entity_type' => 'node',
    'bundle' => $bundle,
    'mode' => 'form',
    'label' => st('Additional Information'),
    'weight' => $weight++,
    'children' => array(
      FINDIT_FIELD_CONTACT_INFORMATION,
      FINDIT_FIELD_PROGRAM_URL,
      FINDIT_FIELD_FACEBOOK_PAGE,
      FINDIT_FIELD_TWITTER_HANDLE,
    ),
    'format_type' => 'fieldset',
    'format_settings' => array(
      'instance_settings' => array(
        'required_fields' => 0,
        'show_label' => 1,
      ),
      'formatter' => 'open',
    ),
  );
  field_group_group_save($group_additional_information);

  $group_program_description = (object) array(
    'identifier' => "group_program_description|node|$bundle|form",
    'group_name' => 'group_program_description',
    'entity_type' => 'node',
    'bundle' => $bundle,
    'mode' => 'form',
    'label' => st('Program Description'),
    'weight' => $weight++,
    'children' => array(
      'body',
    ),
    'format_type' => 'fieldset',
    'format_settings' => array(
      'instance_settings' => array(
        'required_fields' => 0,
        'show_label' => 1,
      ),
      'formatter' => 'open',
    ),
  );
  field_group_group_save($group_program_description);
}

function findit_add_node_type_event() {
  $bundle = 'event';

  // Content type setup.

  $type = array(
    'type' => $bundle,
    'name' => st('Event'),
    'base' => 'node_content',
    'description' => st(""),
    'custom' => 1,
    'modified' => 1,
    'locked' => 0,
    'title_label' => st('Event name'),
  );
  $type = node_type_set_defaults($type);
  node_type_save($type);
  rdf_mapping_save(array(
    'type' => 'node',
    'bundle' => $bundle,
    'mapping' => array(
      'rdftype' => array('foaf:Document'),
    ),
  ));
  variable_set("node_options_$bundle", array('status'));
  variable_set("comment_$bundle", COMMENT_NODE_HIDDEN);
  variable_set("node_submitted_$bundle", FALSE);

  // Add fields.

  $event_audience = findit_add_term_reference_field('node', FINDIT_FIELD_AUDIENCE, $bundle, 'audience', st("Event audience"), FIELD_CARDINALITY_UNLIMITED);
  findit_instance_set_description($event_audience, st("Check all that apply"));
  findit_instance_set_required($event_audience);
  findit_instance_set_widget_type($event_audience, 'options_buttons');
  field_update_instance($event_audience);

  $organizations = findit_add_entityreference_field('node', FINDIT_FIELD_ORGANIZATIONS, $bundle, array('organization'), st('Organizer(s)'), FIELD_CARDINALITY_UNLIMITED);
  findit_instance_set_description($organizations, st("Type in the organization(s) responsible for this event. We need this information to connect this form with the organization's form."));
  findit_instance_set_required($organizations);
  findit_instance_set_widget_settings($organizations, array('references_dialog_add' => TRUE));
  field_update_instance($organizations);

  $programs = findit_add_entityreference_field('node', FINDIT_FIELD_PROGRAMS, $bundle, array('program'), st('Associated program(s)'), FIELD_CARDINALITY_UNLIMITED);
  findit_instance_set_description($programs, st("Is this event part of an existing program or activity? For instance, does it mark the beginning or end of the registration period, the celebration of a class, or an important milestone within a larger activity? If so, list the name(s) of the associated program(s) below."));
  field_update_instance($programs);

  $program_schedule = findit_add_text_long_field('node', FINDIT_FIELD_SCHEDULE, $bundle, st('Event schedule'));
  findit_instance_set_description($program_schedule, st("In the box below, insert the days and times of the event."));
  field_update_instance($program_schedule);

  $event_time = findit_add_term_reference_field('node', FINDIT_FIELD_TIMES, $bundle, 'times', st("Event time"), FIELD_CARDINALITY_UNLIMITED);
  findit_instance_set_description($event_time, st("When does this event run? Check all that apply."));
  findit_instance_set_widget_type($event_time, 'options_buttons');
  field_update_instance($event_time);

  $categories = findit_add_term_reference_field('node', FINDIT_FIELD_CATEGORIES, $bundle, 'categories', st("What kind of event is this?"), FIELD_CARDINALITY_UNLIMITED);
  findit_instance_set_description($categories, st("Check all that apply"));
  findit_instance_set_widget_type($categories, 'options_buttons');
  field_update_instance($categories);

  $event_locations = findit_add_entityreference_field('node', FINDIT_FIELD_LOCATIONS, $bundle, array('location'), st('Location(s)'), FIELD_CARDINALITY_UNLIMITED);
  findit_instance_set_description($event_locations, st("Enter the name of the site for each location of the event."));
  findit_instance_set_widget_settings($event_locations, array('references_dialog_add' => TRUE));
  field_update_instance($event_locations);

  $transportation_options = findit_add_term_reference_field('node', FINDIT_FIELD_TRANSPORTATION_OPTIONS, $bundle, 'transportation_options', st('Transportation options'), FIELD_CARDINALITY_UNLIMITED);
  findit_instance_set_description($transportation_options, st('Mark all the options that lie within a 2-block walk to the organization'));
  findit_instance_set_widget_type($transportation_options, 'options_buttons');
  field_update_instance($transportation_options);

  $parking_options = findit_add_term_reference_field('node', FINDIT_FIELD_PARKING_OPTIONS, $bundle, 'parking_options', st('Parking availability'), FIELD_CARDINALITY_UNLIMITED);
  findit_instance_set_description($parking_options, st('Mark all that apply'));
  findit_instance_set_widget_type($parking_options, 'options_buttons');
  field_update_instance($parking_options);

  $transportation_notes = findit_add_text_long_field('node', FINDIT_FIELD_TRANSPORTATION_NOTES, $bundle, st('Transportation - notes'));
  findit_instance_set_description($transportation_notes, st('If needed, insert additional transportation notes below'));
  field_update_instance($transportation_notes);

  $age_eligibility = findit_add_term_reference_field('node', FINDIT_FIELD_AGE_ELIGIBILITY, $bundle, 'age_eligibility_options', st('Age eligibility'), FIELD_CARDINALITY_UNLIMITED);
  findit_instance_set_description($age_eligibility, st('Check all that apply'));
  findit_instance_set_widget_type($age_eligibility, 'options_buttons');
  field_update_instance($age_eligibility);

  $grade_eligibility = findit_add_term_reference_field('node', FINDIT_FIELD_GRADE_ELIGIBILITY, $bundle, 'grade_eligibility_options', st('Grade eligibility'), FIELD_CARDINALITY_UNLIMITED);
  findit_instance_set_description($grade_eligibility, st('Check all that apply if, in addition to age, your events requires participants to be at specific grades'));
  findit_instance_set_widget_type($grade_eligibility, 'options_buttons');
  field_update_instance($grade_eligibility);

  $other_eligibility = findit_add_term_reference_field('node', FINDIT_FIELD_OTHER_ELIGIBILITY, $bundle, 'other_eligibility_options', st('Other eligibility'), FIELD_CARDINALITY_UNLIMITED);
  findit_instance_set_widget_type($other_eligibility, 'options_buttons');
  field_update_instance($other_eligibility);

  $staff_languages = findit_add_term_reference_field('node', FINDIT_FIELD_STAFF_LANGUAGES, $bundle, 'languages', st('Languages the staff speaks'), FIELD_CARDINALITY_UNLIMITED);
  findit_instance_set_description($staff_languages, st('Subject to change due to staff turnover. Check all that apply'));
  findit_instance_set_widget_type($staff_languages, 'options_buttons');
  field_update_instance($staff_languages);

  $accessibility = findit_add_term_reference_field('node', FINDIT_FIELD_ACCESSIBILITY, $bundle, 'accessibility_options', st('Accessibility'), FIELD_CARDINALITY_UNLIMITED);
  findit_instance_set_widget_type($accessibility, 'options_buttons');
  field_update_instance($accessibility);

  findit_add_list_boolean_field('node', FINDIT_FIELD_GRATIS, $bundle, st('Is this a free event?'));
  findit_field_set_allowed_values(FINDIT_FIELD_GRATIS, array(
    1 => st('Yes'),
    0 => st('No'),
  ));

  findit_add_text_long_field('node', FINDIT_FIELD_COST, $bundle, st('If not free, how much would it cost? And for how many hours/sessions?'));

  $financial_aid = findit_add_term_reference_field('node', FINDIT_FIELD_FINANCIAL_AID, $bundle, 'financial_aid_opportunities', st('Financial aid opportunities'), FIELD_CARDINALITY_UNLIMITED);
  findit_instance_set_description($financial_aid, st('Check all that apply'));
  findit_instance_set_widget_type($financial_aid, 'options_buttons');
  field_update_instance($financial_aid);

  $financial_aid_notes = findit_add_text_long_field('node', FINDIT_FIELD_FINANCIAL_AID_NOTES, $bundle, st('Financial aid - notes'));
  findit_instance_set_description($financial_aid_notes, st('If needed, insert additional financial aid notes below'));
  field_update_instance($financial_aid_notes);

  findit_add_list_boolean_field('node', FINDIT_FIELD_REGISTRATION_REQUIRED, $bundle, st('Does this event require registration/application?'));
  findit_field_set_allowed_values(FINDIT_FIELD_REGISTRATION_REQUIRED, array(
    1 => st('Yes'),
    0 => st('No'),
  ));

  $registration_dates = findit_add_date_field('node', FINDIT_FIELD_REGISTRATION_DATES, $bundle, st('Registration/Application dates'), FIELD_CARDINALITY_UNLIMITED);
  findit_instance_set_description($registration_dates, st('Please add the registration/application dates and times below. Ex. Jan 10-20: Early bird registration (9am-5pm); Jan 21-31: Regular registration (9am-5pm), etc.'));
  field_update_instance($registration_dates);

  $registration_instructions = findit_add_text_long_field('node', FINDIT_FIELD_REGISTRATION_INSTRUCTIONS, $bundle, st('Registration/Application instructions'));
  findit_instance_set_description($registration_instructions, st('Text describing how to register/application for the event'));
  field_update_instance($registration_instructions);

  $registration_file = findit_add_file_field('node', FINDIT_FIELD_REGISTRATION_FILE, $bundle, st('Registration/Application instructions - file'));
  findit_instance_set_description($registration_file, st('Name of the file with registration/application instructions'));
  field_update_instance($registration_file);

  $registration_url = findit_add_url_field('node', FINDIT_FIELD_REGISTRATION_URL, $bundle, st('Registration/Application - URL'));
  findit_instance_set_description($registration_url, st('URL of the registration/application page'));
  field_update_instance($registration_url);

  $registration_notes = findit_add_text_long_field('node', FINDIT_FIELD_REGISTRATION_NOTES, $bundle, st('Registration/Application - special notes'));
  findit_instance_set_description($registration_notes, st('Insert here special tips that parents should pay special attention to when registering/applying for this event'));
  field_update_instance($registration_notes);

  $contact_information = findit_add_text_long_field('node', FINDIT_FIELD_CONTACT_INFORMATION, $bundle, st('Contact'));
  findit_instance_set_description($contact_information, st('Please include the most useful and reliable contact information below'));
  field_update_instance($contact_information);

  $body = node_add_body_field((object) array('type' => $bundle), st('Event description'));
  findit_instance_set_description($body, st('Brief description so that the people you want to come to your event understands what it is all about (50 words). Avoid technical or complex terminology.'));
  field_update_instance($body);

  $event_url = findit_add_url_field('node', FINDIT_FIELD_EVENT_URL, $bundle, st('Event URL'));
  findit_instance_set_description($event_url, st('Enter the URL of the program\'s website, if any.'));
  field_update_instance($event_url);

  $facebook_page = findit_add_url_field('node', FINDIT_FIELD_FACEBOOK_PAGE, $bundle, st('Event Facebook page'));
  findit_instance_set_description($facebook_page, st("Enter the URL of the program's Facebook page, if any."));
  field_update_instance($facebook_page);

  $twitter_handle = findit_add_text_field('node', FINDIT_FIELD_TWITTER_HANDLE, $bundle, st('Event Twitter handle'));
  findit_instance_set_description($twitter_handle, st("Enter the program's Twitter handle/username, if any."));
  field_update_instance($twitter_handle);

  $amenities = findit_add_term_reference_field('node', FINDIT_FIELD_AMENITIES, $bundle, 'amenities', st('Amenities'), FIELD_CARDINALITY_UNLIMITED);
  findit_instance_set_description($amenities, st("Check all that apply"));
  findit_instance_set_widget_type($amenities, 'options_buttons');
  field_update_instance($amenities);

  // Group fields.

  $weight = 0;
  $group_basic_information = (object) array(
    'identifier' => "group_basic_information|node|$bundle|form",
    'group_name' => 'group_basic_information',
    'entity_type' => 'node',
    'bundle' => $bundle,
    'mode' => 'form',
    'label' => st('What'),
    'weight' => $weight++,
    'children' => array(
      'title',
      FINDIT_FIELD_AUDIENCE,
      FINDIT_FIELD_ORGANIZATIONS,
      FINDIT_FIELD_PROGRAMS,
    ),
    'format_type' => 'fieldset',
    'format_settings' => array(
      'instance_settings' => array(
        'required_fields' => 1,
        'show_label' => 1,
      ),
      'formatter' => 'open',
    ),
  );
  field_group_group_save($group_basic_information);

  $group_when = (object) array(
    'identifier' => "group_when|node|$bundle|form",
    'group_name' => 'group_when',
    'entity_type' => 'node',
    'bundle' => $bundle,
    'mode' => 'form',
    'label' => st('When'),
    'weight' => $weight++,
    'children' => array(
      FINDIT_FIELD_SCHEDULE,
      FINDIT_FIELD_TIMES,
      FINDIT_FIELD_CATEGORIES,
    ),
    'format_type' => 'fieldset',
    'format_settings' => array(
      'instance_settings' => array(
        'required_fields' => 0,
        'show_label' => 1,
      ),
      'formatter' => 'open',
    ),
  );
  field_group_group_save($group_when);

  $group_where = (object) array(
    'identifier' => "group_where|node|$bundle|form",
    'group_name' => 'group_where',
    'entity_type' => 'node',
    'bundle' => $bundle,
    'mode' => 'form',
    'label' => st('Where'),
    'weight' => $weight++,
    'children' => array(
      FINDIT_FIELD_LOCATIONS,
      FINDIT_FIELD_TRANSPORTATION_OPTIONS,
      FINDIT_FIELD_PARKING_OPTIONS,
      FINDIT_FIELD_TRANSPORTATION_NOTES,
    ),
    'format_type' => 'fieldset',
    'format_settings' => array(
      'instance_settings' => array(
        'required_fields' => 0,
        'show_label' => 1,
      ),
      'formatter' => 'open',
    ),
  );
  field_group_group_save($group_where);

  $group_audience = (object) array(
    'identifier' => "group_audience|node|$bundle|form",
    'group_name' => 'group_audience',
    'entity_type' => 'node',
    'bundle' => $bundle,
    'mode' => 'form',
    'label' => st('Who (For Whom)'),
    'weight' => $weight++,
    'children' => array(
      FINDIT_FIELD_AGE_ELIGIBILITY,
      FINDIT_FIELD_GRADE_ELIGIBILITY,
      FINDIT_FIELD_OTHER_ELIGIBILITY,
      FINDIT_FIELD_STAFF_LANGUAGES,
      FINDIT_FIELD_ACCESSIBILITY,
    ),
    'format_type' => 'fieldset',
    'format_settings' => array(
      'instance_settings' => array(
        'required_fields' => 0,
        'show_label' => 1,
      ),
      'formatter' => 'open',
    ),
  );
  field_group_group_save($group_audience);

  $group_cost = (object) array(
    'identifier' => "group_cost|node|$bundle|form",
    'group_name' => 'group_cost',
    'entity_type' => 'node',
    'bundle' => $bundle,
    'mode' => 'form',
    'label' => st('Cost'),
    'weight' => $weight++,
    'children' => array(
      FINDIT_FIELD_GRATIS,
      FINDIT_FIELD_COST,
      FINDIT_FIELD_FINANCIAL_AID,
      FINDIT_FIELD_FINANCIAL_AID_NOTES,
    ),
    'format_type' => 'fieldset',
    'format_settings' => array(
      'instance_settings' => array(
        'required_fields' => 0,
        'show_label' => 1,
      ),
      'formatter' => 'open',
    ),
  );
  field_group_group_save($group_cost);

  $group_registration = (object) array(
    'identifier' => "group_registration|node|$bundle|form",
    'group_name' => 'group_registration',
    'entity_type' => 'node',
    'bundle' => $bundle,
    'mode' => 'form',
    'label' => st('Registration/Application'),
    'weight' => $weight++,
    'children' => array(
      FINDIT_FIELD_REGISTRATION_REQUIRED,
      FINDIT_FIELD_REGISTRATION_DATES,
      FINDIT_FIELD_REGISTRATION_INSTRUCTIONS,
      FINDIT_FIELD_REGISTRATION_FILE,
      FINDIT_FIELD_REGISTRATION_URL,
      FINDIT_FIELD_REGISTRATION_NOTES,
    ),
    'format_type' => 'fieldset',
    'format_settings' => array(
      'instance_settings' => array(
        'required_fields' => 0,
        'show_label' => 1,
      ),
      'formatter' => 'open',
    ),
  );
  field_group_group_save($group_registration);

  $group_additional_information = (object) array(
    'identifier' => "group_additional_information|node|$bundle|form",
    'group_name' => 'group_additional_information',
    'entity_type' => 'node',
    'bundle' => $bundle,
    'mode' => 'form',
    'label' => st('Additional Information'),
    'weight' => $weight++,
    'children' => array(
      FINDIT_FIELD_CONTACT_INFORMATION,
      'body',
      FINDIT_FIELD_EVENT_URL,
      FINDIT_FIELD_FACEBOOK_PAGE,
      FINDIT_FIELD_TWITTER_HANDLE,
      FINDIT_FIELD_AMENITIES,
    ),
    'format_type' => 'fieldset',
    'format_settings' => array(
      'instance_settings' => array(
        'required_fields' => 0,
        'show_label' => 1,
      ),
      'formatter' => 'open',
    ),
  );
  field_group_group_save($group_additional_information);
}

function findit_add_node_type_announcement() {
  $bundle = 'announcement';

  // Content type setup.

  $type = array(
    'type' => $bundle,
    'name' => st('Announcement'),
    'base' => 'node_content',
    'description' => st(""),
    'custom' => 1,
    'modified' => 1,
    'locked' => 0,
  );
  $type = node_type_set_defaults($type);
  node_type_save($type);
  rdf_mapping_save(array(
    'type' => 'node',
    'bundle' => $bundle,
    'mapping' => array(
      'rdftype' => array('foaf:Document'),
    ),
  ));
  variable_set("node_options_$bundle", array('status'));
  variable_set("comment_$bundle", COMMENT_NODE_HIDDEN);
  variable_set("node_submitted_$bundle", FALSE);

  // Add fields.

  $body = node_add_body_field((object) array('type' => $bundle), st('Body'));
  findit_instance_set_required($body);
  field_update_instance($body);

  $publishing_date = findit_add_date_field('node', FINDIT_FIELD_PUBLISHING_DATE, $bundle, st('Publishing Date'));
  findit_field_set_granularity(FINDIT_FIELD_PUBLISHING_DATE, array(
    'year' => 'year',
    'month' => 'month',
    'day' => 'day',
    'hour' => 0,
    'minute' => 0,
    'second' => 0,
  ));
  findit_instance_set_description($publishing_date, st("The date the announcement is supposed to go online."));
  findit_instance_set_required($publishing_date);
  findit_instance_set_display_type($publishing_date, 'teaser', 'date_default');
  findit_instance_set_display_label($publishing_date, 'teaser', 'inline');
  findit_instance_set_display_weight($publishing_date, 'teaser', 1);
  findit_instance_set_display_settings($publishing_date, 'teaser', array(
    'format_type' => 'long',
    'fromto'          => 'both',
  ));
  field_update_instance($publishing_date);

  $expiration_date = findit_add_date_field('node', FINDIT_FIELD_EXPIRATION_DATE, $bundle, st('Expiration Date'));
  findit_field_set_granularity(FINDIT_FIELD_EXPIRATION_DATE, array(
    'year' => 'year',
    'month' => 'month',
    'day' => 'day',
    'hour' => 0,
    'minute' => 0,
    'second' => 0,
  ));
  findit_instance_set_description($expiration_date, st("The date the announcement is supposed to go offline."));
  findit_instance_set_required($expiration_date);
  findit_instance_set_settings($expiration_date, array(
    'default_value' => 'strtotime',
    'default_value_code' => '+2 weeks',
    'default_value2' => 'same',
    'default_value_code2' => '',
    'user_register_form' => FALSE,
  ));
  findit_instance_set_display_type($expiration_date, 'teaser', 'date_default');
  findit_instance_set_display_label($expiration_date, 'teaser', 'inline');
  findit_instance_set_display_weight($expiration_date, 'teaser', 2);
  findit_instance_set_display_settings($expiration_date, 'teaser',  array(
    'format_type'     => 'long',
    'fromto'          => 'both',
  ));
  field_update_instance($expiration_date);
}

function findit_add_node_type_location() {
  $bundle = 'location';

  // Content type setup.

  $type = array(
    'type' => $bundle,
    'name' => st('Location'),
    'base' => 'node_content',
    'description' => st(""),
    'custom' => 1,
    'modified' => 1,
    'locked' => 0,
  );
  $type = node_type_set_defaults($type);
  node_type_save($type);
  rdf_mapping_save(array(
    'type' => 'node',
    'bundle' => $bundle,
    'mapping' => array(
      'rdftype' => array('foaf:Document'),
    ),
  ));
  variable_set("node_options_$bundle", array('status'));
  variable_set("comment_$bundle", COMMENT_NODE_HIDDEN);
  variable_set("node_submitted_$bundle", FALSE);

  // Add fields.

  $subtitle = findit_add_text_field('node', FINDIT_FIELD_SUBTITLE, $bundle, st('Subtitle'));
  findit_instance_set_description($subtitle, st('Use this for additional descriptors such as "Main office".'));
  field_update_instance($subtitle);

  $location_type = findit_add_term_reference_field('node', FINDIT_FIELD_LOCATION_TYPE, $bundle, 'location_type', st('Type'), FIELD_CARDINALITY_UNLIMITED);
  findit_instance_set_description($location_type, st("Check all that apply"));
  findit_instance_set_widget_type($location_type, 'options_buttons');
  field_update_instance($location_type);

  $address = findit_add_text_long_field('node', FINDIT_FIELD_ADDRESS, $bundle, st('Address'));
  findit_instance_set_description($address, st('Enter the address in this format (one per line): name | street address | suite/apt/room/etc. | city, state, zip'));
  findit_instance_set_required($address);
  field_update_instance($address);

  $geocode = findit_add_geolocation_latlng_field('node', FINDIT_FIELD_GEOCODE, $bundle, st('Geocode'));
  findit_instance_set_description($geocode, st('Enter a valid street address or click to position the marker on the map'));
  field_update_instance($geocode);

  $transportation_notes = findit_add_text_long_field('node', FINDIT_FIELD_TRANSPORTATION_NOTES, $bundle, st('Transportation and parking notes'));
  findit_instance_set_description($transportation_notes, st('Enter notes for transportation and parking. We will use the geocode to refer users to an outside service for specific transportation information.'));
  field_update_instance($transportation_notes);
}

/**
 * Load taxonomy terms for the given vocabulary from the source path.
 *
 * @param type $machine_name
 */
function findit_vocabulary_load_terms($machine_name, $path) {
  Migration::registerMigration('TaxonomyTermJSONMigration', $machine_name, array(
    'vocabulary' => $machine_name,
    'path' => $path,
  ));
  $migration = Migration::getInstance($machine_name);
  $migration->processImport();
}

/**
 * Implements hook_views_api().
 */
function findit_views_api() {
  return array('api' => 3.0);
}
