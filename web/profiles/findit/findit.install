<?php
/**
 * @file
 * Install, update and uninstall functions for the findit installation
 * profile.
 */

require_once DRUPAL_ROOT . '/profiles/findit/findit.inc';

/**
 * Implements hook_install().
 *
 * Perform actions to set up the site for this profile.
 *
 * @see system_install()
 */
function findit_install() {
  $t = get_t();

  findit_configure_language_settings();

  $filtered_html_format = findit_create_filtered_html_format();
  $full_html_format = findit_create_full_html_format();

  $default_theme = 'findit_cambridge';
  $admin_theme = 'seven';

  theme_enable(array($default_theme));
  variable_set('theme_default', $default_theme);
  findit_enable_admin_theme($admin_theme);

  // Enable some standard blocks.
  findit_add_block(array(
    'module' => 'locale',
    'delta' => 'language',
    'theme' => $default_theme,
    'status' => BLOCK_CUSTOM_ENABLED,
    'weight' => 0,
    'region' => 'header',
    'visibility' => BLOCK_VISIBILITY_NOTLISTED,
    'pages' => '',
    'cache' => DRUPAL_NO_CACHE,
    'title' => '<none>',
  ));
  findit_add_block(array(
    'module' => 'findit',
    'delta' => 'main-menu-toggle',
    'theme' => $default_theme,
    'status' => BLOCK_CUSTOM_ENABLED,
    'weight' => 1,
    'region' => 'header',
    'visibility' => BLOCK_VISIBILITY_NOTLISTED,
    'pages' => '',
    'cache' => DRUPAL_NO_CACHE,
    'title' => '',
  ));
  findit_add_block(array(
    'module' => 'findit',
    'delta' => 'search-prompt',
    'theme' => $default_theme,
    'status' => BLOCK_CUSTOM_ENABLED,
    'weight' => 2,
    'region' => 'header',
    'visibility' => BLOCK_VISIBILITY_NOTLISTED,
    'pages' => '',
    'cache' => DRUPAL_NO_CACHE,
    'title' => '',
  ));
  findit_add_block(array(
    'module' => 'findit',
    'delta' => 'title',
    'theme' => $default_theme,
    'status' => BLOCK_CUSTOM_ENABLED,
    'weight' => 0,
    'region' => 'title',
    'visibility' => BLOCK_VISIBILITY_NOTLISTED,
    'pages' => "search\nsearch/*",
    'cache' => DRUPAL_NO_CACHE,
    'title' => '<none>',
  ));
  findit_add_block(array(
    'module' => 'findit',
    'delta' => 'search-summary',
    'theme' => $default_theme,
    'status' => BLOCK_CUSTOM_ENABLED,
    'weight' => 1,
    'region' => 'title',
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages' => "search\nsearch/*",
    'cache' => DRUPAL_NO_CACHE,
    'title' => '',
  ));
  findit_add_block(array(
    'module' => 'views',
    'delta' => '-exp-search-page_search',
    'theme' => $default_theme,
    'status' => BLOCK_CUSTOM_ENABLED,
    'weight' => 2,
    'region' => 'title',
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages' => 'search',
    'cache' => DRUPAL_NO_CACHE,
    'title' => '',
  ));
  findit_add_block(array(
    'module' => 'views',
    'delta' => '-exp-search-page_1',
    'theme' => $default_theme,
    'status' => BLOCK_CUSTOM_ENABLED,
    'weight' => 2,
    'region' => 'title',
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages' => 'search/all',
    'cache' => DRUPAL_NO_CACHE,
    'title' => '',
  ));
  findit_add_block(array(
    'module' => 'views',
    'delta' => '-exp-search-page_2',
    'theme' => $default_theme,
    'status' => BLOCK_CUSTOM_ENABLED,
    'weight' => 2,
    'region' => 'title',
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages' => 'search/organizations',
    'cache' => DRUPAL_NO_CACHE,
    'title' => '',
  ));
  findit_add_block(array(
    'module' => 'views',
    'delta' => '-exp-search-page_3',
    'theme' => $default_theme,
    'status' => BLOCK_CUSTOM_ENABLED,
    'weight' => 2,
    'region' => 'title',
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages' => 'search/programs-events',
    'cache' => DRUPAL_NO_CACHE,
    'title' => '',
  ));
  findit_add_block(array(
    'module' => 'system',
    'delta' => 'main-menu',
    'theme' => $default_theme,
    'status' => BLOCK_CUSTOM_ENABLED,
    'weight' => 0,
    'region' => 'navigation',
    'visibility' => BLOCK_VISIBILITY_NOTLISTED,
    'pages' => '',
    'cache' => DRUPAL_NO_CACHE,
    'title' => '<none>',
  ));
  findit_add_block(array(
    'module' => 'findit',
    'delta' => 'contact',
    'theme' => $default_theme,
    'status' => BLOCK_CUSTOM_ENABLED,
    'weight' => 1,
    'region' => 'navigation',
    'visibility' => BLOCK_VISIBILITY_NOTLISTED,
    'pages' => '',
    'cache' => DRUPAL_CACHE_PER_ROLE,
    'title' => '',
  ));
  findit_add_block(array(
    'module' => 'findit',
    'delta' => 'tabs',
    'theme' => $default_theme,
    'status' => BLOCK_CUSTOM_ENABLED,
    'weight' => 0,
    'region' => 'utilities',
    'visibility' => BLOCK_VISIBILITY_NOTLISTED,
    'pages' => '',
    'cache' => DRUPAL_NO_CACHE,
    'title' => '',
  ));
  findit_add_block(array(
    'module' => 'system',
    'delta' => 'main',
    'theme' => $default_theme,
    'status' => BLOCK_CUSTOM_ENABLED,
    'weight' => 0,
    'region' => 'content',
    'visibility' => BLOCK_VISIBILITY_NOTLISTED,
    'pages' => '',
    'cache' => DRUPAL_NO_CACHE,
    'title' => '',
  ));
  findit_add_block(array(
    'module' => 'views',
    'delta' => 'announcements-block_current',
    'theme' => $default_theme,
    'status' => BLOCK_CUSTOM_ENABLED,
    'weight' => 10,
    'region' => 'content',
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages' => '<front>',
    'cache' => DRUPAL_NO_CACHE,
    'title' => '',
  ));
  findit_add_block(array(
    'module' => 'views',
    'delta' => 'directory-block_activity',
    'theme' => $default_theme,
    'status' => BLOCK_CUSTOM_ENABLED,
    'weight' => 10,
    'region' => 'content',
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages' => 'directory',
    'cache' => DRUPAL_NO_CACHE,
    'title' => '',
  ));
  findit_add_block(array(
    'module' => 'findit',
    'delta' => 'hero',
    'theme' => $default_theme,
    'status' => BLOCK_CUSTOM_ENABLED,
    'weight' => 0,
    'region' => 'content',
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages' => '<front>',
    'cache' => DRUPAL_CACHE_PER_ROLE,
    'title' => '',
  ));
  findit_add_block(array(
    'module' => 'findit',
    'delta' => 'highlights',
    'theme' => $default_theme,
    'status' => BLOCK_CUSTOM_ENABLED,
    'weight' => 2,
    'region' => 'content',
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages' => '<front>',
    'cache' => DRUPAL_CACHE_PER_ROLE,
    'title' => '',
  ));
  findit_add_block(array(
    'module' => 'findit',
    'delta' => 'registration',
    'theme' => $default_theme,
    'status' => BLOCK_CUSTOM_ENABLED,
    'weight' => 10,
    'region' => 'content',
    'visibility' => BLOCK_VISIBILITY_NOTLISTED,
    'pages' => '',
    'cache' => DRUPAL_NO_CACHE,
    'title' => '',
    'node_types' => array(
      'event',
      'program'
    ),
  ));
  findit_add_block(array(
    'module' => 'menu',
    'delta' => 'footer-menu',
    'theme' => $default_theme,
    'status' => BLOCK_CUSTOM_ENABLED,
    'weight' => 0,
    'region' => 'footer',
    'visibility' => BLOCK_VISIBILITY_NOTLISTED,
    'pages' => '',
    'cache' => DRUPAL_NO_CACHE,
    'title' => '<none>',
  ));
  findit_add_block(array(
    'module' => 'findit',
    'delta' => 'credits',
    'theme' => $default_theme,
    'status' => BLOCK_CUSTOM_ENABLED,
    'weight' => 1,
    'region' => 'footer',
    'visibility' => BLOCK_VISIBILITY_NOTLISTED,
    'pages' => '',
    'cache' => DRUPAL_CACHE_PER_ROLE,
    'title' => '',
  ));
  findit_add_block(array(
    'module' => 'findit',
    'delta' => 'sponsors',
    'theme' => $default_theme,
    'status' => BLOCK_CUSTOM_ENABLED,
    'weight' => 2,
    'region' => 'footer',
    'visibility' => BLOCK_VISIBILITY_NOTLISTED,
    'pages' => '',
    'cache' => DRUPAL_CACHE_PER_ROLE,
    'title' => '',
  ));
  findit_add_block(array(
    'module' => 'system',
    'delta' => 'main',
    'theme' => $admin_theme,
    'status' => BLOCK_CUSTOM_ENABLED,
    'weight' => 0,
    'region' => 'content',
    'visibility' => BLOCK_VISIBILITY_NOTLISTED,
    'pages' => '',
    'cache' => DRUPAL_NO_CACHE,
    'title' => '',
  ));
  findit_add_block(array(
    'module' => 'system',
    'delta' => 'help',
    'theme' => $admin_theme,
    'status' => BLOCK_CUSTOM_ENABLED,
    'weight' => 0,
    'region' => 'help',
    'visibility' => BLOCK_VISIBILITY_NOTLISTED,
    'pages' => '',
    'cache' => DRUPAL_NO_CACHE,
    'title' => '',
  ));
  findit_add_block(array(
    'module' => 'user',
    'delta' => 'login',
    'theme' => $admin_theme,
    'status' => BLOCK_CUSTOM_ENABLED,
    'weight' => 10,
    'region' => 'content',
    'visibility' => BLOCK_VISIBILITY_NOTLISTED,
    'pages' => '',
    'cache' => DRUPAL_NO_CACHE,
    'title' => '',
  ));

  findit_add_menu('footer-menu', $t('Footer menu'), $t('The <em>Footer menu</em> contains useful links for site visitors.'));
  findit_add_menu_link('footer-menu', $t('Provider login'), 'user', 0);
  findit_add_menu_link('footer-menu', $t('Announcement and Reminder Subscriptions'), '<front>', 1);
  findit_add_menu_link('main-menu', $t('Home'), '<front>', -1);

  $vocabularies = array(
    'accessibility_options' => $t('Accessibility'),
    'amenities' => $t('Amenities'),
    'grade_eligibility_options' => $t('Grade eligibility'),
    'neighborhoods' => $t('Neighborhoods'),
    'other_eligibility_options' => $t('Other eligibility'),
    'program_categories' => $t('Program categories'),
    'time_day_of_week' => $t('Day of the week'),
    'time_of_day' => $t('Time of day'),
    'time_of_year' => $t('Time of year'),
    'time_other' => $t('Other times'),
  );

  foreach ($vocabularies as $machine_name => $name) {
    findit_create_vocabulary($name, $machine_name);
    findit_vocabulary_load_terms($machine_name, dirname(__FILE__) . "/data/$machine_name.json");
  }

  findit_add_node_type_page();
  findit_add_node_type_organization();
  findit_add_node_type_program();
  findit_add_node_type_event();
  findit_add_node_type_announcement();
  findit_add_node_type_location();
  findit_add_node_type_contact();
  findit_add_node_type_callout();

  $node_types = array(
    'page' => array('file_name' => 'pages.json', 'migration_class' => 'NodeJSONMigration'),
    'contact' => array('file_name' => 'contacts.json', 'migration_class' => 'ContactJSONMigration'),
    'location' => array('file_name' => 'locations.json', 'migration_class' => 'LocationJSONMigration'),
    'organization' => array('file_name' => 'organizations.json', 'migration_class' => 'OrganizationJSONMigration'),
    'program' => array('file_name' => 'programs.json', 'migration_class' => 'ProgramJSONMigration'),
    'event' => array('file_name' => 'events.json', 'migration_class' => 'EventJSONMigration'),
    'callout' => array('file_name' => 'callouts.json', 'migration_class' => 'CalloutJSONMigration'),
  );

  foreach ($node_types as $machine_name => $definition) {
    findit_load_nodes($machine_name, dirname(__FILE__) . "/data/{$definition['file_name']}", $definition['migration_class']);
  }

  $q = new EntityFieldQuery();
  $q->entityCondition('entity_type', 'node');
  $result = $q->execute();
  module_load_include('pathauto.inc', 'pathauto');
  pathauto_node_update_alias_multiple(array_keys($result['node']), 'bulkupdate');

  findit_configure_image_styles();

  findit_add_subscriber_type_sms();
  findit_add_subscriber_type_email();

  findit_configure_people();
  findit_create_admin_role();
  findit_create_service_provider_role();
  findit_create_content_manager_role();

  // Enable default permissions for system roles.
  $filtered_html_permission = filter_permission_name($filtered_html_format);
  user_role_grant_permissions(DRUPAL_ANONYMOUS_RID, array(
    'access content',
    'search content',
    $filtered_html_permission,
  ));
  user_role_grant_permissions(DRUPAL_AUTHENTICATED_RID, array(
    'access content',
    'search content',
    $filtered_html_permission,
  ));

  variable_set('clone_use_node_type_name', 1);
  variable_set('search_active_modules', array('node' => 'node'));
  variable_set('date_format_long', 'D, M d, Y, h:ia');
  variable_set('date_format_medium', 'F j, Y, h:ia');
  variable_set('pathauto_node_pattern', '[node:type]/[node:title]');
}

/**
 * Configures language settings.
 */
function findit_configure_language_settings() {
  locale_add_language('es', NULL, NULL, LANGUAGE_LTR, '', '', TRUE);

  language_negotiation_set('language', array(
    'locale-url' => array('weight' => -4),
    'locale-browser' => array('weight' => -1),
    'language-default' => array('weight' => 0),
  ));

  $menu = menu_load('main-menu');
  $menu['i18n_mode'] = I18N_MODE_MULTIPLE;
  menu_save($menu);
}

/**
 * Configures image styles.
 */
function findit_configure_image_styles() {
  $style = image_style_save(array(
    'name' => 'large',
    'label' => 'Large (960x960)',
  ));
  $effects = image_effect_save(array(
    'isid' => $style['isid'],
    'weight'=> 0,
    'name' => 'image_scale',
    'data' => array('width' => '960', 'height' => '960', 'upscale' => 0),
  ));
}

/**
 * Creates the filtered html format.
 *
 * @return object
 *   The filtereed html format object
 */
function findit_create_filtered_html_format() {
  $filtered_html_format = (object) array(
    'format' => 'filtered_html',
    'name' => 'Filtered HTML',
    'weight' => 0,
    'filters' => array(
      // URL filter.
      'filter_url' => array(
        'weight' => 0,
        'status' => 1,
      ),
      // HTML filter.
      'filter_html' => array(
        'weight' => 1,
        'status' => 1,
      ),
      // Line break filter.
      'filter_autop' => array(
        'weight' => 2,
        'status' => 1,
      ),
      // HTML corrector filter.
      'filter_htmlcorrector' => array(
        'weight' => 10,
        'status' => 1,
      ),
    ),
  );
  filter_format_save($filtered_html_format);
  return $filtered_html_format;
}

/**
 * Creates the full html format.
 *
 * @return object
 *   The full html format object
 */
function findit_create_full_html_format() {
  $full_html_format = (object) array(
    'format' => 'full_html',
    'name' => 'Full HTML',
    'weight' => 1,
    'filters' => array(
      // URL filter.
      'filter_url' => array(
        'weight' => 0,
        'status' => 1,
      ),
      // Line break filter.
      'filter_autop' => array(
        'weight' => 1,
        'status' => 1,
      ),
      // HTML corrector filter.
      'filter_htmlcorrector' => array(
        'weight' => 10,
        'status' => 1,
      ),
    ),
  );
  filter_format_save($full_html_format);
  return $full_html_format;
}

/**
 * Create a default role for site administrators.
 *
 * All available permissions are assigned to that role.
 */
function findit_create_admin_role() {
  $admin_role = new stdClass();
  $admin_role->name = 'administrator';
  $admin_role->weight = 2;
  user_role_save($admin_role);
  user_role_grant_permissions($admin_role->rid, array_keys(module_invoke_all('permission')));
  // Set this as the administrator role.
  variable_set('user_admin_role', $admin_role->rid);
  // Assign user 1 the "administrator" role.
  db_insert('users_roles')
    ->fields(array('uid' => 1, 'rid' => $admin_role->rid))
    ->execute();
}

/**
 * Create a default role for organization managers.
 */
function findit_create_service_provider_role() {
  $role = new stdClass();
  $role->name = FINDIT_ROLE_SERVICE_PROVIDER;
  $role->weight = 3;
  user_role_save($role);
  user_role_grant_permissions($role->rid, array(
    'access administration pages',
    'access content',
    'access content overview',
    'access contextual links',
    'access toolbar',
    'administer taxonomy',
    'clone own nodes',
    'create organization content',
    'edit own organization content',
    'publish button publish own organization',
    'publish button unpublish own organization',
    'create program content',
    'edit own program content',
    'publish button publish own program',
    'publish button unpublish own program',
    'create event content',
    'edit own event content',
    'publish button publish own event',
    'publish button unpublish own event',
    'create contact content',
    'edit own contact content',
    'create location content',
    'edit own location content',
    'view own unpublished content',
    'view revisions',
    'view the administration theme',
  ));
}

/**
 * Create a default role for content managers.
 */
function findit_create_content_manager_role() {
  $role = new stdClass();
  $role->name = FINDIT_ROLE_CONTENT_MANAGER;
  $role->weight = 4;
  user_role_save($role);

  $permissions = array(
    'access content',
    'administer nodequeue',
    'publish button publish any content types',
    'publish button unpublish any content types'
  );

  $types = array_keys(node_type_get_types());
  foreach ( $types as $type ) {
    $permissions[] = "create $type content";
    $permissions[] = "edit own $type content";
    $permissions[] = "edit any $type content";
    $permissions[] = "delete own $type content";
    $permissions[] = "delete any $type content";
  }

  user_role_grant_permissions($role->rid, $permissions);
}

/**
 * Configures clone module.
 */
function findit_configure_clone() {
  foreach (array_keys(node_type_get_types()) as $type) {
    variable_set("clone_reset_$type", 1);
  }
  variable_set('clone_use_node_type_name', 1);
}

/**
 * Configures user settings.
 */
function findit_configure_people() {
  variable_set('user_pictures', '1');
  variable_set('user_picture_dimensions', '1024x1024');
  variable_set('user_picture_file_size', '800');
  variable_set('user_picture_style', 'thumbnail');
  variable_set('user_register', USER_REGISTER_ADMINISTRATORS_ONLY);
}

/**
 * Creates a custom menu with the given name, title and description.
 */
function findit_add_menu($menu_name, $title, $description = '') {
  $menu = array(
    'menu_name' => $menu_name,
    'title' => $title,
    'description' => $description,
    'i18n' => I18N_MODE_MULTIPLE,
  );
  menu_save($menu);
}

/**
 * Adds a menu link to the given menu.
 *
 * @param string $menu_name
 * @param string $title
 * @param string $path
 * @param int $weight
 */
function findit_add_menu_link($menu_name, $title, $path, $weight = 0) {
  $item = array(
    'menu_name' => $menu_name,
    'link_title' => $title,
    'link_path' => $path,
    'weight' => $weight,
  );
  menu_link_save($item);
}

/**
 * Creates content type Basic page.
 */
function findit_add_node_type_page() {
  $bundle = 'page';

  // Content type setup.

  $type = array(
    'type' => $bundle,
    'name' => st('Basic page'),
    'base' => 'node_content',
    'description' => st("Use <em>basic pages</em> for your static content, such as an 'About us' page."),
    'custom' => 1,
    'modified' => 1,
    'locked' => 0,
  );
  $type = node_type_set_defaults($type);
  node_type_save($type);
  rdf_mapping_save(array(
    'type' => 'node',
    'bundle' => $bundle,
    'mapping' => array(
      'rdftype' => array('foaf:Document'),
    ),
  ));
  variable_set("node_options_$bundle", array('status', 'revision'));
  variable_set("node_submitted_$bundle", FALSE);
  variable_set("language_content_type_$bundle", TRANSLATION_ENABLED);
  variable_set("clone_reset_$bundle", 1);

  // Add fields.

  node_add_body_field($type);
}

/**
 * Creates content type Organization.
 */
function findit_add_node_type_organization() {
  $bundle = 'organization';

  // Content type setup.

  $type = array(
    'type' => $bundle,
    'name' => st('Organization'),
    'base' => 'node_content',
    'description' => st(""),
    'custom' => 1,
    'modified' => 1,
    'locked' => 0,
    'title_label' => st('Organization name'),
  );
  $type = node_type_set_defaults($type);
  node_type_save($type);
  rdf_mapping_save(array(
    'type' => 'node',
    'bundle' => $bundle,
    'mapping' => array(
      'rdftype' => array('foaf:Document'),
    ),
  ));
  variable_set("node_options_$bundle", array('revision'));
  variable_set("node_submitted_$bundle", TRUE);
  variable_set("language_content_type_$bundle", TRANSLATION_ENABLED);
  variable_set("clone_reset_$bundle", 1);
  variable_set("publish_button_content_type_$bundle", 1);

  // Add fields.

  $body = node_add_body_field((object) array('type' => $bundle), st('Organization description'));
  findit_instance_set_label_help_description($body, st('Brief description of what your organization is all about (50 words). Avoid technical or complex terminology. The first 10 words or so will be displayed in search results.'));
  findit_instance_set_required($body);
  findit_instance_set_display_settings($body, 'teaser', array('trim_length' => 50));
  field_update_instance($body);

  findit_add_image_field('node', FINDIT_FIELD_LOGO, $bundle, st('Picture or logo'));

  findit_add_contacts_field($bundle, st('Contacts'));

  findit_add_locations_field($bundle, st('Organization locations'));

  $operation_hours = findit_add_office_hours_field('node', FINDIT_FIELD_OPERATION_HOURS, $bundle, st('Hours of operation'));
  findit_field_set_granularity(FINDIT_FIELD_OPERATION_HOURS, 5);
  findit_instance_set_description($operation_hours, st('Fill in with the hours of operation for the organization, if applicable.'));
  field_update_instance($operation_hours);

  $organization_url = findit_add_url_field('node', FINDIT_FIELD_ORGANIZATION_URL, $bundle, st('Organization\'s URL'));
  findit_instance_set_label_help_description($organization_url, st('Enter the URL of the organization\'s website, if any.'));
  field_update_instance($organization_url);

  $facebook_page = findit_add_url_field('node', FINDIT_FIELD_FACEBOOK_PAGE, $bundle, st('Organization\'s Facebook page'));
  findit_instance_set_label_help_description($facebook_page, st('Enter the URL of the organization\'s Facebook page, if any.'));
  field_update_instance($facebook_page);

  $twitter_handle = findit_add_url_field('node', FINDIT_FIELD_TWITTER_HANDLE, $bundle, st('Organization\'s Twitter handle'));
  findit_instance_set_label_help_description($twitter_handle, st('Enter the URL for your organization\'s Twitter page, if any.'));
  field_update_instance($twitter_handle);

  $organization_notes = findit_add_text_long_field('node', FINDIT_FIELD_ORGANIZATION_NOTES, $bundle, st('Organization notes'));
  findit_instance_set_label_help_description($organization_notes, st('Information about special hours and other elements that may not fit above.'));
  field_update_instance($organization_notes);

  // Group fields.

  $weight = 0;
  $group_basic_information = (object) array(
    'identifier' => "group_basic_information|node|$bundle|form",
    'group_name' => 'group_basic_information',
    'entity_type' => 'node',
    'bundle' => $bundle,
    'mode' => 'form',
    'label' => st('What'),
    'weight' => $weight++,
    'children' => array(
      'title',
      'body',
      FINDIT_FIELD_LOGO,
    ),
    'format_type' => 'tab',
    'format_settings' => array(
      'instance_settings' => array(
        'required_fields' => 1,
        'show_label' => 1,
      ),
      'formatter' => 'open',
    ),
  );
  field_group_group_save($group_basic_information);

  $group_where = (object) array(
    'identifier' => "group_where|node|$bundle|form",
    'group_name' => 'group_where',
    'entity_type' => 'node',
    'bundle' => $bundle,
    'mode' => 'form',
    'label' => st('Where'),
    'weight' => $weight++,
    'children' => array(
      FINDIT_FIELD_LOCATIONS,
    ),
    'format_type' => 'tab',
    'format_settings' => array(
      'instance_settings' => array(
        'required_fields' => 1,
        'show_label' => 1,
      ),
      'formatter' => 'open',
    ),
  );
  field_group_group_save($group_where);

  $group_when = (object) array(
    'identifier' => "group_when|node|$bundle|form",
    'group_name' => 'group_when',
    'entity_type' => 'node',
    'bundle' => $bundle,
    'mode' => 'form',
    'label' => st('When'),
    'weight' => $weight++,
    'children' => array(
      FINDIT_FIELD_OPERATION_HOURS,
    ),
    'format_type' => 'tab',
    'format_settings' => array(
      'instance_settings' => array(
        'required_fields' => 1,
        'show_label' => 1,
      ),
      'formatter' => 'open',
    ),
  );
  field_group_group_save($group_when);

  $group_additional_information = (object) array(
    'identifier' => "group_additional_information|node|$bundle|form",
    'group_name' => 'group_additional_information',
    'entity_type' => 'node',
    'bundle' => $bundle,
    'mode' => 'form',
    'label' => st('Additional information'),
    'weight' => $weight++,
    'children' => array(
      FINDIT_FIELD_ORGANIZATION_URL,
      FINDIT_FIELD_FACEBOOK_PAGE,
      FINDIT_FIELD_TWITTER_HANDLE,
      FINDIT_FIELD_ORGANIZATION_NOTES,
    ),
    'format_type' => 'tab',
    'format_settings' => array(
      'instance_settings' => array(
        'required_fields' => 0,
        'show_label' => 1,
      ),
      'formatter' => 'open',
    ),
  );
  field_group_group_save($group_additional_information);

  $group_contact_info = (object) array(
    'identifier' => "group_contact_info|node|$bundle|form",
    'group_name' => 'group_contact_info',
    'entity_type' => 'node',
    'bundle' => $bundle,
    'mode' => 'form',
    'label' => st('Contact Information'),
    'weight' => $weight++,
    'children' => array(
      FINDIT_FIELD_CONTACTS,
    ),
    'format_type' => 'tab',
    'format_settings' => array(
      'instance_settings' => array(
        'required_fields' => 1,
        'show_label' => 1,
      ),
      'formatter' => 'open',
    ),
  );
  field_group_group_save($group_contact_info);
}

/**
 * Creates content type Program.
 */
function findit_add_node_type_program() {
  $bundle = 'program';

  // Content type setup.

  $type = array(
    'type' => $bundle,
    'name' => st('Program'),
    'base' => 'node_content',
    'description' => st(""),
    'custom' => 1,
    'modified' => 1,
    'locked' => 0,
    'title_label' => st('Program name'),
  );
  $type = node_type_set_defaults($type);
  node_type_save($type);
  rdf_mapping_save(array(
    'type' => 'node',
    'bundle' => $bundle,
    'mapping' => array(
      'rdftype' => array('foaf:Document'),
    ),
  ));
  variable_set("node_options_$bundle", array('revision'));
  variable_set("node_submitted_$bundle", TRUE);
  variable_set("language_content_type_$bundle", TRANSLATION_ENABLED);
  variable_set("clone_reset_$bundle", 1);
  variable_set("publish_button_content_type_$bundle", 1);

  // Add fields.

  $body = node_add_body_field((object) array('type' => $bundle), st('Program description'));
  findit_instance_set_label_help_description($body, st('Brief description of what your program is all about (50 words). Avoid technical or complex terminology. The first 10 words or so will be displayed in search results.'));
  findit_instance_set_required($body);
  findit_instance_set_display_settings($body, 'teaser', array('trim_length' => 50));
  field_update_instance($body);

  $organizations = findit_add_entityreference_field('node', FINDIT_FIELD_ORGANIZATIONS, $bundle, array('organization'), st('Organizations'), FIELD_CARDINALITY_UNLIMITED);
  findit_instance_set_label_help_description($organizations, st('Type in the organization(s) responsible for this program. We will need that information to connect this form with the organization.'));
  findit_instance_set_required($organizations);
  findit_instance_set_widget_settings($organizations, array('references_dialog_add' => TRUE));
  findit_instance_set_display_label($organizations, 'default', 'hidden');
  findit_instance_set_display_settings($organizations, 'default', array('link' => TRUE));
  field_update_instance($organizations);

  findit_add_image_field('node', FINDIT_FIELD_LOGO, $bundle, st('Picture or logo'));

  $program_capacity = findit_add_range_integer_field('node', FINDIT_FIELD_CAPACITY, $bundle, st('Capacity'));
  findit_instance_set_label_help_description($program_capacity, st('What is the maximum number of participants your program can have at a given time?'));
  findit_instance_set_required($program_capacity);
  findit_instance_set_settings($program_capacity, array(
    'min' => '0',
    'max' => '',
    'field' => array(
      'prefix' => '',
      'suffix' => ' participants',
    ),
    'from' => array(
      'label' => 'From',
      'prefix' => '',
      'suffix' => '',
    ),
    'to' => array(
      'label' => 'to',
      'prefix' => '',
      'suffix' => '',
    ),
  ));
  field_update_instance($program_capacity);

  $program_categories = findit_add_term_reference_field('node', FINDIT_FIELD_PROGRAM_CATEGORIES, $bundle, 'program_categories', st('Program categories'), FIELD_CARDINALITY_UNLIMITED);
  findit_instance_set_required($program_categories);
  findit_instance_set_widget_type($program_categories, 'options_buttons');
  field_update_instance($program_categories);

  $program_period = findit_add_date_field('node', FINDIT_FIELD_PROGRAM_PERIOD, $bundle, st('Program start and end'), 1);
  findit_field_set_setting(FINDIT_FIELD_PROGRAM_PERIOD, 'todate', 'required');
  findit_field_set_granularity(FINDIT_FIELD_PROGRAM_PERIOD, array('year', 'month', 'day'));
  findit_instance_set_display_settings($program_period, 'default', array(
    'format_type' => 'long',
  ));
  field_update_instance($program_period);

  $program_time_day_of_week = findit_add_term_reference_field('node', FINDIT_FIELD_TIME_DAY_OF_WEEK, $bundle, 'time_day_of_week', st('Day of week'), FIELD_CARDINALITY_UNLIMITED);
  findit_instance_set_widget_type($program_time_day_of_week, 'options_buttons');
  field_update_instance($program_time_day_of_week);

  $program_time_of_day = findit_add_term_reference_field('node', FINDIT_FIELD_TIME_OF_DAY, $bundle, 'time_of_day', st('Time of day'), FIELD_CARDINALITY_UNLIMITED);
  findit_instance_set_widget_type($program_time_of_day, 'options_buttons');
  field_update_instance($program_time_of_day);

  $program_time_of_year = findit_add_term_reference_field('node', FINDIT_FIELD_TIME_OF_YEAR, $bundle, 'time_of_year', st('Time of year'), FIELD_CARDINALITY_UNLIMITED);
  findit_instance_set_widget_type($program_time_of_year, 'options_buttons');
  field_update_instance($program_time_of_year);

  $program_time_other = findit_add_term_reference_field('node', FINDIT_FIELD_TIME_OTHER, $bundle, 'time_other', st('Other times'), FIELD_CARDINALITY_UNLIMITED);
  findit_instance_set_widget_type($program_time_other, 'options_buttons');
  field_update_instance($program_time_other);

  findit_add_locations_field($bundle, st('Program locations'));

  $transportation = findit_add_list_text_field('node', FINDIT_FIELD_TRANSPORTATION, $bundle, st('Is transportation provided to participants of the program?'), FIELD_CARDINALITY_UNLIMITED);
  findit_field_set_allowed_values(FINDIT_FIELD_TRANSPORTATION, array(
    'no' => st('No transportation provided'),
    'to' => st('Transportation provided to the program - check Transportation notes'),
    'from' => st('Transportation provided from the program - check Transportation notes'),
  ));
  findit_instance_set_widget_type($transportation, 'options_buttons');
  field_update_instance($transportation);

  findit_add_text_long_field('node', FINDIT_FIELD_TRANSPORTATION_NOTES, $bundle, st('Transportation notes'));

  $age_eligibility = findit_add_list_integer_field('node', FINDIT_FIELD_AGE_ELIGIBILITY, $bundle, st('Ages'), FIELD_CARDINALITY_UNLIMITED);
  findit_field_set_allowed_values(FINDIT_FIELD_AGE_ELIGIBILITY, array(
    '-1' => st('Pre-natal'),
    '0' => st('Infant'),
    '1' => st('1'),
    '2' => st('2'),
    '3' => st('3'),
    '4' => st('4'),
    '5' => st('5'),
    '6' => st('6'),
    '7' => st('7'),
    '8' => st('8'),
    '9' => st('9'),
    '10' => st('10'),
    '11' => st('11'),
    '12' => st('12'),
    '13' => st('13'),
    '14' => st('14'),
    '15' => st('15'),
    '16' => st('16'),
    '17' => st('17'),
    '18' => st('18'),
    '19' => st('19'),
    '20' => st('20'),
    '21' => st('21+'),
  ));
  findit_instance_set_label_help_description($age_eligibility, st('Check all that apply'));
  findit_instance_set_required($age_eligibility);
  findit_instance_set_widget_type($age_eligibility, 'slide_with_style_slider');
  findit_instance_set_widget_settings($age_eligibility, array(
    'appearance' => array(
      'with_textfield' => 0,
      'with_bubble' => 'with_bubble',
    ),
  ));
  findit_instance_set_display_type($age_eligibility, 'teaser', 'list_default');
  findit_instance_set_display_label($age_eligibility, 'teaser', 'inline');
  field_update_instance($age_eligibility);

  $grade_eligibility = findit_add_term_reference_field('node', FINDIT_FIELD_GRADE_ELIGIBILITY, $bundle, 'grade_eligibility_options', st('Grade eligibility'), FIELD_CARDINALITY_UNLIMITED);
  findit_instance_set_widget_type($grade_eligibility, 'options_buttons');
  field_update_instance($grade_eligibility);

  $other_eligibility = findit_add_term_reference_field('node', FINDIT_FIELD_OTHER_ELIGIBILITY, $bundle, 'other_eligibility_options', st('Other eligibility'), FIELD_CARDINALITY_UNLIMITED);
  findit_instance_set_widget_type($other_eligibility, 'options_buttons');
  field_update_instance($other_eligibility);

  $eligibility_notes = findit_add_text_long_field('node', FINDIT_FIELD_ELIGIBILITY_NOTES, $bundle, st('Eligibility - additional information'));
  findit_instance_set_label_help_description($eligibility_notes, st('If needed, insert additional elegibility information below.'));
  field_update_instance($eligibility_notes);

  $accessibility = findit_add_term_reference_field('node', FINDIT_FIELD_ACCESSIBILITY, $bundle, 'accessibility_options', st('Accessibility'), FIELD_CARDINALITY_UNLIMITED);
  findit_instance_set_widget_type($accessibility, 'options_buttons');
  findit_instance_set_display_type($accessibility, 'default', 'taxonomy_term_reference_plain');
  findit_instance_set_display_label($accessibility, 'default', 'hidden');
  field_update_instance($accessibility);

  $accessibility_notes = findit_add_text_long_field('node', FINDIT_FIELD_ACCESSIBILITY_NOTES, $bundle, st('Accessibility - additional information'));
  findit_instance_set_label_help_description($accessibility_notes, st('If needed, insert additional accessibility information below.'));
  field_update_instance($accessibility_notes);

  $gratis = findit_add_list_boolean_field('node', FINDIT_FIELD_GRATIS, $bundle, st('Is this a free program?'));
  findit_field_set_allowed_values(FINDIT_FIELD_GRATIS, array(
    0 => st('No'),
    1 => st('Yes'),
  ));
  findit_instance_set_required($gratis);
  findit_instance_set_widget_type($gratis, 'options_buttons');
  findit_instance_set_default_value($gratis, array(0 => array('value' => '0')));
  field_update_instance($gratis);

  $cost = findit_add_number_float_field('node', FINDIT_FIELD_COST, $bundle, st('Program cost'));
  findit_instance_set_settings($cost, array(
    'min' => 0,
    'max' => '',
    'prefix' => '$',
    'suffix' => '',
  ));
  field_update_instance($cost);

  $cost_subsidies = findit_add_list_text_field('node', FINDIT_FIELD_COST_SUBSIDIES, $bundle, st('Cost subsidies available'), FIELD_CARDINALITY_UNLIMITED);
  findit_field_set_allowed_values(FINDIT_FIELD_COST_SUBSIDIES, array(
    'free' => st('Free'),
    'aid' => st('Financial Aid and/or Scholarship Available'),
    'vouchers' => st('Vouchers Available'),
    'scale' => st('Sliding scale based on income'),
  ));
  findit_instance_set_widget_type($cost_subsidies, 'options_buttons');
  field_update_instance($cost_subsidies);

  $financial_aid_notes = findit_add_text_long_field('node', FINDIT_FIELD_FINANCIAL_AID_NOTES, $bundle, st('Financial support - additional information'));
  findit_instance_set_label_help_description($financial_aid_notes, st('If needed, insert additional financial support notes below.'));
  field_update_instance($financial_aid_notes);

  $financial_aid_file = findit_add_file_field('node', FINDIT_FIELD_FINANCIAL_AID_FILE, $bundle, st('Financial support - additional information - file'));
  findit_instance_set_label_help_description($financial_aid_file, st('Are the financial support instructions in a file that people should be able to download? If so, add the name of the file below.'));
  field_update_instance($financial_aid_file);

  $financial_aid_url = findit_add_url_field('node', FINDIT_FIELD_FINANCIAL_AID_URL, $bundle, st('Financial support - additional information - URL'));
  findit_instance_set_label_help_description($financial_aid_url, st('URL of the financial support page'));
  field_update_instance($financial_aid_url);

  $registration = findit_add_list_text_field('node', FINDIT_FIELD_REGISTRATION, $bundle, st('Registration required?'));
  findit_field_set_allowed_values(FINDIT_FIELD_REGISTRATION, array(
    'not' => st('Not required'),
    'ongoing' => st('Ongoing'),
    'dates' => st('Specific dates'),
  ));
  findit_instance_set_required($registration);
  findit_instance_set_widget_type($registration, 'options_buttons');
  findit_instance_set_default_value($registration, array(0 => array('value' => 'not')));
  field_update_instance($registration);

  $registration_dates = findit_add_date_field('node', FINDIT_FIELD_REGISTRATION_DATES, $bundle, st('If needed, type the registration/application dates'), FIELD_CARDINALITY_UNLIMITED);
  findit_field_set_setting(FINDIT_FIELD_REGISTRATION_DATES, 'todate', 'optional');
  findit_instance_set_display_settings($registration_dates, 'default', array(
    'format_type' => 'long',
  ));
  findit_instance_set_label_help_description($registration_dates, st('Please add the registration/application dates and times below. Ex. Jan 10-20: Early bird registration (9am-5pm); Jan 21-31: Regular registration (9am-5pm), etc. NOTE: If you would like the registration dates to actually show up on the Find It calendar, create a separate event for that.'));
  field_update_instance($registration_dates);

  $registration_instructions = findit_add_text_long_field('node', FINDIT_FIELD_REGISTRATION_INSTRUCTIONS, $bundle, st('Registration/Application instructions'));
  findit_instance_set_label_help_description($registration_instructions, st('Every program is different. Please provide a detailed step-by-step explanation of how to register/apply to your program.'));
  field_update_instance($registration_instructions);

  $registration_file = findit_add_file_field('node', FINDIT_FIELD_REGISTRATION_FILE, $bundle, st('Registration/Application instructions - file'));
  findit_instance_set_label_help_description($registration_file, st('Are the registration/application instructions in a file that people should be able to download? If so, add the name of the file here'));
  field_update_instance($registration_file);

  $registration_url = findit_add_url_field('node', FINDIT_FIELD_REGISTRATION_URL, $bundle, st('Registration/Application - URL'));
  findit_instance_set_label_help_description($registration_url, st('URL of the registration/application page'));
  field_update_instance($registration_url);

  $program_url = findit_add_url_field('node', FINDIT_FIELD_PROGRAM_URL, $bundle, st('Program URL'));
  findit_instance_set_label_help_description($program_url, st('Enter the URL of the program\'s website, if any.'));
  findit_instance_set_display_label($program_url, 'default', 'inline');
  field_update_instance($program_url);

  $facebook_page = findit_add_url_field('node', FINDIT_FIELD_FACEBOOK_PAGE, $bundle, st('Program Facebook page'));
  findit_instance_set_label_help_description($facebook_page, st("Enter the URL of the program's Facebook page, if any."));
  findit_instance_set_display_label($facebook_page, 'default', 'inline');
  field_update_instance($facebook_page);

  $twitter_handle = findit_add_text_field('node', FINDIT_FIELD_TWITTER_HANDLE, $bundle, st('Program Twitter handle'));
  findit_instance_set_label_help_description($twitter_handle, st("Enter the program's Twitter handle/username, if any."));
  findit_instance_set_display_label($twitter_handle, 'default', 'inline');
  field_update_instance($twitter_handle);

  // Creates FINDIT_FIELD_CONTACTS field.
  findit_add_contacts_field($bundle, st('Contacts'));

  // Group fields.

  $weight = 0;
  $group_basic_information = (object) array(
    'identifier' => "group_basic_information|node|$bundle|form",
    'group_name' => 'group_basic_information',
    'entity_type' => 'node',
    'bundle' => $bundle,
    'mode' => 'form',
    'label' => st('What'),
    'weight' => $weight++,
    'children' => array(
      'title',
      'body',
      FINDIT_FIELD_ORGANIZATIONS,
      FINDIT_FIELD_LOGO,
      FINDIT_FIELD_PROGRAM_CATEGORIES,
    ),
    'format_type' => 'tab',
    'format_settings' => array(
      'instance_settings' => array(
        'required_fields' => 1,
        'show_label' => 1,
      ),
      'formatter' => 'open',
    ),
  );
  field_group_group_save($group_basic_information);

  $group_when = (object) array(
    'identifier' => "group_when|node|$bundle|form",
    'group_name' => 'group_when',
    'entity_type' => 'node',
    'bundle' => $bundle,
    'mode' => 'form',
    'label' => st('When'),
    'weight' => $weight++,
    'children' => array(
      FINDIT_FIELD_TIME_DAY_OF_WEEK,
      FINDIT_FIELD_TIME_OF_DAY,
      FINDIT_FIELD_TIME_OF_YEAR,
      FINDIT_FIELD_TIME_OTHER,
      FINDIT_FIELD_PROGRAM_PERIOD,
    ),
    'format_type' => 'tab',
    'format_settings' => array(
      'instance_settings' => array(
        'required_fields' => 0,
        'show_label' => 1,
      ),
      'formatter' => 'open',
    ),
  );
  field_group_group_save($group_when);

  $group_registration = (object) array(
    'identifier' => "group_registration|node|$bundle|form",
    'group_name' => 'group_registration',
    'entity_type' => 'node',
    'bundle' => $bundle,
    'mode' => 'form',
    'label' => st('Registration/Application'),
    'weight' => $weight++,
    'children' => array(
      FINDIT_FIELD_REGISTRATION,
      FINDIT_FIELD_REGISTRATION_DATES,
      FINDIT_FIELD_REGISTRATION_INSTRUCTIONS,
      FINDIT_FIELD_REGISTRATION_FILE,
      FINDIT_FIELD_REGISTRATION_URL,
    ),
    'format_type' => 'tab',
    'format_settings' => array(
      'instance_settings' => array(
        'required_fields' => 0,
        'show_label' => 1,
      ),
      'formatter' => 'open',
    ),
  );
  field_group_group_save($group_registration);

  $group_where = (object) array(
    'identifier' => "group_where|node|$bundle|form",
    'group_name' => 'group_where',
    'entity_type' => 'node',
    'bundle' => $bundle,
    'mode' => 'form',
    'label' => st('Where'),
    'weight' => $weight++,
    'children' => array(
      FINDIT_FIELD_LOCATIONS,
      FINDIT_FIELD_TRANSPORTATION,
      FINDIT_FIELD_TRANSPORTATION_NOTES,
    ),
    'format_type' => 'tab',
    'format_settings' => array(
      'instance_settings' => array(
        'required_fields' => 0,
        'show_label' => 1,
      ),
      'formatter' => 'open',
    ),
  );
  field_group_group_save($group_where);

  $group_audience = (object) array(
    'identifier' => "group_audience|node|$bundle|form",
    'group_name' => 'group_audience',
    'entity_type' => 'node',
    'bundle' => $bundle,
    'mode' => 'form',
    'label' => st('Who (for whom)'),
    'weight' => $weight++,
    'children' => array(
      FINDIT_FIELD_CAPACITY,
      FINDIT_FIELD_AGE_ELIGIBILITY,
      FINDIT_FIELD_GRADE_ELIGIBILITY,
      FINDIT_FIELD_OTHER_ELIGIBILITY,
      FINDIT_FIELD_ELIGIBILITY_NOTES,
      FINDIT_FIELD_ACCESSIBILITY,
      FINDIT_FIELD_ACCESSIBILITY_NOTES,
    ),
    'format_type' => 'tab',
    'format_settings' => array(
      'instance_settings' => array(
        'required_fields' => 0,
        'show_label' => 1,
      ),
      'formatter' => 'open',
    ),
  );
  field_group_group_save($group_audience);

  $group_cost = (object) array(
    'identifier' => "group_cost|node|$bundle|form",
    'group_name' => 'group_cost',
    'entity_type' => 'node',
    'bundle' => $bundle,
    'mode' => 'form',
    'label' => st('Cost'),
    'weight' => $weight++,
    'children' => array(
      FINDIT_FIELD_GRATIS,
      FINDIT_FIELD_COST,
      FINDIT_FIELD_COST_SUBSIDIES,
      FINDIT_FIELD_FINANCIAL_AID_NOTES,
      FINDIT_FIELD_FINANCIAL_AID_FILE,
      FINDIT_FIELD_FINANCIAL_AID_URL,
    ),
    'format_type' => 'tab',
    'format_settings' => array(
      'instance_settings' => array(
        'required_fields' => 0,
        'show_label' => 1,
      ),
      'formatter' => 'open',
    ),
  );
  field_group_group_save($group_cost);

  $group_additional_information = (object) array(
    'identifier' => "group_additional_information|node|$bundle|form",
    'group_name' => 'group_additional_information',
    'entity_type' => 'node',
    'bundle' => $bundle,
    'mode' => 'form',
    'label' => st('Additional information'),
    'weight' => $weight++,
    'children' => array(
      FINDIT_FIELD_PROGRAM_URL,
      FINDIT_FIELD_FACEBOOK_PAGE,
      FINDIT_FIELD_TWITTER_HANDLE,
    ),
    'format_type' => 'tab',
    'format_settings' => array(
      'instance_settings' => array(
        'required_fields' => 0,
        'show_label' => 1,
      ),
      'formatter' => 'open',
    ),
  );
  field_group_group_save($group_additional_information);

  $group_contact_info = (object) array(
    'identifier' => "group_contact_info|node|$bundle|form",
    'group_name' => 'group_contact_info',
    'entity_type' => 'node',
    'bundle' => $bundle,
    'mode' => 'form',
    'label' => st('Contact Information'),
    'weight' => $weight++,
    'children' => array(
      FINDIT_FIELD_CONTACTS,
    ),
    'format_type' => 'tab',
    'format_settings' => array(
      'instance_settings' => array(
        'required_fields' => 1,
        'show_label' => 1,
      ),
      'formatter' => 'open',
    ),
  );
  field_group_group_save($group_contact_info);
}

/**
 * Creates content type Event.
 */
function findit_add_node_type_event() {
  $bundle = 'event';

  // Content type setup.

  $type = array(
    'type' => $bundle,
    'name' => st('Event'),
    'base' => 'node_content',
    'description' => st(""),
    'custom' => 1,
    'modified' => 1,
    'locked' => 0,
    'title_label' => st('Event name'),
  );
  $type = node_type_set_defaults($type);
  node_type_save($type);
  rdf_mapping_save(array(
    'type' => 'node',
    'bundle' => $bundle,
    'mapping' => array(
      'rdftype' => array('foaf:Document'),
    ),
  ));
  variable_set("node_options_$bundle", array('revision'));
  variable_set("node_submitted_$bundle", TRUE);
  variable_set("language_content_type_$bundle", TRANSLATION_ENABLED);
  variable_set("clone_reset_$bundle", 1);
  variable_set("publish_button_content_type_$bundle", 1);

  // Add fields.

  $body = node_add_body_field((object) array('type' => $bundle), st('Event description'));
  findit_instance_set_label_help_description($body, st('Brief description of what your event is all about (50 words). Avoid technical or complex terminology. The first 10 words or so will be displayed in search results.'));
  findit_instance_set_display_settings($body, 'teaser', array('trim_length' => 50));
  field_update_instance($body);

  $organizations = findit_add_entityreference_field('node', FINDIT_FIELD_ORGANIZATIONS, $bundle, array('organization'), st('Organizer(s)'), FIELD_CARDINALITY_UNLIMITED);
  findit_instance_set_label_help_description($organizations, st("Type in the organization(s) responsible for this event. We need this information to connect this form with the organization's form."));
  findit_instance_set_required($organizations);
  findit_instance_set_widget_settings($organizations, array('references_dialog_add' => TRUE));
  findit_instance_set_display_label($organizations, 'default', 'hidden');
  findit_instance_set_display_settings($organizations, 'default', array('link' => TRUE));
  field_update_instance($organizations);

  $programs = findit_add_entityreference_field('node', FINDIT_FIELD_PROGRAMS, $bundle, array('program'), st('Associated program(s)'), FIELD_CARDINALITY_UNLIMITED);
  findit_instance_set_label_help_description($programs, st("Is this event part of an existing program or activity? For instance, does it mark the beginning or end of the registration period, the celebration of a class, or an important milestone within a larger activity? If so, list the name(s) of the associated program(s) below."));
  field_update_instance($programs);

  findit_add_image_field('node', FINDIT_FIELD_LOGO, $bundle, st('Picture or logo'));

  $program_categories = findit_add_term_reference_field('node', FINDIT_FIELD_PROGRAM_CATEGORIES, $bundle, 'program_categories', st('Event categories'), FIELD_CARDINALITY_UNLIMITED);
  findit_instance_set_required($program_categories);
  findit_instance_set_widget_type($program_categories, 'options_buttons');
  field_update_instance($program_categories);

  $event_date = findit_add_date_field('node', FINDIT_FIELD_EVENT_DATE, $bundle, st('Event date(s)'), FIELD_CARDINALITY_UNLIMITED);
  findit_field_set_setting(FINDIT_FIELD_EVENT_DATE, 'todate', 'optional');
  findit_field_set_setting(FINDIT_FIELD_EVENT_DATE, 'repeat', 1);
  findit_instance_set_display_settings($event_date, 'default', array(
    'format_type' => 'long',
    'show_remaining_days' => FALSE,
    'show_repeat_rule'    => 'show',
  ));
  findit_instance_set_display_type($event_date, 'teaser', 'date_default');
  findit_instance_set_display_label($event_date, 'teaser', 'hidden');
  findit_instance_set_display_settings($event_date, 'teaser', array(
    'format_type' => 'long',
  ));
  field_update_instance($event_date);

  $event_time_of_year = findit_add_term_reference_field('node', FINDIT_FIELD_TIME_OF_YEAR, $bundle, 'time_of_year', st('Time of year'), FIELD_CARDINALITY_UNLIMITED);
  findit_instance_set_widget_type($event_time_of_year, 'options_buttons');
  field_update_instance($event_time_of_year);

  $event_time_other = findit_add_term_reference_field('node', FINDIT_FIELD_TIME_OTHER, $bundle, 'time_other', st('Other times'), FIELD_CARDINALITY_UNLIMITED);
  findit_instance_set_widget_type($event_time_other, 'options_buttons');
  field_update_instance($event_time_other);

  $event_categories = findit_add_term_reference_field('node', FINDIT_FIELD_PROGRAM_CATEGORIES, $bundle, 'program_categories', st("What kind of event is this?"), FIELD_CARDINALITY_UNLIMITED);
  findit_instance_set_label_help_description($event_categories, st("Check all that apply"));
  findit_instance_set_widget_type($event_categories, 'options_buttons');
  field_update_instance($event_categories);

  findit_add_locations_field($bundle, st('Location(s)'));

  $age_eligibility = findit_add_list_text_field('node', FINDIT_FIELD_AGE_ELIGIBILITY, $bundle, st('Ages'), FIELD_CARDINALITY_UNLIMITED);
  findit_instance_set_label_help_description($age_eligibility, st('Check all that apply'));
  findit_instance_set_required($age_eligibility);
  findit_instance_set_widget_type($age_eligibility, 'slide_with_style_slider');
  findit_instance_set_display_type($age_eligibility, 'teaser', 'list_default');
  findit_instance_set_display_label($age_eligibility, 'teaser', 'inline');
  field_update_instance($age_eligibility);

  $grade_eligibility = findit_add_term_reference_field('node', FINDIT_FIELD_GRADE_ELIGIBILITY, $bundle, 'grade_eligibility_options', st('Grade eligibility'), FIELD_CARDINALITY_UNLIMITED);
  findit_instance_set_label_help_description($grade_eligibility, st('Check all that apply if, in addition to age, your events requires participants to be at specific grades'));
  findit_instance_set_widget_type($grade_eligibility, 'options_buttons');
  field_update_instance($grade_eligibility);

  $other_eligibility = findit_add_term_reference_field('node', FINDIT_FIELD_OTHER_ELIGIBILITY, $bundle, 'other_eligibility_options', st('Other eligibility'), FIELD_CARDINALITY_UNLIMITED);
  findit_instance_set_widget_type($other_eligibility, 'options_buttons');
  field_update_instance($other_eligibility);

  $accessibility = findit_add_term_reference_field('node', FINDIT_FIELD_ACCESSIBILITY, $bundle, 'accessibility_options', st('Accessibility'), FIELD_CARDINALITY_UNLIMITED);
  findit_instance_set_widget_type($accessibility, 'options_buttons');
  findit_instance_set_display_type($accessibility, 'default', 'taxonomy_term_reference_plain');
  findit_instance_set_display_label($accessibility, 'default', 'hidden');
  field_update_instance($accessibility);

  $accessibility_notes = findit_add_text_long_field('node', FINDIT_FIELD_ACCESSIBILITY_NOTES, $bundle, st('Accessibility - additional information'));
  findit_instance_set_label_help_description($accessibility_notes, st('If needed, insert additional accessibility information below'));
  field_update_instance($accessibility_notes);

  $event_gratis = findit_add_list_text_field('node', FINDIT_FIELD_GRATIS, $bundle, st('Is this a free event?'));
  findit_instance_set_required($event_gratis);
  findit_instance_set_widget_type($event_gratis, 'options_buttons');
  findit_instance_set_default_value($event_gratis, array(0 => array('value' => '0')));
  field_update_instance($event_gratis);

  $cost = findit_add_number_float_field('node', FINDIT_FIELD_COST, $bundle, st('Event cost'));
  findit_instance_set_settings($cost, array(
    'min' => 0,
    'max' => '',
    'prefix' => '$',
    'suffix' => '',
  ));
  field_update_instance($cost);

  $cost_subsidies = findit_add_list_text_field('node', FINDIT_FIELD_COST_SUBSIDIES, $bundle, st('Cost subsidies available'), FIELD_CARDINALITY_UNLIMITED);
  findit_instance_set_widget_type($cost_subsidies, 'options_buttons');
  field_update_instance($cost_subsidies);

  $financial_aid_notes = findit_add_text_long_field('node', FINDIT_FIELD_FINANCIAL_AID_NOTES, $bundle, st('Financial support - additional information'));
  findit_instance_set_label_help_description($financial_aid_notes, st('If needed, insert additional financial support notes below'));
  field_update_instance($financial_aid_notes);

  $financial_aid_file = findit_add_file_field('node', FINDIT_FIELD_FINANCIAL_AID_FILE, $bundle, st('Financial support - additional information - file'));
  findit_instance_set_label_help_description($financial_aid_file, st('Are the financial support instructions in a file that people should be able to download? If so, add the name of the file here'));
  field_update_instance($financial_aid_file);

  $financial_aid_url = findit_add_url_field('node', FINDIT_FIELD_FINANCIAL_AID_URL, $bundle, st('Financial support - additional information - URL'));
  findit_instance_set_label_help_description($financial_aid_url, st('URL of the financial support page'));
  field_update_instance($financial_aid_url);

  $registration = findit_add_list_text_field('node', FINDIT_FIELD_REGISTRATION, $bundle, st('Registration required?'));
  findit_instance_set_required($registration);
  findit_instance_set_widget_type($registration, 'options_buttons');
  findit_instance_set_default_value($registration, array(0 => array('value' => 'not')));
  field_update_instance($registration);

  $registration_dates = findit_add_date_field('node', FINDIT_FIELD_REGISTRATION_DATES, $bundle, st('Registration/Application dates'), FIELD_CARDINALITY_UNLIMITED);
  findit_instance_set_label_help_description($registration_dates, st('Please add the registration/application dates and times below. Ex. Jan 10-20: Early bird registration (9am-5pm); Jan 21-31: Regular registration (9am-5pm), etc. NOTE: If you would like the registration dates to actually show up on the Find It calendar, create a separate event for that.'));
  field_update_instance($registration_dates);

  $registration_instructions = findit_add_text_long_field('node', FINDIT_FIELD_REGISTRATION_INSTRUCTIONS, $bundle, st('Registration/Application instructions'));
  findit_instance_set_label_help_description($registration_instructions, st('Text describing how to register/application for the event'));
  field_update_instance($registration_instructions);

  $registration_file = findit_add_file_field('node', FINDIT_FIELD_REGISTRATION_FILE, $bundle, st('Registration/Application instructions - file'));
  findit_instance_set_label_help_description($registration_file, st('Name of the file with registration/application instructions'));
  field_update_instance($registration_file);

  $registration_url = findit_add_url_field('node', FINDIT_FIELD_REGISTRATION_URL, $bundle, st('Registration/Application - URL'));
  findit_instance_set_label_help_description($registration_url, st('URL of the registration/application page'));
  field_update_instance($registration_url);

  // Creates FINDIT_FIELD_CONTACTS field.
  findit_add_contacts_field($bundle, st('Contacts'));

  $event_url = findit_add_url_field('node', FINDIT_FIELD_EVENT_URL, $bundle, st('Event URL'));
  findit_instance_set_label_help_description($event_url, st('Enter the URL of the event\'s website, if any.'));
  findit_instance_set_display_label($event_url, 'default', 'inline');
  field_update_instance($event_url);

  $facebook_page = findit_add_url_field('node', FINDIT_FIELD_FACEBOOK_PAGE, $bundle, st('Event Facebook page'));
  findit_instance_set_label_help_description($facebook_page, st("Enter the URL of the event's Facebook page, if any."));
  findit_instance_set_display_label($facebook_page, 'default', 'inline');
  field_update_instance($facebook_page);

  $twitter_handle = findit_add_text_field('node', FINDIT_FIELD_TWITTER_HANDLE, $bundle, st('Event Twitter handle'));
  findit_instance_set_label_help_description($twitter_handle, st("Enter the event's Twitter handle/username, if any."));
  findit_instance_set_display_label($twitter_handle, 'default', 'inline');
  field_update_instance($twitter_handle);

  $amenities = findit_add_term_reference_field('node', FINDIT_FIELD_AMENITIES, $bundle, 'amenities', st('Amenities'), FIELD_CARDINALITY_UNLIMITED);
  findit_instance_set_label_help_description($amenities, st("Check all that apply"));
  findit_instance_set_widget_type($amenities, 'options_buttons');
  field_update_instance($amenities);

  // Group fields.

  $weight = 0;
  $group_basic_information = (object) array(
    'identifier' => "group_basic_information|node|$bundle|form",
    'group_name' => 'group_basic_information',
    'entity_type' => 'node',
    'bundle' => $bundle,
    'mode' => 'form',
    'label' => st('What'),
    'weight' => $weight++,
    'children' => array(
      'title',
      'body',
      FINDIT_FIELD_ORGANIZATIONS,
      FINDIT_FIELD_PROGRAMS,
      FINDIT_FIELD_LOGO,
      FINDIT_FIELD_PROGRAM_CATEGORIES,
    ),
    'format_type' => 'tab',
    'format_settings' => array(
      'instance_settings' => array(
        'required_fields' => 1,
        'show_label' => 1,
      ),
      'formatter' => 'open',
    ),
  );
  field_group_group_save($group_basic_information);

  $group_when = (object) array(
    'identifier' => "group_when|node|$bundle|form",
    'group_name' => 'group_when',
    'entity_type' => 'node',
    'bundle' => $bundle,
    'mode' => 'form',
    'label' => st('When'),
    'weight' => $weight++,
    'children' => array(
      FINDIT_FIELD_EVENT_DATE,
      FINDIT_FIELD_TIME_OF_YEAR,
      FINDIT_FIELD_TIME_OTHER,
    ),
    'format_type' => 'tab',
    'format_settings' => array(
      'instance_settings' => array(
        'required_fields' => 0,
        'show_label' => 1,
      ),
      'formatter' => 'open',
    ),
  );
  field_group_group_save($group_when);

  $group_registration = (object) array(
    'identifier' => "group_registration|node|$bundle|form",
    'group_name' => 'group_registration',
    'entity_type' => 'node',
    'bundle' => $bundle,
    'mode' => 'form',
    'label' => st('Registration/Application'),
    'weight' => $weight++,
    'children' => array(
      FINDIT_FIELD_REGISTRATION,
      FINDIT_FIELD_REGISTRATION_DATES,
      FINDIT_FIELD_REGISTRATION_INSTRUCTIONS,
      FINDIT_FIELD_REGISTRATION_FILE,
      FINDIT_FIELD_REGISTRATION_URL,
    ),
    'format_type' => 'tab',
    'format_settings' => array(
      'instance_settings' => array(
        'required_fields' => 0,
        'show_label' => 1,
      ),
      'formatter' => 'open',
    ),
  );
  field_group_group_save($group_registration);

  $group_where = (object) array(
    'identifier' => "group_where|node|$bundle|form",
    'group_name' => 'group_where',
    'entity_type' => 'node',
    'bundle' => $bundle,
    'mode' => 'form',
    'label' => st('Where'),
    'weight' => $weight++,
    'children' => array(
      FINDIT_FIELD_LOCATIONS,
    ),
    'format_type' => 'tab',
    'format_settings' => array(
      'instance_settings' => array(
        'required_fields' => 0,
        'show_label' => 1,
      ),
      'formatter' => 'open',
    ),
  );
  field_group_group_save($group_where);

  $group_audience = (object) array(
    'identifier' => "group_audience|node|$bundle|form",
    'group_name' => 'group_audience',
    'entity_type' => 'node',
    'bundle' => $bundle,
    'mode' => 'form',
    'label' => st('Who (for whom)'),
    'weight' => $weight++,
    'children' => array(
      FINDIT_FIELD_AGE_ELIGIBILITY,
      FINDIT_FIELD_GRADE_ELIGIBILITY,
      FINDIT_FIELD_OTHER_ELIGIBILITY,
      FINDIT_FIELD_ACCESSIBILITY,
      FINDIT_FIELD_ACCESSIBILITY_NOTES,
    ),
    'format_type' => 'tab',
    'format_settings' => array(
      'instance_settings' => array(
        'required_fields' => 0,
        'show_label' => 1,
      ),
      'formatter' => 'open',
    ),
  );
  field_group_group_save($group_audience);

  $group_cost = (object) array(
    'identifier' => "group_cost|node|$bundle|form",
    'group_name' => 'group_cost',
    'entity_type' => 'node',
    'bundle' => $bundle,
    'mode' => 'form',
    'label' => st('Cost'),
    'weight' => $weight++,
    'children' => array(
      FINDIT_FIELD_GRATIS,
      FINDIT_FIELD_COST,
      FINDIT_FIELD_COST_SUBSIDIES,
      FINDIT_FIELD_FINANCIAL_AID_NOTES,
      FINDIT_FIELD_FINANCIAL_AID_FILE,
      FINDIT_FIELD_FINANCIAL_AID_URL,
    ),
    'format_type' => 'tab',
    'format_settings' => array(
      'instance_settings' => array(
        'required_fields' => 0,
        'show_label' => 1,
      ),
      'formatter' => 'open',
    ),
  );
  field_group_group_save($group_cost);

  $group_additional_information = (object) array(
    'identifier' => "group_additional_information|node|$bundle|form",
    'group_name' => 'group_additional_information',
    'entity_type' => 'node',
    'bundle' => $bundle,
    'mode' => 'form',
    'label' => st('Additional information'),
    'weight' => $weight++,
    'children' => array(
      FINDIT_FIELD_EVENT_URL,
      FINDIT_FIELD_FACEBOOK_PAGE,
      FINDIT_FIELD_TWITTER_HANDLE,
      FINDIT_FIELD_AMENITIES,
    ),
    'format_type' => 'tab',
    'format_settings' => array(
      'instance_settings' => array(
        'required_fields' => 0,
        'show_label' => 1,
      ),
      'formatter' => 'open',
    ),
  );
  field_group_group_save($group_additional_information);

  $group_contact_info = (object) array(
    'identifier' => "group_contact_info|node|$bundle|form",
    'group_name' => 'group_contact_info',
    'entity_type' => 'node',
    'bundle' => $bundle,
    'mode' => 'form',
    'label' => st('Contact Information'),
    'weight' => $weight++,
    'children' => array(
      FINDIT_FIELD_CONTACTS,
    ),
    'format_type' => 'tab',
    'format_settings' => array(
      'instance_settings' => array(
        'required_fields' => 1,
        'show_label' => 1,
      ),
      'formatter' => 'open',
    ),
  );
  field_group_group_save($group_contact_info);
}

/**
 * Creates content type announcement.
 */
function findit_add_node_type_announcement() {
  $bundle = 'announcement';

  // Content type setup.

  $type = array(
    'type' => $bundle,
    'name' => st('Announcement'),
    'base' => 'node_content',
    'description' => st(""),
    'custom' => 1,
    'modified' => 1,
    'locked' => 0,
  );
  $type = node_type_set_defaults($type);
  node_type_save($type);
  rdf_mapping_save(array(
    'type' => 'node',
    'bundle' => $bundle,
    'mapping' => array(
      'rdftype' => array('foaf:Document'),
    ),
  ));
  variable_set("node_options_$bundle", array('status', 'revision'));
  variable_set("node_submitted_$bundle", FALSE);
  variable_set("language_content_type_$bundle", TRANSLATION_ENABLED);
  variable_set("clone_reset_$bundle", 1);

  // Add fields.

  $body = node_add_body_field((object) array('type' => $bundle), st('Body'));
  findit_instance_set_required($body);
  field_update_instance($body);

  $publishing_date = findit_add_date_field('node', FINDIT_FIELD_PUBLISHING_DATE, $bundle, st('Publishing Date'));
  findit_field_set_granularity(FINDIT_FIELD_PUBLISHING_DATE, array(
    'year' => 'year',
    'month' => 'month',
    'day' => 'day',
    'hour' => 0,
    'minute' => 0,
    'second' => 0,
  ));
  findit_instance_set_label_help_description($publishing_date, st("The date the announcement is supposed to go online."));
  findit_instance_set_required($publishing_date);
  findit_instance_set_display_type($publishing_date, 'teaser', 'date_default');
  findit_instance_set_display_label($publishing_date, 'teaser', 'inline');
  findit_instance_set_display_weight($publishing_date, 'teaser', 1);
  findit_instance_set_display_settings($publishing_date, 'teaser', array(
    'format_type' => 'long',
    'fromto'      => 'both',
  ));
  field_update_instance($publishing_date);

  $expiration_date = findit_add_date_field('node', FINDIT_FIELD_EXPIRATION_DATE, $bundle, st('Expiration Date'));
  findit_field_set_granularity(FINDIT_FIELD_EXPIRATION_DATE, array(
    'year' => 'year',
    'month' => 'month',
    'day' => 'day',
    'hour' => 0,
    'minute' => 0,
    'second' => 0,
  ));
  findit_instance_set_label_help_description($expiration_date, st("The date the announcement is supposed to go offline."));
  findit_instance_set_required($expiration_date);
  findit_instance_set_settings($expiration_date, array(
    'default_value' => 'strtotime',
    'default_value_code' => '+2 weeks',
    'default_value2' => 'same',
    'default_value_code2' => '',
    'user_register_form' => FALSE,
  ));
  findit_instance_set_display_type($expiration_date, 'teaser', 'date_default');
  findit_instance_set_display_label($expiration_date, 'teaser', 'inline');
  findit_instance_set_display_weight($expiration_date, 'teaser', 2);
  findit_instance_set_display_settings($expiration_date, 'teaser', array(
    'format_type'     => 'long',
    'fromto'          => 'both',
  ));
  field_update_instance($expiration_date);
}

/**
 * Creates content type Location.
 */
function findit_add_node_type_location() {
  $bundle = 'location';

  // Content type setup.

  $type = array(
    'type' => $bundle,
    'name' => st('Location'),
    'base' => 'node_content',
    'description' => st(""),
    'custom' => 1,
    'modified' => 1,
    'locked' => 0,
  );
  $type = node_type_set_defaults($type);
  node_type_save($type);
  rdf_mapping_save(array(
    'type' => 'node',
    'bundle' => $bundle,
    'mapping' => array(
      'rdftype' => array('foaf:Document'),
    ),
  ));
  variable_set("node_options_$bundle", array('status', 'revision'));
  variable_set("node_submitted_$bundle", FALSE);
  variable_set('clone_omitted', variable_get('clone_omitted', array()) + array($bundle => $bundle));

  // Auto generate node title.
  variable_set('auto_entitylabel_node_location', '1');
  variable_set('auto_entitylabel_pattern_node_location', '[node:field_location_name] - [node:field_address:thoroughfare], [node:field_address:locality], [node:field_address:administrative-area], [node:field_address:postal-code]');
  variable_set('auto_entitylabel_php_node_location', '2');

  // Add fields.

  $location_name = findit_add_text_field('node', FINDIT_FIELD_LOCATION_NAME, $bundle, st('Location name'));
  findit_instance_set_required($location_name);
  findit_instance_set_display_label($location_name, 'default', 'hidden');
  field_update_instance($location_name);

  $location_description = findit_add_text_field('node', FINDIT_FIELD_LOCATION_DESCRIPTION, $bundle, st('Location description'));
  findit_instance_set_label_help_description($location_description, st('Use this for additional descriptors such as "Main office".'));
  field_update_instance($location_description);

  $address = findit_add_addressfield_field('node', FINDIT_FIELD_ADDRESS, $bundle, st('Address'));
  findit_instance_set_required($address);
  findit_instance_set_display_label($address, 'default', 'hidden');
  field_update_instance($address);

  $neighborhoods = findit_add_term_reference_field('node', FINDIT_FIELD_NEIGHBORHOODS, $bundle, 'neighborhoods', st('Neighborhoods'), FIELD_CARDINALITY_UNLIMITED);
  findit_instance_set_required($neighborhoods);
  findit_instance_set_widget_type($neighborhoods, 'svg_select');
  field_update_instance($neighborhoods);

  $transportation_notes = findit_add_text_long_field('node', FINDIT_FIELD_TRANSPORTATION_NOTES, $bundle, st('Transportation and parking notes'));
  findit_instance_set_label_help_description($transportation_notes, st('Enter notes for transportation and parking. We will use the geocode to refer users to an outside service for specific transportation information.'));
  field_update_instance($transportation_notes);
}

/**
 * Creates content type Contact.
 */
function findit_add_node_type_contact() {
  $bundle = 'contact';

  // Content type setup.

  $type = array(
    'type' => $bundle,
    'name' => st('Contact'),
    'base' => 'node_content',
    'description' => st(""),
    'custom' => 1,
    'modified' => 1,
    'locked' => 0,
    'title_label' => st('Name'),
  );
  $type = node_type_set_defaults($type);
  node_type_save($type);
  rdf_mapping_save(array(
    'type' => 'node',
    'bundle' => $bundle,
    'mapping' => array(
      'rdftype' => array('foaf:Document'),
    ),
  ));
  variable_set("node_options_$bundle", array('status', 'revision'));
  variable_set("node_submitted_$bundle", FALSE);
  variable_set('clone_omitted', variable_get('clone_omitted', array()) + array($bundle => $bundle));

  // Add fields.
  $role = findit_add_text_field('node', FINDIT_FIELD_CONTACT_ROLE, $bundle, st('Role'));
  findit_instance_set_display_label($role, 'default', 'hidden');
  field_update_instance($role);

  $phone = findit_add_telephone_field('node', FINDIT_FIELD_CONTACT_PHONE, $bundle, st('Phone'));
  findit_instance_set_display_label($phone, 'default', 'inline');
  findit_instance_set_display_label($phone, 'teaser', 'hidden');
  findit_instance_set_display_type($phone, 'teaser', 'text_plain');
  field_update_instance($phone);

  $email = findit_add_email_field('node', FINDIT_FIELD_CONTACT_EMAIL, $bundle, st('Email'));
  findit_instance_set_display_label($email, 'default', 'inline');
  findit_instance_set_display_type($email, 'default', 'email_plain');
  findit_instance_set_display_label($email, 'teaser', 'hidden');
  findit_instance_set_display_type($email, 'teaser', 'email_plain');
  field_update_instance($email);
}

/**
 * Creates content type Callout.
 */
function findit_add_node_type_callout() {
  $bundle = 'callout';

  // Content type setup.

  $type = array(
    'type' => $bundle,
    'name' => st('Callout'),
    'base' => 'node_content',
    'description' => st("Use callouts to create teasers with images for featured links."),
    'custom' => 1,
    'modified' => 1,
    'locked' => 0,
    'title_label' => st('Title'),
  );
  $type = node_type_set_defaults($type);
  node_type_save($type);
  rdf_mapping_save(array(
    'type' => 'node',
    'bundle' => $bundle,
    'mapping' => array(
      'rdftype' => array('foaf:Document'),
    ),
  ));
  variable_set("node_options_$bundle", array('status', 'revision'));
  variable_set("node_submitted_$bundle", FALSE);
  variable_set('clone_omitted', variable_get('clone_omitted', array()) + array($bundle => $bundle));

  node_add_body_field($type, st('Description'));

  // Add fields.
  $link = findit_add_url_field('node', FINDIT_FIELD_CALLOUT_TARGET, $bundle, st('Link'));
  findit_instance_set_display_label($link, 'default', 'hidden');
  findit_instance_set_required($link);
  $image = findit_add_image_field('node', FINDIT_FIELD_LOGO, $bundle, st('Image'));
  findit_instance_set_required($image);
  findit_instance_set_display_label($image, 'default', 'hidden');
  findit_instance_set_display_settings($image, 'default', array(
    'image_style' => 'medium',
  ));
}

/**
 * Load taxonomy terms for the given vocabulary from the source path.
 *
 * @param string $machine_name
 *   The machine name of a vocabulary.
 * @param string $path
 *   The path to a data file.
 */
function findit_vocabulary_load_terms($machine_name, $path) {
  Migration::registerMigration('TaxonomyTermJSONMigration', $machine_name, array(
    'vocabulary' => $machine_name,
    'path' => $path,
    'disable_hooks' => array(
      'taxonomy_term_insert' => array('pathauto'),
    ),
  ));
  $migration = Migration::getInstance($machine_name);
  $migration->processImport();
}

/**
 * Loads nodes of the given type from the source path.
 *
 * @param string $type
 *   The machine name of a content type.
 * @param string $path
 *   The path to a file.
 */
function findit_load_nodes($type, $path, $migration_class) {
  Migration::registerMigration($migration_class, $type, array(
    'type' => $type,
    'path' => $path,
    'disable_hooks' => array(
      'node_insert' => array('pathauto'),
    ),
  ));
  $migration = Migration::getInstance($type);
  $migration->processImport();
}

/**
 * Creates subscriber entity for SMS.
 */
function findit_add_subscriber_type_sms() {
  $controller = new SubscriberEntityBundleController('subscriber_entity_bundle');

  // Content type setup.
  $bundle = new stdClass();
  $bundle->name = 'sms';
  $bundle->label = st('SMS subscriber');
  $bundle->is_new = TRUE;
  $bundle->description = t("Subscriptions for an SMS number.");
  $bundle->unique_field = 'field_subscriber_voipnumber';

  $controller->save($bundle);

  // Add fields.
  $voipnumber = findit_add_voipnumber_field('subscriber_entity', FINDIT_FIELD_SUBSCRIBER_VOIPNUMBER, $bundle->name, st('Mobile number'));
  findit_instance_set_required($voipnumber);
  field_update_instance($voipnumber);

  $enabled = findit_add_list_boolean_field('subscriber_entity', FINDIT_FIELD_SUBSCRIBER_ENABLED, $bundle->name, st('Is the number enabled?'));
  findit_field_set_allowed_values(FINDIT_FIELD_SUBSCRIBER_ENABLED, array(
    0 => st('Disabled'),
    1 => st('Enabled'),
  ));
  findit_instance_set_required($enabled);
  findit_instance_set_widget_type($enabled, 'options_buttons');
  $enabled['default_value'] = array(array('value' => 1));
  field_update_instance($enabled);

  $events = findit_add_entityreference_field('subscriber_entity', FINDIT_FIELD_SUBSCRIBER_EVENTS, $bundle->name, array('event'), st('Events subscribed to'), FIELD_CARDINALITY_UNLIMITED);
  findit_instance_set_widget_settings($events, array('references_dialog_search' => TRUE));
  $events['default_value_function'] = 'findit_subscriber_entityreference_default_value';
  field_update_instance($events);

  $organizations = findit_add_entityreference_field('subscriber_entity', FINDIT_FIELD_SUBSCRIBER_ORGANIZATIONS, $bundle->name, array('organization'), st('Organizations subscribed to'), FIELD_CARDINALITY_UNLIMITED);
  findit_instance_set_widget_settings($organizations, array('references_dialog_search' => TRUE));
  $organizations['default_value_function'] = 'findit_subscriber_entityreference_default_value';
  field_update_instance($organizations);
}

/**
 * Creates subscriber entity for Email.
 */
function findit_add_subscriber_type_email() {
  $controller = new SubscriberEntityBundleController('subscriber_entity_bundle');

  // Content type setup.
  $bundle = new stdClass();
  $bundle->name = 'email';
  $bundle->label = st('Email subscriber');
  $bundle->is_new = TRUE;
  $bundle->description = t("Subscriptions for an email address.");
  $bundle->unique_field = 'field_subscriber_email';

  $controller->save($bundle);

  // Enable token view mode.
  field_bundle_settings(
    'subscriber_entity',
    'email',
    array('view_modes' => array('token' => array('custom_settings' => TRUE)))
  );

  // Add fields.
  $email = findit_add_email_field('subscriber_entity', FINDIT_FIELD_SUBSCRIBER_EMAIL, $bundle->name, st('Email address'));
  findit_instance_set_required($email);
  findit_instance_set_display_type($email, 'token', 'email_plain');
  findit_instance_set_display_label($email, 'token', 'hidden');
  field_update_instance($email);

  $enabled = findit_add_list_boolean_field('subscriber_entity', FINDIT_FIELD_SUBSCRIBER_ENABLED, $bundle->name, st('Is the number enabled?'));
  findit_field_set_allowed_values(FINDIT_FIELD_SUBSCRIBER_ENABLED, array(
    0 => st('Disabled'),
    1 => st('Enabled'),
  ));
  findit_instance_set_required($enabled);
  findit_instance_set_widget_type($enabled, 'options_buttons');
  $enabled['default_value'] = array(array('value' => 1));
  field_update_instance($enabled);

  $events = findit_add_entityreference_field('subscriber_entity', FINDIT_FIELD_SUBSCRIBER_EVENTS, $bundle->name, array('event'), st('Events subscribed to'), FIELD_CARDINALITY_UNLIMITED);
  findit_instance_set_widget_settings($events, array('references_dialog_search' => TRUE));
  $events['default_value_function'] = 'findit_subscriber_entityreference_default_value';
  field_update_instance($events);

  $organizations = findit_add_entityreference_field('subscriber_entity', FINDIT_FIELD_SUBSCRIBER_ORGANIZATIONS, $bundle->name, array('organization'), st('Organizations subscribed to'), FIELD_CARDINALITY_UNLIMITED);
  findit_instance_set_widget_settings($organizations, array('references_dialog_search' => TRUE));
  $organizations['default_value_function'] = 'findit_subscriber_entityreference_default_value';
  field_update_instance($organizations);
}

/**
 * Adds contacts field to a node type.
 *
 * @param $bundle
 *   The node bundle.
 * @param $label
 *   The label for the field instance.
 *
 * @return
 *   Field instance.
 */
function findit_add_contacts_field($bundle, $label) {
  $contacts = findit_add_entityreference_field('node', FINDIT_FIELD_CONTACTS, $bundle, array('contact'), $label, FIELD_CARDINALITY_UNLIMITED);
  findit_instance_set_widget_settings($contacts, array('references_dialog_add' => TRUE));
  findit_instance_set_display_label($contacts, 'default', 'hidden');
  findit_instance_set_display_type($contacts, 'default', 'entityreference_entity_view');
  findit_instance_set_display_settings($contacts, 'default', array('view_mode' => 'full', 'links' => 0));
  findit_instance_set_display_label($contacts, 'teaser', 'inline');
  findit_instance_set_display_type($contacts, 'teaser', 'entityreference_entity_view');
  findit_instance_set_display_settings($contacts, 'teaser', array('view_mode' => 'teaser', 'links' => 0));
  field_update_instance($contacts);

  return $contacts;
}

/**
 * Adds locations field to a node type.
 *
 * @param $bundle
 *   The node bundle.
 * @param $label
 *   The label for the field instance.
 *
 * @return
 *   Field instance.
 */
function findit_add_locations_field($bundle, $label) {
  $locations = findit_add_entityreference_field('node', FINDIT_FIELD_LOCATIONS, $bundle, array('location'), $label, FIELD_CARDINALITY_UNLIMITED);
  findit_instance_set_widget_settings($locations, array('references_dialog_add' => TRUE));
  findit_instance_set_display_type($locations, 'default', 'entityreference_entity_view');
  findit_instance_set_display_settings($locations, 'default', array('view_mode' => 'full', 'links' => 0));
  findit_instance_set_display_label($locations, 'default', 'hidden');
  field_update_instance($locations);
}
