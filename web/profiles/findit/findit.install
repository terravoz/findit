<?php
/**
 * @file
 * Install, update and uninstall functions for the standard installation ]
 * profile.
 */

require_once DRUPAL_ROOT . '/profiles/findit/findit.inc';

/**
 * Implements hook_install().
 *
 * Perform actions to set up the site for this profile.
 *
 * @see system_install()
 */
function findit_install() {
  $t = get_t();

  findit_configure_language_settings();

  $filtered_html_format = findit_create_filtered_html_format();
  $full_html_format = findit_create_full_html_format();

  $default_theme = 'bartik';
  $admin_theme = 'seven';

  theme_enable(array($default_theme));
  variable_set('theme_default', $default_theme);
  findit_enable_admin_theme($admin_theme);

  // Enable some standard blocks.
  findit_add_block(array(
    'module' => 'system',
    'delta' => 'main',
    'theme' => $default_theme,
    'status' => BLOCK_CUSTOM_ENABLED,
    'weight' => 0,
    'region' => 'content',
    'visibility' => BLOCK_VISIBILITY_NOTLISTED,
    'pages' => '',
    'cache' => DRUPAL_NO_CACHE,
  ));
  findit_add_block(array(
    'module' => 'search',
    'delta' => 'form',
    'theme' => $default_theme,
    'status' => BLOCK_CUSTOM_ENABLED,
    'weight' => -1,
    'region' => 'sidebar_first',
    'visibility' => BLOCK_VISIBILITY_NOTLISTED,
    'pages' => '',
    'cache' => DRUPAL_NO_CACHE,
  ));
  findit_add_block(array(
    'module' => 'user',
    'delta' => 'login',
    'theme' => $default_theme,
    'status' => BLOCK_CUSTOM_ENABLED,
    'weight' => 0,
    'region' => 'sidebar_first',
    'visibility' => BLOCK_VISIBILITY_NOTLISTED,
    'pages' => '',
    'cache' => DRUPAL_NO_CACHE,
  ));
  findit_add_block(array(
    'module' => 'system',
    'delta' => 'navigation',
    'theme' => $default_theme,
    'status' => BLOCK_CUSTOM_ENABLED,
    'weight' => 0,
    'region' => 'sidebar_first',
    'visibility' => BLOCK_VISIBILITY_NOTLISTED,
    'pages' => '',
    'cache' => DRUPAL_NO_CACHE,
  ));
  findit_add_block(array(
    'module' => 'system',
    'delta' => 'powered-by',
    'theme' => $default_theme,
    'status' => BLOCK_CUSTOM_ENABLED,
    'weight' => 10,
    'region' => 'footer',
    'visibility' => BLOCK_VISIBILITY_NOTLISTED,
    'pages' => '',
    'cache' => DRUPAL_NO_CACHE,
  ));
  findit_add_block(array(
    'module' => 'system',
    'delta' => 'help',
    'theme' => $default_theme,
    'status' => BLOCK_CUSTOM_ENABLED,
    'weight' => 0,
    'region' => 'help',
    'visibility' => BLOCK_VISIBILITY_NOTLISTED,
    'pages' => '',
    'cache' => DRUPAL_NO_CACHE,
  ));
  findit_add_block(array(
    'module' => 'findit',
    'delta' => 'search-summary',
    'theme' => $default_theme,
    'status' => BLOCK_CUSTOM_ENABLED,
    'weight' => -1,
    'region' => 'content',
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages' => "search\nsearch/*",
    'cache' => DRUPAL_NO_CACHE,
  ));
  findit_add_block(array(
    'module' => 'system',
    'delta' => 'main',
    'theme' => $admin_theme,
    'status' => BLOCK_CUSTOM_ENABLED,
    'weight' => 0,
    'region' => 'content',
    'visibility' => BLOCK_VISIBILITY_NOTLISTED,
    'pages' => '',
    'cache' => DRUPAL_NO_CACHE,
  ));
  findit_add_block(array(
    'module' => 'system',
    'delta' => 'help',
    'theme' => $admin_theme,
    'status' => BLOCK_CUSTOM_ENABLED,
    'weight' => 0,
    'region' => 'help',
    'visibility' => BLOCK_VISIBILITY_NOTLISTED,
    'pages' => '',
    'cache' => DRUPAL_NO_CACHE,
  ));
  findit_add_block(array(
    'module' => 'user',
    'delta' => 'login',
    'theme' => $admin_theme,
    'status' => BLOCK_CUSTOM_ENABLED,
    'weight' => 10,
    'region' => 'content',
    'visibility' => BLOCK_VISIBILITY_NOTLISTED,
    'pages' => '',
    'cache' => DRUPAL_NO_CACHE,
  ));
  findit_add_block(array(
    'module' => 'views',
    'delta' => 'announcements-block_current',
    'theme' => $default_theme,
    'status' => BLOCK_CUSTOM_ENABLED,
    'weight' => 10,
    'region' => 'content',
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages' => '<front>',
    'cache' => DRUPAL_NO_CACHE,
  ));
  findit_add_block(array(
    'module' => 'views',
    'delta' => 'directory-block_activity',
    'theme' => $default_theme,
    'status' => BLOCK_CUSTOM_ENABLED,
    'weight' => 10,
    'region' => 'content',
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages' => 'directory',
    'cache' => DRUPAL_NO_CACHE,
  ));
  findit_add_block(array(
    'module' => 'locale',
    'delta' => 'language',
    'theme' => $default_theme,
    'status' => BLOCK_CUSTOM_ENABLED,
    'weight' => 0,
    'region' => 'sidebar_first',
    'visibility' => BLOCK_VISIBILITY_NOTLISTED,
    'pages' => '',
    'cache' => DRUPAL_NO_CACHE,
  ));

  findit_configure_pathauto();

  $vocabularies = array(
    'program_categories' => $t('Program categories'),
    'time_day_of_week' => $t('Day of the week'),
    'time_of_day' => $t('Time of day'),
    'time_of_year' => $t('Time of year'),
    'time_other' => $t('Other times'),
    'times' => $t('Times'),
    'grade_eligibility_options' => $t('Grade eligibility'),
    'other_eligibility_options' => $t('Other eligibility'),
    'accessibility_options' => $t('Accessibility'),
    'amenities' => $t('Amenities'),
    'location_types' => $t('Location types'),
  );

  foreach ($vocabularies as $machine_name => $name) {
    findit_create_vocabulary($name, $machine_name);
    findit_vocabulary_load_terms($machine_name, dirname(__FILE__) . "/data/$machine_name.json");
  }

  findit_add_node_type_page();
  findit_add_node_type_organization();
  findit_add_node_type_program();
  findit_add_node_type_event();
  findit_add_node_type_announcement();
  findit_add_node_type_location();

  $node_types = array(
    'page' => array('file_name' => 'pages.json', 'migration_class' => 'NodeJSONMigration'),
    'organization' => array('file_name' => 'organizations.json', 'migration_class' => 'OrganizationJSONMigration'),
    'program' => array('file_name' => 'programs.json', 'migration_class' => 'ProgramJSONMigration'),
  );

  foreach ($node_types as $machine_name => $definition) {
    findit_load_nodes($machine_name, dirname(__FILE__) . "/data/{$definition['file_name']}", $definition['migration_class']);
  }

  $q = new EntityFieldQuery();
  $q->entityCondition('entity_type', 'node');
  $result = $q->execute();
  module_load_include('pathauto.inc', 'pathauto');
  pathauto_node_update_alias_multiple(array_keys($result['node']), 'bulkupdate');

  findit_configure_people();
  findit_create_admin_role();
  findit_create_organization_manager_role();
  findit_create_content_manager_role();

  // Enable default permissions for system roles.
  $filtered_html_permission = filter_permission_name($filtered_html_format);
  user_role_grant_permissions(DRUPAL_ANONYMOUS_RID, array(
    'access content',
    'search content',
    'access comments',
    $filtered_html_permission,
  ));
  user_role_grant_permissions(DRUPAL_AUTHENTICATED_RID, array(
    'access content',
    'search content',
    'access comments',
    'post comments',
    'skip comment approval',
    $filtered_html_permission,
  ));

  variable_set('clone_use_node_type_name', 1);
  variable_set('search_active_modules', array('node' => 'node'));
}

/**
 * Configures language settings.
 */
function findit_configure_language_settings() {
  locale_add_language('es', NULL, NULL, LANGUAGE_LTR, '', '', TRUE);

  language_negotiation_set('language', array(
    'locale-url' => array('weight' => -4),
    'locale-browser' => array('weight' => -1),
    'language-default' => array('weight' => 0),
  ));

  $menu = menu_load('main-menu');
  $menu['i18n_mode'] = I18N_MODE_MULTIPLE;
  menu_save($menu);
}

/**
 * Creates the filtered html format.
 *
 * @return object
 *   The filtereed html format object
 */
function findit_create_filtered_html_format() {
  $filtered_html_format = (object) array(
    'format' => 'filtered_html',
    'name' => 'Filtered HTML',
    'weight' => 0,
    'filters' => array(
      // URL filter.
      'filter_url' => array(
        'weight' => 0,
        'status' => 1,
      ),
      // HTML filter.
      'filter_html' => array(
        'weight' => 1,
        'status' => 1,
      ),
      // Line break filter.
      'filter_autop' => array(
        'weight' => 2,
        'status' => 1,
      ),
      // HTML corrector filter.
      'filter_htmlcorrector' => array(
        'weight' => 10,
        'status' => 1,
      ),
    ),
  );
  filter_format_save($filtered_html_format);
  return $filtered_html_format;
}

/**
 * Creates the full html format.
 *
 * @return object
 *   The full html format object
 */
function findit_create_full_html_format() {
  $full_html_format = (object) array(
    'format' => 'full_html',
    'name' => 'Full HTML',
    'weight' => 1,
    'filters' => array(
      // URL filter.
      'filter_url' => array(
        'weight' => 0,
        'status' => 1,
      ),
      // Line break filter.
      'filter_autop' => array(
        'weight' => 1,
        'status' => 1,
      ),
      // HTML corrector filter.
      'filter_htmlcorrector' => array(
        'weight' => 10,
        'status' => 1,
      ),
    ),
  );
  filter_format_save($full_html_format);
  return $full_html_format;
}

/**
 * Configure pathauto settings.
 */
function findit_configure_pathauto() {
  variable_set('pathauto_node_pattern', '[node:title]');
  variable_set('pathauto_node_page_pattern', '[node:title]');
}

/**
 * Create a default role for site administrators.
 *
 * All available permissions are assigned to that role.
 */
function findit_create_admin_role() {
  $admin_role = new stdClass();
  $admin_role->name = 'administrator';
  $admin_role->weight = 2;
  user_role_save($admin_role);
  user_role_grant_permissions($admin_role->rid, array_keys(module_invoke_all('permission')));
  // Set this as the administrator role.
  variable_set('user_admin_role', $admin_role->rid);
  // Assign user 1 the "administrator" role.
  db_insert('users_roles')
    ->fields(array('uid' => 1, 'rid' => $admin_role->rid))
    ->execute();
}

/**
 * Create a default role for organization managers.
 */
function findit_create_organization_manager_role() {
  $role = new stdClass();
  $role->name = FINDIT_ROLE_ORGANIZATION_MANAGER;
  $role->weight = 3;
  user_role_save($role);
  user_role_grant_permissions($role->rid, array(
    'access administration pages',
    'access content',
    'access content overview',
    'access contextual links',
    'access comments',
    'access toolbar',
    'administer taxonomy',
    'clone node',
    'post comments',
    'skip comment approval',
    'create organization content',
    'edit any organization content',
    'delete any organization content',
    'create program content',
    'edit any program content',
    'delete any program content',
    'create event content',
    'edit any event content',
    'delete any event content',
    'create location content',
    'edit any location content',
    'delete any location content',
    'view own unpublished content',
    'view revisions',
    'view the administration theme',
  ));
}

/**
 * Create a default role for content managers.
 */
function findit_create_content_manager_role() {
  $role = new stdClass();
  $role->name = FINDIT_ROLE_CONTENT_MANAGER;
  $role->weight = 4;
  user_role_save($role);
  user_role_grant_permissions($role->rid, array(
    'access content',
    'create announcement content',
    'edit any announcement content',
    'delete any announcement content',
    'administer nodequeue',
  ));
}

/**
 * Configures clone module.
 */
function findit_configure_clone() {
  foreach (arry_keys(node_type_get_types()) as $type) {
    variable_set("clone_reset_$type", 1);
  }
  variable_set('clone_use_node_type_name', 1);
}

/**
 * Configures user settings.
 */
function findit_configure_people() {
  variable_set('user_pictures', '1');
  variable_set('user_picture_dimensions', '1024x1024');
  variable_set('user_picture_file_size', '800');
  variable_set('user_picture_style', 'thumbnail');
  variable_set('user_register', USER_REGISTER_VISITORS);
}

/**
 * Creates content type Basic page.
 */
function findit_add_node_type_page() {
  $bundle = 'page';

  // Content type setup.

  $type = array(
    'type' => $bundle,
    'name' => st('Basic page'),
    'base' => 'node_content',
    'description' => st("Use <em>basic pages</em> for your static content, such as an 'About us' page."),
    'custom' => 1,
    'modified' => 1,
    'locked' => 0,
  );
  $type = node_type_set_defaults($type);
  node_type_save($type);
  rdf_mapping_save(array(
    'type' => 'node',
    'bundle' => $bundle,
    'mapping' => array(
      'rdftype' => array('foaf:Document'),
    ),
  ));
  variable_set("node_options_$bundle", array('status', 'revision'));
  variable_set("comment_$bundle", COMMENT_NODE_HIDDEN);
  variable_set("node_submitted_$bundle", FALSE);
  variable_set("language_content_type_$bundle", TRANSLATION_ENABLED);
  variable_set("clone_reset_$bundle", 1);

  // Add fields.

  node_add_body_field($type);
}

/**
 * Creates content type Organization.
 */
function findit_add_node_type_organization() {
  $bundle = 'organization';

  // Content type setup.

  $type = array(
    'type' => $bundle,
    'name' => st('Organization'),
    'base' => 'node_content',
    'description' => st(""),
    'custom' => 1,
    'modified' => 1,
    'locked' => 0,
    'title_label' => st('Organization name'),
  );
  $type = node_type_set_defaults($type);
  node_type_save($type);
  rdf_mapping_save(array(
    'type' => 'node',
    'bundle' => $bundle,
    'mapping' => array(
      'rdftype' => array('foaf:Document'),
    ),
  ));
  variable_set("node_options_$bundle", array('status', 'revision'));
  variable_set("comment_$bundle", COMMENT_NODE_HIDDEN);
  variable_set("node_submitted_$bundle", FALSE);
  variable_set("language_content_type_$bundle", TRANSLATION_ENABLED);
  variable_set("clone_reset_$bundle", 1);

  // Add fields.

  $body = node_add_body_field((object) array('type' => $bundle), st('Organization description'));
  findit_instance_set_description($body, st('Brief description of what your organization is all about (50 words). Avoid technical or complex terminology. The first 10 words or so will be displayed in search results.'));
  findit_instance_set_required($body);
  field_update_instance($body);

  findit_add_image_field('node', FINDIT_FIELD_LOGO, $bundle, st('Picture or logo'));

  $location_type = findit_add_term_reference_field('node', FINDIT_FIELD_LOCATION_TYPE, $bundle, 'location_types', st('Location type'), FIELD_CARDINALITY_UNLIMITED);
  findit_instance_set_description($location_type, st("Check all that apply"));
  findit_instance_set_widget_type($location_type, 'options_buttons');
  field_update_instance($location_type);

  $locations = findit_add_entityreference_field('node', FINDIT_FIELD_LOCATIONS, $bundle, array('location'), st('Organization locations'), FIELD_CARDINALITY_UNLIMITED);
  findit_instance_set_widget_settings($locations, array('references_dialog_add' => TRUE));
  field_update_instance($locations);

  findit_add_office_hours_field('node', FINDIT_FIELD_OPERATION_HOURS, $bundle, st('Hours of operation'));
  findit_field_set_granularity(FINDIT_FIELD_OPERATION_HOURS, 5);

  $organization_url = findit_add_url_field('node', FINDIT_FIELD_ORGANIZATION_URL, $bundle, st('Organization\'s URL'));
  findit_instance_set_description($organization_url, st('Enter the URL of the organization\'s website, if any.'));
  field_update_instance($organization_url);

  $facebook_page = findit_add_url_field('node', FINDIT_FIELD_FACEBOOK_PAGE, $bundle, st('Organization\'s Facebook page'));
  findit_instance_set_description($facebook_page, st('Enter the URL of the organization\'s Facebook page, if any.'));
  field_update_instance($facebook_page);

  $twitter_handle = findit_add_url_field('node', FINDIT_FIELD_TWITTER_HANDLE, $bundle, st('Organization\'s Twitter handle'));
  findit_instance_set_description($twitter_handle, st('Enter the URL for your organization\'s Twitter page, if any.'));
  field_update_instance($twitter_handle);

  $contact_information = findit_add_text_long_field('node', FINDIT_FIELD_CONTACT_INFORMATION, $bundle, st('Contact information'));
  findit_instance_set_description($contact_information, st('For each office of the organization, provide the following information: a) name, role and contact information (email, phone, etc.); b) Office address (street, city, state, zip); c) Office hours (Sunday: noon-5pm, Monday: 9am-5pm, etc).'));
  field_update_instance($contact_information);

  $organization_notes = findit_add_text_long_field('node', FINDIT_FIELD_ORGANIZATION_NOTES, $bundle, st('Organization notes'));
  findit_instance_set_description($organization_notes, st('Information about special hours and other elements that may not fit above.'));
  field_update_instance($organization_notes);

  // Group fields.

  $weight = 0;
  $group_basic_information = (object) array(
    'identifier' => "group_basic_information|node|$bundle|form",
    'group_name' => 'group_basic_information',
    'entity_type' => 'node',
    'bundle' => $bundle,
    'mode' => 'form',
    'label' => st('What'),
    'weight' => $weight++,
    'children' => array(
      'title',
      'body',
      FINDIT_FIELD_LOGO,
      FINDIT_FIELD_LOCATION_TYPE,
    ),
    'format_type' => 'fieldset',
    'format_settings' => array(
      'instance_settings' => array(
        'required_fields' => 1,
        'show_label' => 1,
      ),
      'formatter' => 'open',
    ),
  );
  field_group_group_save($group_basic_information);

  $group_where = (object) array(
    'identifier' => "group_where|node|$bundle|form",
    'group_name' => 'group_where',
    'entity_type' => 'node',
    'bundle' => $bundle,
    'mode' => 'form',
    'label' => st('Where'),
    'weight' => $weight++,
    'children' => array(
      FINDIT_FIELD_LOCATIONS,
    ),
    'format_type' => 'fieldset',
    'format_settings' => array(
      'instance_settings' => array(
        'required_fields' => 1,
        'show_label' => 1,
      ),
      'formatter' => 'open',
    ),
  );
  field_group_group_save($group_where);

  $group_when = (object) array(
    'identifier' => "group_when|node|$bundle|form",
    'group_name' => 'group_when',
    'entity_type' => 'node',
    'bundle' => $bundle,
    'mode' => 'form',
    'label' => st('When'),
    'weight' => $weight++,
    'children' => array(
      FINDIT_FIELD_OPERATION_HOURS,
    ),
    'format_type' => 'fieldset',
    'format_settings' => array(
      'instance_settings' => array(
        'required_fields' => 1,
        'show_label' => 1,
      ),
      'formatter' => 'open',
    ),
  );
  field_group_group_save($group_when);

  $group_additional_information = (object) array(
    'identifier' => "group_additional_information|node|$bundle|form",
    'group_name' => 'group_additional_information',
    'entity_type' => 'node',
    'bundle' => $bundle,
    'mode' => 'form',
    'label' => st('Additional information'),
    'weight' => $weight++,
    'children' => array(
      FINDIT_FIELD_CONTACT_INFORMATION,
      FINDIT_FIELD_ORGANIZATION_URL,
      FINDIT_FIELD_FACEBOOK_PAGE,
      FINDIT_FIELD_TWITTER_HANDLE,
      FINDIT_FIELD_ORGANIZATION_NOTES,
    ),
    'format_type' => 'fieldset',
    'format_settings' => array(
      'instance_settings' => array(
        'required_fields' => 0,
        'show_label' => 1,
      ),
      'formatter' => 'open',
    ),
  );
  field_group_group_save($group_additional_information);
}

/**
 * Creates content type Program.
 */
function findit_add_node_type_program() {
  $bundle = 'program';

  // Content type setup.

  $type = array(
    'type' => $bundle,
    'name' => st('Program'),
    'base' => 'node_content',
    'description' => st(""),
    'custom' => 1,
    'modified' => 1,
    'locked' => 0,
    'title_label' => st('Program name'),
  );
  $type = node_type_set_defaults($type);
  node_type_save($type);
  rdf_mapping_save(array(
    'type' => 'node',
    'bundle' => $bundle,
    'mapping' => array(
      'rdftype' => array('foaf:Document'),
    ),
  ));
  variable_set("node_options_$bundle", array('status', 'revision'));
  variable_set("comment_$bundle", COMMENT_NODE_HIDDEN);
  variable_set("node_submitted_$bundle", FALSE);
  variable_set("language_content_type_$bundle", TRANSLATION_ENABLED);
  variable_set("clone_reset_$bundle", 1);

  // Add fields.

  $body = node_add_body_field((object) array('type' => $bundle), st('Program description'));
  findit_instance_set_description($body, st('Brief description of what your program is all about (50 words). Avoid technical or complex terminology. The first 10 words or so will be displayed in search results.'));
  findit_instance_set_required($body);
  field_update_instance($body);

  $organizations = findit_add_entityreference_field('node', FINDIT_FIELD_ORGANIZATIONS, $bundle, array('organization'), st('Organizations'), FIELD_CARDINALITY_UNLIMITED);
  findit_instance_set_description($organizations, st('Type in the organization(s) responsible for this program. We will need that information to connect this form with the organization.'));
  findit_instance_set_required($organizations);
  findit_instance_set_widget_settings($organizations, array('references_dialog_add' => TRUE));
  field_update_instance($organizations);

  findit_add_image_field('node', FINDIT_FIELD_LOGO, $bundle, st('Picture or logo'));

  $program_categories = findit_add_term_reference_field('node', FINDIT_FIELD_PROGRAM_CATEGORIES, $bundle, 'program_categories', st('Program categories'), FIELD_CARDINALITY_UNLIMITED);
  findit_instance_set_required($program_categories);
  findit_instance_set_widget_type($program_categories, 'options_buttons');
  field_update_instance($program_categories);

  $program_time_day_of_week = findit_add_term_reference_field('node', FINDIT_FIELD_TIME_DAY_OF_WEEK, $bundle, 'time_day_of_week', st('Day of week'), FIELD_CARDINALITY_UNLIMITED);
  findit_instance_set_widget_type($program_time_day_of_week, 'options_buttons');
  field_update_instance($program_time_day_of_week);

  $program_time_of_day = findit_add_term_reference_field('node', FINDIT_FIELD_TIME_OF_DAY, $bundle, 'time_of_day', st('Time of day'), FIELD_CARDINALITY_UNLIMITED);
  findit_instance_set_widget_type($program_time_of_day, 'options_buttons');
  field_update_instance($program_time_of_day);

  $program_time_of_year = findit_add_term_reference_field('node', FINDIT_FIELD_TIME_OF_YEAR, $bundle, 'time_of_year', st('Time of year'), FIELD_CARDINALITY_UNLIMITED);
  findit_instance_set_widget_type($program_time_of_year, 'options_buttons');
  field_update_instance($program_time_of_year);

  $program_time_other = findit_add_term_reference_field('node', FINDIT_FIELD_TIME_OTHER, $bundle, 'time_other', st('Other times'), FIELD_CARDINALITY_UNLIMITED);
  findit_instance_set_widget_type($program_time_other, 'options_buttons');
  field_update_instance($program_time_other);

  $program_times = findit_add_term_reference_field('node', FINDIT_FIELD_TIMES, $bundle, 'times', st('Program times'), FIELD_CARDINALITY_UNLIMITED);
  findit_instance_set_widget_type($program_times, 'options_buttons');
  field_update_instance($program_times);

  $program_agenda = findit_add_text_long_field('node', FINDIT_FIELD_AGENDA, $bundle, st('Program agenda'));
  findit_instance_set_description($program_agenda, st('Please add the registration/application dates and times below. Ex. Jan 10-20: Early bird registration (9am-5pm); Jan 21-31: Regular registration (9am-5pm), etc. NOTE: If you would like the registration dates to actually show up on the Find It calendar, create a separate event for that.'));
  field_update_instance($program_agenda);

  $program_locations = findit_add_entityreference_field('node', FINDIT_FIELD_LOCATIONS, $bundle, array('location'), st('Program locations'), FIELD_CARDINALITY_UNLIMITED);
  findit_instance_set_description($program_locations, st("Enter the name of the site for each location of where the program is going to run. This may not necessarily be the same location as the Provider's address."));
  findit_instance_set_widget_settings($program_locations, array('references_dialog_add' => TRUE));
  field_update_instance($program_locations);

  $transportation = findit_add_list_text_field('node', FINDIT_FIELD_TRANSPORTATION, $bundle, st('Is transportation provided to participants of the program?'), FIELD_CARDINALITY_UNLIMITED);
  findit_field_set_allowed_values(FINDIT_FIELD_TRANSPORTATION, array(
    'no' => st('No transportation provided'),
    'to' => st('Transportation provided to the program - check Transportation notes'),
    'from' => st('Transportation provided from the program - check Transportation notes'),
  ));
  findit_instance_set_widget_type($transportation, 'options_buttons');
  field_update_instance($transportation);

  findit_add_text_long_field('node', FINDIT_FIELD_TRANSPORTATION_NOTES, $bundle, st('Transportation notes'));

  $age_eligibility = findit_add_list_text_field('node', FINDIT_FIELD_AGE_ELIGIBILITY, $bundle, st('Age eligibility'), FIELD_CARDINALITY_UNLIMITED);
  findit_field_set_allowed_values(FINDIT_FIELD_AGE_ELIGIBILITY, array(
    '-1' => st('Pre-natal'),
    '0' => st('Infant (less than 1 year old)'),
    '1' => st('1'),
    '2' => st('2'),
    '3' => st('3'),
    '4' => st('4'),
    '5' => st('5'),
    '6' => st('6'),
    '7' => st('7'),
    '8' => st('8'),
    '9' => st('9'),
    '10' => st('10'),
    '11' => st('11'),
    '12' => st('12'),
    '13' => st('13'),
    '14' => st('14'),
    '15' => st('15'),
    '16' => st('16'),
    '17' => st('17'),
    '18' => st('19'),
    '19' => st('19'),
    '20' => st('20 and over'),
    '21' => st('Parent/Caregiver'),
  ));
  findit_instance_set_description($age_eligibility, st('Check all that apply'));
  findit_instance_set_required($age_eligibility);
  findit_instance_set_widget_type($age_eligibility, 'slide_with_style_slider');
  field_update_instance($age_eligibility);

  $grade_eligibility = findit_add_term_reference_field('node', FINDIT_FIELD_GRADE_ELIGIBILITY, $bundle, 'grade_eligibility_options', st('Grade eligibility'), FIELD_CARDINALITY_UNLIMITED);
  findit_instance_set_widget_type($grade_eligibility, 'options_buttons');
  field_update_instance($grade_eligibility);

  $other_eligibility = findit_add_term_reference_field('node', FINDIT_FIELD_OTHER_ELIGIBILITY, $bundle, 'other_eligibility_options', st('Other eligibility'), FIELD_CARDINALITY_UNLIMITED);
  findit_instance_set_widget_type($other_eligibility, 'options_buttons');
  field_update_instance($other_eligibility);

  $eligibility_notes = findit_add_text_long_field('node', FINDIT_FIELD_ELIGIBILITY_NOTES, $bundle, st('Eligibility - additional information'));
  findit_instance_set_description($eligibility_notes, st('If needed, insert additional elegibility information below'));
  field_update_instance($eligibility_notes);

  $accessibility = findit_add_term_reference_field('node', FINDIT_FIELD_ACCESSIBILITY, $bundle, 'accessibility_options', st('Accessibility'), FIELD_CARDINALITY_UNLIMITED);
  findit_instance_set_widget_type($accessibility, 'options_buttons');
  field_update_instance($accessibility);

  $accessibility_notes = findit_add_text_long_field('node', FINDIT_FIELD_ACCESSIBILITY_NOTES, $bundle, st('Accessibility - additional information'));
  findit_instance_set_description($accessibility_notes, st('If needed, insert additional accessibility information below'));
  field_update_instance($accessibility_notes);

  $gratis = findit_add_list_boolean_field('node', FINDIT_FIELD_GRATIS, $bundle, st('Is this a free program?'));
  findit_field_set_allowed_values(FINDIT_FIELD_GRATIS, array(
    1 => st('Yes'),
    0 => st('No'),
  ));
  findit_instance_set_required($gratis);
  field_update_instance($gratis);

  $cost = findit_add_number_float_field('node', FINDIT_FIELD_COST, $bundle, st('If not free, program cost'));
  findit_instance_set_settings($cost, array(
    'min' => 0,
    'max' => '',
    'prefix' => '$',
    'suffix' => '',
  ));
  field_update_instance($cost);

  findit_add_list_boolean_field('node', FINDIT_FIELD_FINANCIAL_AID_SUPPORT, $bundle, st('Does this program offer any financial support or scholarships?'));
  findit_field_set_allowed_values(FINDIT_FIELD_FINANCIAL_AID_SUPPORT, array(
    1 => st('Yes'),
    0 => st('No'),
  ));

  findit_add_list_boolean_field('node', FINDIT_FIELD_FINANCIAL_AID_VOUCHERS, $bundle, st('Does this program accept vouchers?'));
  findit_field_set_allowed_values(FINDIT_FIELD_FINANCIAL_AID_VOUCHERS, array(
    1 => st('Yes'),
    0 => st('No'),
  ));

  $financial_aid_notes = findit_add_text_long_field('node', FINDIT_FIELD_FINANCIAL_AID_NOTES, $bundle, st('Financial support - additional information'));
  findit_instance_set_description($financial_aid_notes, st('If needed, insert additional financial support notes below'));
  field_update_instance($financial_aid_notes);

  $financial_aid_file = findit_add_file_field('node', FINDIT_FIELD_FINANCIAL_AID_FILE, $bundle, st('Financial support - additional information - file'));
  findit_instance_set_description($financial_aid_file, st('Are the financial support instructions in a file that people should be able to download? If so, add the name of the file here'));
  field_update_instance($financial_aid_file);

  $financial_aid_url = findit_add_url_field('node', FINDIT_FIELD_FINANCIAL_AID_URL, $bundle, st('Financial support - additional information - URL'));
  findit_instance_set_description($financial_aid_url, st('URL of the financial support page'));
  field_update_instance($financial_aid_url);

  $registration = findit_add_list_text_field('node', FINDIT_FIELD_REGISTRATION, $bundle, st('Registration/Application'));
  findit_field_set_allowed_values(FINDIT_FIELD_REGISTRATION, array(
    'ongoing' => st('Ongoing'),
    'dates' => st('Specific dates'),
  ));
  findit_instance_set_widget_type($registration, 'options_buttons');
  field_update_instance($registration);

  $registration_dates = findit_add_date_field('node', FINDIT_FIELD_REGISTRATION_DATES, $bundle, st('If needed, type the registration/application dates'), FIELD_CARDINALITY_UNLIMITED);
  findit_instance_set_description($registration_dates, st('Please add the registration/application dates and times below. Ex. Jan 10-20: Early bird registration (9am-5pm); Jan 21-31: Regular registration (9am-5pm), etc. NOTE: If you would like the registration dates to actually show up on the Find It calendar, create a separate event for that.'));
  field_update_instance($registration_dates);

  $registration_instructions = findit_add_text_long_field('node', FINDIT_FIELD_REGISTRATION_INSTRUCTIONS, $bundle, st('Registration/Application instructions'));
  findit_instance_set_description($registration_instructions, st('Every program is different. Please provide a detailed step-by-step explanation of how to register/apply to your program.'));
  field_update_instance($registration_instructions);

  $registration_file = findit_add_file_field('node', FINDIT_FIELD_REGISTRATION_FILE, $bundle, st('Registration/Application instructions - file'));
  findit_instance_set_description($registration_file, st('Are the registration/application instructions in a file that people should be able to download? If so, add the name of the file here'));
  field_update_instance($registration_file);

  $registration_url = findit_add_url_field('node', FINDIT_FIELD_REGISTRATION_URL, $bundle, st('Registration/Application - URL'));
  findit_instance_set_description($registration_url, st('URL of the registration/application page'));
  field_update_instance($registration_url);

  $program_url = findit_add_url_field('node', FINDIT_FIELD_PROGRAM_URL, $bundle, st('Program URL'));
  findit_instance_set_description($program_url, st('Enter the URL of the program\'s website, if any.'));
  field_update_instance($program_url);

  $facebook_page = findit_add_url_field('node', FINDIT_FIELD_FACEBOOK_PAGE, $bundle, st('Program Facebook page'));
  findit_instance_set_description($facebook_page, st("Enter the URL of the program's Facebook page, if any."));
  field_update_instance($facebook_page);

  $twitter_handle = findit_add_text_field('node', FINDIT_FIELD_TWITTER_HANDLE, $bundle, st('Program Twitter handle'));
  findit_instance_set_description($twitter_handle, st("Enter the program's Twitter handle/username, if any."));
  field_update_instance($twitter_handle);

  $contact_information = findit_add_text_long_field('node', FINDIT_FIELD_CONTACT_INFORMATION, $bundle, st('Contact'));
  findit_instance_set_description($contact_information, st('Please include the most useful and reliable contact information below'));
  field_update_instance($contact_information);

  // Group fields.

  $weight = 0;
  $group_basic_information = (object) array(
    'identifier' => "group_basic_information|node|$bundle|form",
    'group_name' => 'group_basic_information',
    'entity_type' => 'node',
    'bundle' => $bundle,
    'mode' => 'form',
    'label' => st('What'),
    'weight' => $weight++,
    'children' => array(
      'title',
      'body',
      FINDIT_FIELD_ORGANIZATIONS,
      FINDIT_FIELD_LOGO,
      FINDIT_FIELD_PROGRAM_CATEGORIES,
    ),
    'format_type' => 'fieldset',
    'format_settings' => array(
      'instance_settings' => array(
        'required_fields' => 1,
        'show_label' => 1,
      ),
      'formatter' => 'open',
    ),
  );
  field_group_group_save($group_basic_information);

  $group_when = (object) array(
    'identifier' => "group_when|node|$bundle|form",
    'group_name' => 'group_when',
    'entity_type' => 'node',
    'bundle' => $bundle,
    'mode' => 'form',
    'label' => st('When'),
    'weight' => $weight++,
    'children' => array(
      FINDIT_FIELD_TIME_DAY_OF_WEEK,
      FINDIT_FIELD_TIME_OF_DAY,
      FINDIT_FIELD_TIME_OF_YEAR,
      FINDIT_FIELD_TIME_OTHER,
      FINDIT_FIELD_TIMES,
      FINDIT_FIELD_AGENDA,
    ),
    'format_type' => 'fieldset',
    'format_settings' => array(
      'instance_settings' => array(
        'required_fields' => 0,
        'show_label' => 1,
      ),
      'formatter' => 'open',
    ),
  );
  field_group_group_save($group_when);

  $group_where = (object) array(
    'identifier' => "group_where|node|$bundle|form",
    'group_name' => 'group_where',
    'entity_type' => 'node',
    'bundle' => $bundle,
    'mode' => 'form',
    'label' => st('Where'),
    'weight' => $weight++,
    'children' => array(
      FINDIT_FIELD_LOCATIONS,
      FINDIT_FIELD_TRANSPORTATION,
      FINDIT_FIELD_TRANSPORTATION_NOTES,
    ),
    'format_type' => 'fieldset',
    'format_settings' => array(
      'instance_settings' => array(
        'required_fields' => 0,
        'show_label' => 1,
      ),
      'formatter' => 'open',
    ),
  );
  field_group_group_save($group_where);

  $group_audience = (object) array(
    'identifier' => "group_audience|node|$bundle|form",
    'group_name' => 'group_audience',
    'entity_type' => 'node',
    'bundle' => $bundle,
    'mode' => 'form',
    'label' => st('Who (for whom)'),
    'weight' => $weight++,
    'children' => array(
      FINDIT_FIELD_AGE_ELIGIBILITY,
      FINDIT_FIELD_GRADE_ELIGIBILITY,
      FINDIT_FIELD_OTHER_ELIGIBILITY,
      FINDIT_FIELD_ELIGIBILITY_NOTES,
      FINDIT_FIELD_ACCESSIBILITY,
      FINDIT_FIELD_ACCESSIBILITY_NOTES,
    ),
    'format_type' => 'fieldset',
    'format_settings' => array(
      'instance_settings' => array(
        'required_fields' => 0,
        'show_label' => 1,
      ),
      'formatter' => 'open',
    ),
  );
  field_group_group_save($group_audience);

  $group_cost = (object) array(
    'identifier' => "group_cost|node|$bundle|form",
    'group_name' => 'group_cost',
    'entity_type' => 'node',
    'bundle' => $bundle,
    'mode' => 'form',
    'label' => st('Cost'),
    'weight' => $weight++,
    'children' => array(
      FINDIT_FIELD_GRATIS,
      FINDIT_FIELD_COST,
      FINDIT_FIELD_FINANCIAL_AID_SUPPORT,
      FINDIT_FIELD_FINANCIAL_AID_VOUCHERS,
      FINDIT_FIELD_FINANCIAL_AID_NOTES,
      FINDIT_FIELD_FINANCIAL_AID_FILE,
      FINDIT_FIELD_FINANCIAL_AID_URL,
    ),
    'format_type' => 'fieldset',
    'format_settings' => array(
      'instance_settings' => array(
        'required_fields' => 0,
        'show_label' => 1,
      ),
      'formatter' => 'open',
    ),
  );
  field_group_group_save($group_cost);

  $group_registration = (object) array(
    'identifier' => "group_registration|node|$bundle|form",
    'group_name' => 'group_registration',
    'entity_type' => 'node',
    'bundle' => $bundle,
    'mode' => 'form',
    'label' => st('Registration/Application'),
    'weight' => $weight++,
    'children' => array(
      FINDIT_FIELD_REGISTRATION,
      FINDIT_FIELD_REGISTRATION_DATES,
      FINDIT_FIELD_REGISTRATION_INSTRUCTIONS,
      FINDIT_FIELD_REGISTRATION_FILE,
      FINDIT_FIELD_REGISTRATION_URL,
    ),
    'format_type' => 'fieldset',
    'format_settings' => array(
      'instance_settings' => array(
        'required_fields' => 0,
        'show_label' => 1,
      ),
      'formatter' => 'open',
    ),
  );
  field_group_group_save($group_registration);

  $group_additional_information = (object) array(
    'identifier' => "group_additional_information|node|$bundle|form",
    'group_name' => 'group_additional_information',
    'entity_type' => 'node',
    'bundle' => $bundle,
    'mode' => 'form',
    'label' => st('Additional information'),
    'weight' => $weight++,
    'children' => array(
      FINDIT_FIELD_CONTACT_INFORMATION,
      FINDIT_FIELD_PROGRAM_URL,
      FINDIT_FIELD_FACEBOOK_PAGE,
      FINDIT_FIELD_TWITTER_HANDLE,
    ),
    'format_type' => 'fieldset',
    'format_settings' => array(
      'instance_settings' => array(
        'required_fields' => 0,
        'show_label' => 1,
      ),
      'formatter' => 'open',
    ),
  );
  field_group_group_save($group_additional_information);
}

/**
 * Creates content type Event.
 */
function findit_add_node_type_event() {
  $bundle = 'event';

  // Content type setup.

  $type = array(
    'type' => $bundle,
    'name' => st('Event'),
    'base' => 'node_content',
    'description' => st(""),
    'custom' => 1,
    'modified' => 1,
    'locked' => 0,
    'title_label' => st('Event name'),
  );
  $type = node_type_set_defaults($type);
  node_type_save($type);
  rdf_mapping_save(array(
    'type' => 'node',
    'bundle' => $bundle,
    'mapping' => array(
      'rdftype' => array('foaf:Document'),
    ),
  ));
  variable_set("node_options_$bundle", array('status', 'revision'));
  variable_set("comment_$bundle", COMMENT_NODE_HIDDEN);
  variable_set("node_submitted_$bundle", FALSE);
  variable_set("language_content_type_$bundle", TRANSLATION_ENABLED);
  variable_set("clone_reset_$bundle", 1);

  // Add fields.

  $body = node_add_body_field((object) array('type' => $bundle), st('Event description'));
  findit_instance_set_description($body, st('Brief description of what your program is all about (50 words). Avoid technical or complex terminology. The first 10 words or so will be displayed in search results.'));
  field_update_instance($body);

  $organizations = findit_add_entityreference_field('node', FINDIT_FIELD_ORGANIZATIONS, $bundle, array('organization'), st('Organizer(s)'), FIELD_CARDINALITY_UNLIMITED);
  findit_instance_set_description($organizations, st("Type in the organization(s) responsible for this event. We need this information to connect this form with the organization's form."));
  findit_instance_set_required($organizations);
  findit_instance_set_widget_settings($organizations, array('references_dialog_add' => TRUE));
  field_update_instance($organizations);

  $programs = findit_add_entityreference_field('node', FINDIT_FIELD_PROGRAMS, $bundle, array('program'), st('Associated program(s)'), FIELD_CARDINALITY_UNLIMITED);
  findit_instance_set_description($programs, st("Is this event part of an existing program or activity? For instance, does it mark the beginning or end of the registration period, the celebration of a class, or an important milestone within a larger activity? If so, list the name(s) of the associated program(s) below."));
  field_update_instance($programs);

  findit_add_image_field('node', FINDIT_FIELD_LOGO, $bundle, st('Picture or logo'));

  $program_categories = findit_add_term_reference_field('node', FINDIT_FIELD_PROGRAM_CATEGORIES, $bundle, 'program_categories', st('Event categories'), FIELD_CARDINALITY_UNLIMITED);
  findit_instance_set_required($program_categories);
  findit_instance_set_widget_type($program_categories, 'options_buttons');
  field_update_instance($program_categories);


  findit_add_date_field('node', FINDIT_FIELD_EVENT_DATE, $bundle, st('Event date(s)'), FIELD_CARDINALITY_UNLIMITED);
  findit_field_set_setting(FINDIT_FIELD_EVENT_DATE, 'todate', 'optional');

  $event_agenda = findit_add_text_long_field('node', FINDIT_FIELD_AGENDA, $bundle, st('Event agenda'));
  findit_instance_set_description($event_agenda, st('Please add the registration/application dates and times below. Ex. Jan 10-20: Early bird registration (9am-5pm); Jan 21-31: Regular registration (9am-5pm), etc. NOTE: If you would like the registration dates to actually show up on the Find It calendar, create a separate event for that.'));
  field_update_instance($event_agenda);

  $event_time_of_year = findit_add_term_reference_field('node', FINDIT_FIELD_TIME_OF_YEAR, $bundle, 'time_of_year', st('Time of year'), FIELD_CARDINALITY_UNLIMITED);
  findit_instance_set_widget_type($event_time_of_year, 'options_buttons');
  field_update_instance($event_time_of_year);

  $event_time_other = findit_add_term_reference_field('node', FINDIT_FIELD_TIME_OTHER, $bundle, 'time_other', st('Other times'), FIELD_CARDINALITY_UNLIMITED);
  findit_instance_set_widget_type($event_time_other, 'options_buttons');
  field_update_instance($event_time_other);

  $event_time = findit_add_term_reference_field('node', FINDIT_FIELD_TIMES, $bundle, 'times', st("Event time"), FIELD_CARDINALITY_UNLIMITED);
  findit_instance_set_description($event_time, st("When does this event run? Check all that apply."));
  findit_instance_set_widget_type($event_time, 'options_buttons');
  field_update_instance($event_time);

  $program_categories = findit_add_term_reference_field('node', FINDIT_FIELD_PROGRAM_CATEGORIES, $bundle, 'program_categories', st("What kind of event is this?"), FIELD_CARDINALITY_UNLIMITED);
  findit_instance_set_description($program_categories, st("Check all that apply"));
  findit_instance_set_widget_type($program_categories, 'options_buttons');
  field_update_instance($program_categories);

  $event_locations = findit_add_entityreference_field('node', FINDIT_FIELD_LOCATIONS, $bundle, array('location'), st('Location(s)'), FIELD_CARDINALITY_UNLIMITED);
  findit_instance_set_description($event_locations, st("Enter the name of the site for each location of the event."));
  findit_instance_set_widget_settings($event_locations, array('references_dialog_add' => TRUE));
  field_update_instance($event_locations);

  $age_eligibility = findit_add_list_text_field('node', FINDIT_FIELD_AGE_ELIGIBILITY, $bundle, st('Age eligibility'), FIELD_CARDINALITY_UNLIMITED);
  findit_instance_set_description($age_eligibility, st('Check all that apply'));
  findit_instance_set_required($age_eligibility);
  findit_instance_set_widget_type($age_eligibility, 'slide_with_style_slider');
  field_update_instance($age_eligibility);

  $grade_eligibility = findit_add_term_reference_field('node', FINDIT_FIELD_GRADE_ELIGIBILITY, $bundle, 'grade_eligibility_options', st('Grade eligibility'), FIELD_CARDINALITY_UNLIMITED);
  findit_instance_set_description($grade_eligibility, st('Check all that apply if, in addition to age, your events requires participants to be at specific grades'));
  findit_instance_set_widget_type($grade_eligibility, 'options_buttons');
  field_update_instance($grade_eligibility);

  $other_eligibility = findit_add_term_reference_field('node', FINDIT_FIELD_OTHER_ELIGIBILITY, $bundle, 'other_eligibility_options', st('Other eligibility'), FIELD_CARDINALITY_UNLIMITED);
  findit_instance_set_widget_type($other_eligibility, 'options_buttons');
  field_update_instance($other_eligibility);

  $accessibility = findit_add_term_reference_field('node', FINDIT_FIELD_ACCESSIBILITY, $bundle, 'accessibility_options', st('Accessibility'), FIELD_CARDINALITY_UNLIMITED);
  findit_instance_set_widget_type($accessibility, 'options_buttons');
  field_update_instance($accessibility);

  $accessibility_notes = findit_add_text_long_field('node', FINDIT_FIELD_ACCESSIBILITY_NOTES, $bundle, st('Accessibility - additional information'));
  findit_instance_set_description($accessibility_notes, st('If needed, insert additional accessibility information below'));
  field_update_instance($accessibility_notes);

  findit_add_list_boolean_field('node', FINDIT_FIELD_GRATIS, $bundle, st('Is this a free event?'));
  findit_field_set_allowed_values(FINDIT_FIELD_GRATIS, array(
    1 => st('Yes'),
    0 => st('No'),
  ));

  $cost = findit_add_number_float_field('node', FINDIT_FIELD_COST, $bundle, st('If not free, program cost'));
  findit_instance_set_settings($cost, array(
    'min' => 0,
    'max' => '',
    'prefix' => '$',
    'suffix' => '',
  ));
  field_update_instance($cost);

  findit_add_list_boolean_field('node', FINDIT_FIELD_FINANCIAL_AID_SUPPORT, $bundle, st('Does this event offer any financial support or scholarships?'));

  findit_add_list_boolean_field('node', FINDIT_FIELD_FINANCIAL_AID_VOUCHERS, $bundle, st('Does this event accept vouchers?'));

  $financial_aid_notes = findit_add_text_long_field('node', FINDIT_FIELD_FINANCIAL_AID_NOTES, $bundle, st('Financial support - additional information'));
  findit_instance_set_description($financial_aid_notes, st('If needed, insert additional financial support notes below'));
  field_update_instance($financial_aid_notes);

  $financial_aid_file = findit_add_file_field('node', FINDIT_FIELD_FINANCIAL_AID_FILE, $bundle, st('Financial support - additional information - file'));
  findit_instance_set_description($financial_aid_file, st('Are the financial support instructions in a file that people should be able to download? If so, add the name of the file here'));
  field_update_instance($financial_aid_file);

  $financial_aid_url = findit_add_url_field('node', FINDIT_FIELD_FINANCIAL_AID_URL, $bundle, st('Financial support - additional information - URL'));
  findit_instance_set_description($financial_aid_url, st('URL of the financial support page'));
  field_update_instance($financial_aid_url);

  $registration_required = findit_add_list_boolean_field('node', FINDIT_FIELD_REGISTRATION_REQUIRED, $bundle, st('Does this event require registration/application?'));
  findit_field_set_allowed_values(FINDIT_FIELD_REGISTRATION_REQUIRED, array(
    1 => st('Yes'),
    0 => st('No'),
  ));
  findit_instance_set_required($registration_required);
  field_update_instance($registration_required);

  $registration_dates = findit_add_date_field('node', FINDIT_FIELD_REGISTRATION_DATES, $bundle, st('Registration/Application dates'), FIELD_CARDINALITY_UNLIMITED);
  findit_instance_set_description($registration_dates, st('Please add the registration/application dates and times below. Ex. Jan 10-20: Early bird registration (9am-5pm); Jan 21-31: Regular registration (9am-5pm), etc. NOTE: If you would like the registration dates to actually show up on the Find It calendar, create a separate event for that.'));
  field_update_instance($registration_dates);

  $registration_instructions = findit_add_text_long_field('node', FINDIT_FIELD_REGISTRATION_INSTRUCTIONS, $bundle, st('Registration/Application instructions'));
  findit_instance_set_description($registration_instructions, st('Text describing how to register/application for the event'));
  field_update_instance($registration_instructions);

  $registration_file = findit_add_file_field('node', FINDIT_FIELD_REGISTRATION_FILE, $bundle, st('Registration/Application instructions - file'));
  findit_instance_set_description($registration_file, st('Name of the file with registration/application instructions'));
  field_update_instance($registration_file);

  $registration_url = findit_add_url_field('node', FINDIT_FIELD_REGISTRATION_URL, $bundle, st('Registration/Application - URL'));
  findit_instance_set_description($registration_url, st('URL of the registration/application page'));
  field_update_instance($registration_url);

  $contact_information = findit_add_text_long_field('node', FINDIT_FIELD_CONTACT_INFORMATION, $bundle, st('Contact'));
  findit_instance_set_description($contact_information, st('Please include the most useful and reliable contact information below'));
  field_update_instance($contact_information);

  $event_url = findit_add_url_field('node', FINDIT_FIELD_EVENT_URL, $bundle, st('Event URL'));
  findit_instance_set_description($event_url, st('Enter the URL of the program\'s website, if any.'));
  field_update_instance($event_url);

  $facebook_page = findit_add_url_field('node', FINDIT_FIELD_FACEBOOK_PAGE, $bundle, st('Event Facebook page'));
  findit_instance_set_description($facebook_page, st("Enter the URL of the program's Facebook page, if any."));
  field_update_instance($facebook_page);

  $twitter_handle = findit_add_text_field('node', FINDIT_FIELD_TWITTER_HANDLE, $bundle, st('Event Twitter handle'));
  findit_instance_set_description($twitter_handle, st("Enter the program's Twitter handle/username, if any."));
  field_update_instance($twitter_handle);

  $amenities = findit_add_term_reference_field('node', FINDIT_FIELD_AMENITIES, $bundle, 'amenities', st('Amenities'), FIELD_CARDINALITY_UNLIMITED);
  findit_instance_set_description($amenities, st("Check all that apply"));
  findit_instance_set_widget_type($amenities, 'options_buttons');
  field_update_instance($amenities);

  // Group fields.

  $weight = 0;
  $group_basic_information = (object) array(
    'identifier' => "group_basic_information|node|$bundle|form",
    'group_name' => 'group_basic_information',
    'entity_type' => 'node',
    'bundle' => $bundle,
    'mode' => 'form',
    'label' => st('What'),
    'weight' => $weight++,
    'children' => array(
      'title',
      'body',
      FINDIT_FIELD_ORGANIZATIONS,
      FINDIT_FIELD_PROGRAMS,
      FINDIT_FIELD_LOGO,
      FINDIT_FIELD_PROGRAM_CATEGORIES,
    ),
    'format_type' => 'fieldset',
    'format_settings' => array(
      'instance_settings' => array(
        'required_fields' => 1,
        'show_label' => 1,
      ),
      'formatter' => 'open',
    ),
  );
  field_group_group_save($group_basic_information);

  $group_when = (object) array(
    'identifier' => "group_when|node|$bundle|form",
    'group_name' => 'group_when',
    'entity_type' => 'node',
    'bundle' => $bundle,
    'mode' => 'form',
    'label' => st('When'),
    'weight' => $weight++,
    'children' => array(
      FINDIT_FIELD_EVENT_DATE,
      FINDIT_FIELD_AGENDA,
      FINDIT_FIELD_TIME_OF_YEAR,
      FINDIT_FIELD_TIME_OTHER,
      FINDIT_FIELD_TIMES,
    ),
    'format_type' => 'fieldset',
    'format_settings' => array(
      'instance_settings' => array(
        'required_fields' => 0,
        'show_label' => 1,
      ),
      'formatter' => 'open',
    ),
  );
  field_group_group_save($group_when);

  $group_where = (object) array(
    'identifier' => "group_where|node|$bundle|form",
    'group_name' => 'group_where',
    'entity_type' => 'node',
    'bundle' => $bundle,
    'mode' => 'form',
    'label' => st('Where'),
    'weight' => $weight++,
    'children' => array(
      FINDIT_FIELD_LOCATIONS,
    ),
    'format_type' => 'fieldset',
    'format_settings' => array(
      'instance_settings' => array(
        'required_fields' => 0,
        'show_label' => 1,
      ),
      'formatter' => 'open',
    ),
  );
  field_group_group_save($group_where);

  $group_audience = (object) array(
    'identifier' => "group_audience|node|$bundle|form",
    'group_name' => 'group_audience',
    'entity_type' => 'node',
    'bundle' => $bundle,
    'mode' => 'form',
    'label' => st('Who (for whom)'),
    'weight' => $weight++,
    'children' => array(
      FINDIT_FIELD_AGE_ELIGIBILITY,
      FINDIT_FIELD_GRADE_ELIGIBILITY,
      FINDIT_FIELD_OTHER_ELIGIBILITY,
      FINDIT_FIELD_ACCESSIBILITY,
      FINDIT_FIELD_ACCESSIBILITY_NOTES,
    ),
    'format_type' => 'fieldset',
    'format_settings' => array(
      'instance_settings' => array(
        'required_fields' => 0,
        'show_label' => 1,
      ),
      'formatter' => 'open',
    ),
  );
  field_group_group_save($group_audience);

  $group_cost = (object) array(
    'identifier' => "group_cost|node|$bundle|form",
    'group_name' => 'group_cost',
    'entity_type' => 'node',
    'bundle' => $bundle,
    'mode' => 'form',
    'label' => st('Cost'),
    'weight' => $weight++,
    'children' => array(
      FINDIT_FIELD_GRATIS,
      FINDIT_FIELD_COST,
      FINDIT_FIELD_FINANCIAL_AID_SUPPORT,
      FINDIT_FIELD_FINANCIAL_AID_VOUCHERS,
      FINDIT_FIELD_FINANCIAL_AID_NOTES,
      FINDIT_FIELD_FINANCIAL_AID_FILE,
      FINDIT_FIELD_FINANCIAL_AID_URL,
    ),
    'format_type' => 'fieldset',
    'format_settings' => array(
      'instance_settings' => array(
        'required_fields' => 0,
        'show_label' => 1,
      ),
      'formatter' => 'open',
    ),
  );
  field_group_group_save($group_cost);

  $group_registration = (object) array(
    'identifier' => "group_registration|node|$bundle|form",
    'group_name' => 'group_registration',
    'entity_type' => 'node',
    'bundle' => $bundle,
    'mode' => 'form',
    'label' => st('Registration/Application'),
    'weight' => $weight++,
    'children' => array(
      FINDIT_FIELD_REGISTRATION_REQUIRED,
      FINDIT_FIELD_REGISTRATION_DATES,
      FINDIT_FIELD_REGISTRATION_INSTRUCTIONS,
      FINDIT_FIELD_REGISTRATION_FILE,
      FINDIT_FIELD_REGISTRATION_URL,
    ),
    'format_type' => 'fieldset',
    'format_settings' => array(
      'instance_settings' => array(
        'required_fields' => 0,
        'show_label' => 1,
      ),
      'formatter' => 'open',
    ),
  );
  field_group_group_save($group_registration);

  $group_additional_information = (object) array(
    'identifier' => "group_additional_information|node|$bundle|form",
    'group_name' => 'group_additional_information',
    'entity_type' => 'node',
    'bundle' => $bundle,
    'mode' => 'form',
    'label' => st('Additional information'),
    'weight' => $weight++,
    'children' => array(
      FINDIT_FIELD_CONTACT_INFORMATION,
      FINDIT_FIELD_EVENT_URL,
      FINDIT_FIELD_FACEBOOK_PAGE,
      FINDIT_FIELD_TWITTER_HANDLE,
      FINDIT_FIELD_AMENITIES,
    ),
    'format_type' => 'fieldset',
    'format_settings' => array(
      'instance_settings' => array(
        'required_fields' => 0,
        'show_label' => 1,
      ),
      'formatter' => 'open',
    ),
  );
  field_group_group_save($group_additional_information);
}

/**
 * Creates content type announcement.
 */
function findit_add_node_type_announcement() {
  $bundle = 'announcement';

  // Content type setup.

  $type = array(
    'type' => $bundle,
    'name' => st('Announcement'),
    'base' => 'node_content',
    'description' => st(""),
    'custom' => 1,
    'modified' => 1,
    'locked' => 0,
  );
  $type = node_type_set_defaults($type);
  node_type_save($type);
  rdf_mapping_save(array(
    'type' => 'node',
    'bundle' => $bundle,
    'mapping' => array(
      'rdftype' => array('foaf:Document'),
    ),
  ));
  variable_set("node_options_$bundle", array('status', 'revision'));
  variable_set("comment_$bundle", COMMENT_NODE_HIDDEN);
  variable_set("node_submitted_$bundle", FALSE);
  variable_set("language_content_type_$bundle", TRANSLATION_ENABLED);
  variable_set("clone_reset_$bundle", 1);

  // Add fields.

  $body = node_add_body_field((object) array('type' => $bundle), st('Body'));
  findit_instance_set_required($body);
  field_update_instance($body);

  $publishing_date = findit_add_date_field('node', FINDIT_FIELD_PUBLISHING_DATE, $bundle, st('Publishing Date'));
  findit_field_set_granularity(FINDIT_FIELD_PUBLISHING_DATE, array(
    'year' => 'year',
    'month' => 'month',
    'day' => 'day',
    'hour' => 0,
    'minute' => 0,
    'second' => 0,
  ));
  findit_instance_set_description($publishing_date, st("The date the announcement is supposed to go online."));
  findit_instance_set_required($publishing_date);
  findit_instance_set_display_type($publishing_date, 'teaser', 'date_default');
  findit_instance_set_display_label($publishing_date, 'teaser', 'inline');
  findit_instance_set_display_weight($publishing_date, 'teaser', 1);
  findit_instance_set_display_settings($publishing_date, 'teaser', array(
    'format_type' => 'long',
    'fromto'          => 'both',
  ));
  field_update_instance($publishing_date);

  $expiration_date = findit_add_date_field('node', FINDIT_FIELD_EXPIRATION_DATE, $bundle, st('Expiration Date'));
  findit_field_set_granularity(FINDIT_FIELD_EXPIRATION_DATE, array(
    'year' => 'year',
    'month' => 'month',
    'day' => 'day',
    'hour' => 0,
    'minute' => 0,
    'second' => 0,
  ));
  findit_instance_set_description($expiration_date, st("The date the announcement is supposed to go offline."));
  findit_instance_set_required($expiration_date);
  findit_instance_set_settings($expiration_date, array(
    'default_value' => 'strtotime',
    'default_value_code' => '+2 weeks',
    'default_value2' => 'same',
    'default_value_code2' => '',
    'user_register_form' => FALSE,
  ));
  findit_instance_set_display_type($expiration_date, 'teaser', 'date_default');
  findit_instance_set_display_label($expiration_date, 'teaser', 'inline');
  findit_instance_set_display_weight($expiration_date, 'teaser', 2);
  findit_instance_set_display_settings($expiration_date, 'teaser', array(
    'format_type'     => 'long',
    'fromto'          => 'both',
  ));
  field_update_instance($expiration_date);
}

/**
 * Creates content type Location.
 */
function findit_add_node_type_location() {
  $bundle = 'location';

  // Content type setup.

  $type = array(
    'type' => $bundle,
    'name' => st('Location'),
    'base' => 'node_content',
    'description' => st(""),
    'custom' => 1,
    'modified' => 1,
    'locked' => 0,
  );
  $type = node_type_set_defaults($type);
  node_type_save($type);
  rdf_mapping_save(array(
    'type' => 'node',
    'bundle' => $bundle,
    'mapping' => array(
      'rdftype' => array('foaf:Document'),
    ),
  ));
  variable_set("node_options_$bundle", array('status', 'revision'));
  variable_set("comment_$bundle", COMMENT_NODE_HIDDEN);
  variable_set("node_submitted_$bundle", FALSE);
  variable_set("language_content_type_$bundle", TRANSLATION_ENABLED);
  variable_set('clone_omitted', variable_get('clone_omitted', array()) + array($bundle => $bundle));

  // Auto generate node title.
  variable_set('auto_entitylabel_node_location', '1');
  variable_set('auto_entitylabel_pattern_node_location', '[node:field_location_name] - [node:field_address]');
  variable_set('auto_entitylabel_php_node_location', '2');

  // Add fields.

  $location_name = findit_add_text_field('node', FINDIT_FIELD_LOCATION_NAME, $bundle, st('Location name'));
  findit_instance_set_required($location_name);
  field_update_instance($location_name);

  $location_description = findit_add_text_field('node', FINDIT_FIELD_LOCATION_DESCRIPTION, $bundle, st('Location description'));
  findit_instance_set_description($location_description, st('Use this for additional descriptors such as "Main office".'));
  field_update_instance($location_description);

  $geocode = findit_add_geolocation_latlng_field('node', FINDIT_FIELD_GEOCODE, $bundle, st('Address'));
  findit_instance_set_description($geocode, st('Enter a valid street address or click to position the marker on the map'));
  findit_instance_set_required($geocode);
  field_update_instance($geocode);

  $transportation_notes = findit_add_text_long_field('node', FINDIT_FIELD_TRANSPORTATION_NOTES, $bundle, st('Transportation and parking notes'));
  findit_instance_set_description($transportation_notes, st('Enter notes for transportation and parking. We will use the geocode to refer users to an outside service for specific transportation information.'));
  field_update_instance($transportation_notes);

  $address = findit_add_text_field('node', FINDIT_FIELD_ADDRESS, $bundle, st('Address'));
  findit_instance_set_required($address);
  field_update_instance($address);
}

/**
 * Load taxonomy terms for the given vocabulary from the source path.
 *
 * @param string $machine_name
 *   The machine name of a vocabulary.
 * @param string $path
 *   The path to a data file.
 */
function findit_vocabulary_load_terms($machine_name, $path) {
  Migration::registerMigration('TaxonomyTermJSONMigration', $machine_name, array(
    'vocabulary' => $machine_name,
    'path' => $path,
    'disable_hooks' => array(
      'taxonomy_term_insert' => array('pathauto'),
    ),
  ));
  $migration = Migration::getInstance($machine_name);
  $migration->processImport();
}

/**
 * Load nodes of the given type from the source path.
 *
 * @param string $type
 *   The machine name of a content type.
 * @param string $path
 *   The path to a file.
 */
function findit_load_nodes($type, $path, $migration_class) {
  Migration::registerMigration($migration_class, $type, array(
    'type' => $type,
    'path' => $path,
    'disable_hooks' => array(
      'node_insert' => array('pathauto'),
    ),
  ));
  $migration = Migration::getInstance($type);
  $migration->processImport();
}
