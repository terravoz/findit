<?php
/**
 * @file
 * Install, update and uninstall functions for the standard installation profile.
 */

require_once DRUPAL_ROOT . '/profiles/findit/findit.inc';

/**
 * Implements hook_install().
 *
 * Perform actions to set up the site for this profile.
 *
 * @see system_install()
 */
function findit_install() {
  $filtered_html_format = findit_create_filtered_html_format();
  $full_html_format = findit_create_full_html_format();

  $default_theme = 'bartik';
  $admin_theme = 'seven';

  theme_enable(array($default_theme));
  variable_set('theme_default', $default_theme);
  findit_enable_admin_theme($admin_theme);

  // enable some standard blocks.
  findit_add_block(array(
    'module' => 'system',
    'delta' => 'main',
    'theme' => $default_theme,
    'status' => 1,
    'weight' => 0,
    'region' => 'content',
    'pages' => '',
    'cache' => -1,
  ));
  findit_add_block(array(
    'module' => 'user',
    'delta' => 'login',
    'theme' => $default_theme,
    'status' => 1,
    'weight' => 0,
    'region' => 'sidebar_first',
    'pages' => '',
    'cache' => -1,
  ));
  findit_add_block(array(
    'module' => 'system',
    'delta' => 'navigation',
    'theme' => $default_theme,
    'status' => 1,
    'weight' => 0,
    'region' => 'sidebar_first',
    'pages' => '',
    'cache' => -1,
  ));
  findit_add_block(array(
    'module' => 'system',
    'delta' => 'powered-by',
    'theme' => $default_theme,
    'status' => 1,
    'weight' => 10,
    'region' => 'footer',
    'pages' => '',
    'cache' => -1,
  ));
  findit_add_block(array(
    'module' => 'system',
    'delta' => 'help',
    'theme' => $default_theme,
    'status' => 1,
    'weight' => 0,
    'region' => 'help',
    'pages' => '',
    'cache' => -1,
  ));
  findit_add_block(array(
    'module' => 'system',
    'delta' => 'main',
    'theme' => $admin_theme,
    'status' => 1,
    'weight' => 0,
    'region' => 'content',
    'pages' => '',
    'cache' => -1,
  ));
  findit_add_block(array(
    'module' => 'system',
    'delta' => 'help',
    'theme' => $admin_theme,
    'status' => 1,
    'weight' => 0,
    'region' => 'help',
    'pages' => '',
    'cache' => -1,
  ));
  findit_add_block(array(
    'module' => 'user',
    'delta' => 'login',
    'theme' => $admin_theme,
    'status' => 1,
    'weight' => 10,
    'region' => 'content',
    'pages' => '',
    'cache' => -1,
  ));

  $vocabularies = array(
    'organization_type' => st('Organization type'),
    'program_categories' => st('Program Categories'),
    'program_licensors' => st('Program Licensors'),
    'program_accreditors' => st('Program Accreditors'),
    'program_times' => st('Program Times'),
  );

  foreach ($vocabularies as $machine_name => $name) {
    findit_create_vocabulary($name, $machine_name);
    findit_vocabulary_load_terms($machine_name, dirname(__FILE__) . "/data/$machine_name.json");
  }

  findit_add_node_type_page();
  findit_add_node_type_organization();
  findit_add_node_type_program();

  findit_configure_people();
  findit_create_admin_role();
  findit_create_program_coordinator_role();

  // Enable default permissions for system roles.
  $filtered_html_permission = filter_permission_name($filtered_html_format);
  user_role_grant_permissions(DRUPAL_ANONYMOUS_RID, array('access content', 'access comments', $filtered_html_permission));
  user_role_grant_permissions(DRUPAL_AUTHENTICATED_RID, array('access content', 'access comments', 'post comments', 'skip comment approval', $filtered_html_permission));
}

/**
 * Creates the filtered html format.
 *
 * @return object
 */
function findit_create_filtered_html_format() {
  $filtered_html_format = (object) array(
    'format' => 'filtered_html',
    'name' => 'Filtered HTML',
    'weight' => 0,
    'filters' => array(
      // URL filter.
      'filter_url' => array(
        'weight' => 0,
        'status' => 1,
      ),
      // HTML filter.
      'filter_html' => array(
        'weight' => 1,
        'status' => 1,
      ),
      // Line break filter.
      'filter_autop' => array(
        'weight' => 2,
        'status' => 1,
      ),
      // HTML corrector filter.
      'filter_htmlcorrector' => array(
        'weight' => 10,
        'status' => 1,
      ),
    ),
  );
  filter_format_save($filtered_html_format);
  return $filtered_html_format;
}

/**
 * Creates the full html format.
 *
 * @return object
 */
function findit_create_full_html_format() {
  $full_html_format = (object) array(
    'format' => 'full_html',
    'name' => 'Full HTML',
    'weight' => 1,
    'filters' => array(
      // URL filter.
      'filter_url' => array(
        'weight' => 0,
        'status' => 1,
      ),
      // Line break filter.
      'filter_autop' => array(
        'weight' => 1,
        'status' => 1,
      ),
      // HTML corrector filter.
      'filter_htmlcorrector' => array(
        'weight' => 10,
        'status' => 1,
      ),
    ),
  );
  filter_format_save($full_html_format);
  return $full_html_format;
}

/**
 * Create a default role for site administrators.
 *
 * All available permissions are assigned to that role.
 */
function findit_create_admin_role() {
  $admin_role = new stdClass();
  $admin_role->name = 'administrator';
  $admin_role->weight = 2;
  user_role_save($admin_role);
  user_role_grant_permissions($admin_role->rid, array_keys(module_invoke_all('permission')));
  // Set this as the administrator role.
  variable_set('user_admin_role', $admin_role->rid);
  // Assign user 1 the "administrator" role.
  db_insert('users_roles')
    ->fields(array('uid' => 1, 'rid' => $admin_role->rid))
    ->execute();
}

/**
 * Create a default role for program coordinators.
 */
function findit_create_program_coordinator_role() {
  $role = new stdClass();
  $role->name = 'program coordinator';
  $role->weight = 3;
  user_role_save($role);
  user_role_grant_permissions($role->rid, array(
    'access content',
    'access comments',
    'post comments',
    'skip comment approval',
    'create organization content',
    'edit any organization content',
    'delete any organization content',
    'create program content',
    'edit any program content',
    'delete any program content',
    'view own unpublished content'));
}

function findit_configure_people() {
  variable_set('user_pictures', '1');
  variable_set('user_picture_dimensions', '1024x1024');
  variable_set('user_picture_file_size', '800');
  variable_set('user_picture_style', 'thumbnail');
  variable_set('user_register', USER_REGISTER_VISITORS);
}

function findit_add_node_type_page() {
  $type = array(
    'type' => 'page',
    'name' => st('Basic page'),
    'base' => 'node_content',
    'description' => st("Use <em>basic pages</em> for your static content, such as an 'About us' page."),
    'custom' => 1,
    'modified' => 1,
    'locked' => 0,
  );
  $type = node_type_set_defaults($type);
  node_type_save($type);
  rdf_mapping_save(array(
    'type' => 'node',
    'bundle' => 'page',
    'mapping' => array(
      'rdftype' => array('foaf:Document'),
    ),
  ));
  variable_set('node_options_page', array('status'));
  variable_set('comment_page', COMMENT_NODE_HIDDEN);
  variable_set('node_submitted_page', FALSE);
}

function findit_add_node_type_organization() {
  $type = array(
    'type' => 'organization',
    'name' => st('Organization'),
    'base' => 'node_content',
    'description' => st(""),
    'custom' => 1,
    'modified' => 1,
    'locked' => 0,
  );
  $type = node_type_set_defaults($type);
  node_type_save($type);
  rdf_mapping_save(array(
    'type' => 'node',
    'bundle' => 'organization',
    'mapping' => array(
      'rdftype' => array('foaf:Document'),
    ),
  ));
  variable_set('node_options_organization', array('status'));
  variable_set('comment_organization', COMMENT_NODE_HIDDEN);
  variable_set('node_submitted_organization', FALSE);

  node_add_body_field((object) array('type' => 'organization'), st('Organization Description'));
  $organization_url = findit_add_url_field('node', 'field_organization_url', 'organization', st('Organization\'s URL'));
  findit_instance_description($organization_url, st('Enter the URL of the organization\'s website, if any.'));
  field_update_instance($organization_url);
  findit_add_url_field('node', 'field_facebook_page', 'organization', st('Organization\'s Facebook Page'));
  findit_add_text_field('node', 'field_twitter_handle', 'organization', st('Organization\'s Twitter Handle'));
  findit_add_text_long_field('node', 'field_contact_information', 'organization', st('Contact Information'));
  findit_add_text_long_field('node', 'field_organization_notes', 'organization', st('Organization Notes'));
  findit_add_term_reference_field('node', 'field_organization_type', 'organization', 'organization_type');
}

function findit_add_node_type_program() {
  $type = array(
    'type' => 'program',
    'name' => st('Program'),
    'base' => 'node_content',
    'description' => st(""),
    'custom' => 1,
    'modified' => 1,
    'locked' => 0,
    'title_label' => st('Program Name'),
  );
  $type = node_type_set_defaults($type);
  node_type_save($type);
  rdf_mapping_save(array(
    'type' => 'node',
    'bundle' => 'program',
    'mapping' => array(
      'rdftype' => array('foaf:Document'),
    ),
  ));
  variable_set('node_options_program', array('status'));
  variable_set('comment_program', COMMENT_NODE_HIDDEN);
  variable_set('node_submitted_program', FALSE);

  $body = node_add_body_field((object) array('type' => 'program'), st('Program Description'));
  findit_instance_description($body, st('Brief description of what your program is so that the people who are going to use or participate in your program will know what it is all about (50 words). Avoid technical or complex terminology.'));
  findit_instance_required($body);
  field_update_instance($body);
  $organizations = findit_add_entityreference_field('node', 'field_organizations', 'program', array('organization'), st('Organizations'), FIELD_CARDINALITY_UNLIMITED);
  findit_instance_description($organizations, st('Type in the organization(s) responsible for this program. We will need that information to connect this form with the organization.'));
  findit_instance_required($organizations, TRUE);
  field_update_instance($organizations);
  findit_add_image_field('node', 'field_logo', 'program', st('Picture or Logo'));
  $categories = findit_add_term_reference_field('node', 'field_program_categories', 'program', 'program_categories', FIELD_CARDINALITY_UNLIMITED);
  findit_instance_required($categories);
  field_update_instance($categories);
  findit_add_list_boolean_field('node', 'field_licensed', 'program', array(0 => st('Yes'), 1 => st('No')), 'program', st('Are you licensed?'));
  findit_add_term_reference_field('node', 'field_program_licensors', 'program', 'program_licensors', FIELD_CFIELD_CARDINALITY_UNLIMITED);
  findit_add_list_boolean_field('node', 'field_accredited', 'program', array(0 => st('Yes'), 1 => st('No')), 'program', st('Are you accredited?'));
  findit_add_term_reference_field('node', 'field_program_accreditors', 'program', 'program_accreditors', FIELD_CARDINALITY_UNLIMITED);
  findit_add_list_boolean_field('node', 'field_qris', 'program', array(0 => st('Yes'), 1 => st('No')), 'program', st('Do you participate in QRIS - Quality Rating Improvement System?'));
  findit_add_text_long_field('node', 'field_qris_level', 'program', st('If yes, at what level are you currently at?'));
  findit_add_term_reference_field('node', 'field_program_times', 'program', 'program_times', FIELD_CARDINALITY_UNLIMITED);
  $program_schedule = findit_add_text_long_field('node', 'field_program_schedule', 'program', st('Program Schedule'));
  findit_instance_description($program_schedule, st("In the box below, insert the days and times of the program. Please provide as much detail about the events as possible. Don't forget to add special days such as: 12/25: Closed for Christmas, July 10: Special presentation for parents, etc. If needed, feel free to insert multiple sections."));
  field_update_instance($program_schedule);
  $program_url = findit_add_url_field('node', 'field_program_url', 'program', st('Program URL'));
  findit_instance_description($program_url, st('Enter the URL of the program\'s website, if any.'));
  field_update_instance($program_url);
  $facebook_page = findit_add_url_field('node', 'field_facebook_page', 'program', st('Program Facebook Page'));
  findit_instance_description($facebook_page, st("Enter the URL of the program's Facebook page, if any."));
  field_update_instance($facebook_page);
  $twitter_handle = findit_add_text_field('node', 'field_twitter_handle', 'program', st('Program Twitter Handle'));
  findit_instance_description($twitter_handle, st("Enter the program's Twitter handle/username, if any."));
  field_update_instance($twitter_handle);
  $contact_information = findit_add_text_long_field('node', 'field_contact_information', 'program', st('Contact'));
  findit_instance_description($contact_information, st('Please include the most useful and reliable contact information below'));
  field_update_instance($contact_information);
}

/**
 * Load taxonomy terms for the given vocabulary from the source path.
 *
 * @param type $machine_name
 */
function findit_vocabulary_load_terms($machine_name, $path) {
  Migration::registerMigration('TaxonomyTermJSONMigration', $machine_name, array(
    'vocabulary' => $machine_name,
    'path' => $path,
  ));
  $migration = Migration::getInstance($machine_name);
  $migration->processImport();
}
