<?php

/**
 * Alter the outgoing response.
 *
 * @param mixed $response
 *   The response data being returned by the REST service (not yet serialized).
 * @param string $function
 *   The function being called on the REST service.
 * @param string $format
 *   The name of the format serializing the response.
 * @param RestWSResourceControllerInterface $resourceController
 *   The resource controller.
 */
function findit_restws_restws_response_alter(&$response, $function, $formatName, $resourceController) {
  if ($resourceController->resource() == 'node' && $function == 'queryResource' && $formatName == 'json') {
    foreach ($response['list'] as $key => $node) {
      $taxonomy_fields = field_read_fields(array(
        'type' => 'taxonomy_term_reference',
        'entity_type' => 'node',
        'bundle' => $node['type'],
      ));
      //Instead of showing term id show term name
      foreach ($taxonomy_fields as $field_name => $field) {
        if (isset($node[$field_name])) {
          foreach ($node[$field_name] as $delta => $field_value) {
            $tid = $field_value['id'];
            $term = taxonomy_term_load($tid);
            $response['list'][$key][$field_name][$delta]['name'] = $term->name;
            unset($response['list'][$key][$field_name][$delta]['uri']);
            //unset($response['list'][$key][$field_name][$delta]['id']);
            //unset($response['list'][$key][$field_name][$delta]['resource']);
          }
        }
      }
    }

    foreach ($response['list'] as $key => $node) {
      $er_fields = field_read_fields(array(
        'type' => 'entityreference',
        'entity_type' => 'node',
        'bundle' => $node['type'],
      ));

      //Instead of showing term id show term name
      foreach ($er_fields as $field_name => $field) {
        if (isset($node[$field_name])) {
          foreach ($node[$field_name] as $delta => $field_value) {
            $id = $field_value['id'];
            $entity_type = $field_value['resource'];
            $entity = entity_load_single($entity_type, $id);
            $response['list'][$key][$field_name][$delta]['name'] = $entity->title;
            unset($response['list'][$key][$field_name][$delta]['uri']);
            if ($entity->type == 'contact') {
              // ensure they can view this specific item
              //if (entity_access('view', $entity_type, $entity)) {
                // create a meta wrapper to act on for entity
                $wrapper = entity_metadata_wrapper($entity_type, $entity);
                // filter out fields
                $wrap = restws_property_access_filter($wrapper);
                // typecast entity as array for property evaluation
                $eary = (array) $entity;
                foreach ($eary as $property => $value) {
                  // value needs to be removed as it didn't pass wrapper validation
                  if (!isset($wrap[$property])) {
                    unset($eary[$property]);
                  }
                }
                dpm($eary);
              $response['list'][$key][$field_name] = $eary;
              //}
            }
          }
        }
      }
    }
  }
}