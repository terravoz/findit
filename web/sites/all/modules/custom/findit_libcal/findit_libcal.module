<?php
/**
 * @file
 * FindIt LibCal module.
 */

module_load_include('inc', 'findit_libcal', 'findit_libcal.utilities');

/**
 * Implements hook_menu().
 */
function findit_libcal_menu() {
  $items['admin/config/services/findit-libcal'] = array(
    'title' => 'Configuration panel for FindIt LibCal API integration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('findit_libcal_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'file' => 'findit_libcal.admin.inc',
  );

  $items['admin/findit/libcal-events/delete-imported'] = array(
    'title' => 'Delete imported events',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('findit_libcal_delete_imported'),
    'access arguments' => array('access findit statistics'),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'findit_libcal.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function findit_libcal_menu_alter(&$items) {
  $items['admin/findit/libcal-events']['title'] = t('Imported LibCal Events');
  $items['admin/findit/libcal-events']['description'] = t('Imported LibCal Events');
  $items['admin/findit/libcal-events']['type'] = MENU_LOCAL_TASK;
  $items['admin/findit/libcal-events']['weight'] = -90;
}

/**
 * Implements hook_views_api().
 */
function findit_libcal_views_api() {
  return array('api' => 3.0);
}

/**
 * Implements hook_oauth2_clients().
 */
function findit_libcal_oauth2_clients() {
  $server_url = "https://api2.libcal.com/1.1";

  // user-password flow
  $oauth2_clients['findit'] = array(
    'token_endpoint' => $server_url . '/oauth/token',
    'auth_flow' => 'client-credentials', //grant_type
    'client_id' => '129',
    'client_secret' => '653a4eb717ee1185c2b2485ad4166854',
  );

  $oauth2_clients['city_it'] = array(
    'token_endpoint' => $server_url . '/oauth/token',
    'auth_flow' => 'client-credentials',
    'client_id' => '76',
    'client_secret' => '1be4f1c61aea403c94f2b76852ff5fac',
  );

  return $oauth2_clients;
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 */
function findit_libcal_form_event_node_form_alter(&$form, &$form_state) {
  //Hide fields
  $form[FINDIT_FIELD_EVENT_SOURCE]['#access'] = FALSE;
  $form[FINDIT_FIELD_EVENT_LIBCAL_ID]['#access'] = FALSE;
}

/**
 * Implements hook_cron_queue_info()
 */
function findit_libcal_cron_queue_info() {
  $queues['findit_libcal_import_events'] = array(
    'worker callback' => 'findit_libcal_import_events',
    'time' => 120,
  );
  return $queues;
}

/**
 * Implements hook_cron()
 */
function findit_libcal_cron() {
  $cron_last = variable_get('findit_libcal_cron_last');
  if ($cron_last != date('ymd', time())) {
    $start_time = time();
    $findit_libcal_log = variable_get('findit_libcal_log', FALSE);
    try {
      $oauth2_client = oauth2_client_load('findit');
      $access_token = $oauth2_client->getAccessToken();
      $start_date = date('Y-m-d');
      $days = 30;
      //7052 stays fixed
      $query_params = array(
        'cal_id' => 7052,
        'date' => $start_date, //'2017-10-24'
        'days' => $days,
        'limit' => variable_get('findit_libcal_api_limit', 500),
        'access_token' => $access_token
      );
      if ($findit_libcal_log) {
        watchdog('findit_libcal', 'Started importing events from %date into the future 6 months from LibCal.',
          array(
            '%date' => $start_date,
          ), WATCHDOG_INFO);
      }

      $options = array(
        'method' => 'GET',
        'headers' => array(
          'cache-control' => 'no-cache',
        ),
      );

      $libcal_found_ids = array();
      $findit_libcal_import_events_queue = DrupalQueue::get('findit_libcal_import_events');
      //reset queue
      $findit_libcal_import_events_queue->deleteQueue();


      //Run 6 iterations to get events for next 6 months. This operation takes 8-13secs.
      for ($i = 1; $i <= 6; $i++) {
        $result = drupal_http_request('https://api2.libcal.com/1.1/events?' . drupal_http_build_query($query_params), $options);
        if ($findit_libcal_log) {
          watchdog('findit_libcal', 'Got response from server: %response', array('%response' => print_r($result, TRUE)), WATCHDOG_INFO);
        }
        if ($result->code == 200) {
          $data = drupal_json_decode($result->data);
          $events = $data['events'];
          if ($findit_libcal_log) {
            watchdog('findit_libcal', 'Received %num_of_events events from LibCal. %events', array(
              '%num_of_events' => count($events),
              '%events' => print_r($events, TRUE)
            ), WATCHDOG_INFO);
          }

          foreach ($events as $event) {
            $libcal_found_ids[$event['id']] = $event['id'];
            //Add event to the Queue
            $findit_libcal_import_events_queue->createItem($event);
          }
        }
        else {
          //report error and abort
          watchdog('findit_libcal', 'HTTP error: %response', array('%response' => print_r($result, TRUE)), WATCHDOG_ERROR);
          return;
        }
        //Increase for 30 days.
        $query_params['date'] = date('Y-m-d', strtotime("+" . ($i * $days) . " days"));
        watchdog('findit_libcal', "Starting import for date: " . $query_params['date']);
      }

      //get all nids imported from libcal with start date => import date
      $libcal_ids_in_system = findit_libcal_get_imported_events_from_date($start_date);

      if ($libcal_found_ids) {
        //get exclusive list of nids not found in library api
        $libcal_ids_deleted = array_diff_key($libcal_ids_in_system, $libcal_found_ids);
        $libcal_nids_delete = array();
        //Delete events not found in this import
        foreach ($libcal_ids_deleted as $value) {
          $libcal_nids_delete[] = $value->nid;
        }
        if ($libcal_nids_delete) {
          //Delete all Events imported previously but not found anymore in LibCal API (assuming they where deleted there)
          node_delete_multiple($libcal_nids_delete);
          if ($findit_libcal_log) {
            watchdog('findit_libcal', 'Nids marked for deletion %libcal_nids', array(
              '%libcal_nids' => print_r($libcal_nids_delete, TRUE)
            ), WATCHDOG_INFO);
          }
        }
      }
    } catch (Exception $e) {
      watchdog('findit_libcal', $e->getMessage(), array(), WATCHDOG_ERROR);
    }
    //execute cron once a day
    variable_set('findit_libcal_cron_last', date('ymd', time()));

    $end_time = time();
    $total_time = $end_time - $start_time;
    watchdog('findit_libcal', 'Total time: ' . $total_time . " sec. Start time $start_time end time: $end_time");
  }
}

function findit_libcal_import_events($event) {
  $query = new EntityFieldQuery();
  $result = $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'event')
    ->fieldCondition(FINDIT_FIELD_EVENT_LIBCAL_ID, 'value', $event['id'])
    ->pager(1)
    ->execute();

  if (isset($result['node'])) {
    //Update
    $update_event_object = reset($result['node']);
    $updated_nid = _findit_libcal_save_event($event, $update_event_object->nid);
    $updated_nids[] = $updated_nid;
    watchdog('findit_libcal', 'Updated event %nid %event', array(
      '%event' => print_r($event, TRUE),
      '%nid' => $update_event_object->nid,
    ), WATCHDOG_INFO);
  }
  else {
    //Insert
    $imported_nid = _findit_libcal_save_event($event);
    $imported_nids[] = $imported_nid;
    watchdog('findit_libcal', 'Created event nid: %nid %event', array(
      '%nid' => $imported_nid,
      '%event' => print_r($event, TRUE),
    ), WATCHDOG_INFO);
  }
}
