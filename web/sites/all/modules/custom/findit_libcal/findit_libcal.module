<?php
//@todo: Error downloading file, no data recieved for http://lcimages.s3.amazonaws.com/data/feat_img/3963/7052/1497974439.jpg
//@todo: test if update/delete triggers notifications
//@todo: hook_update and delete gets called however variable $node->findit_subscriber_delete_notification_enabled or findit_subscriber_notification_enabled is not called.

/**
 * @file
 * FindIt LibCal module.
 */

/**
 * Implements hook_menu().
 */
function findit_libcal_menu() {
  $items['admin/config/services/findit-libcal'] = array(
    'title' => 'Configuration panel for FindIt LibCal API integration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('findit_libcal_admin_settings'),
    'access arguments' => array('administer site configuration'),
  );
  return $items;
}

/**
 * Implements hook_oauth2_clients().
 */
function findit_libcal_oauth2_clients() {
  $server_url = "https://api2.libcal.com/1.1";

  // user-password flow
  $oauth2_clients['findit'] = array(
    'token_endpoint' => $server_url . '/oauth/token',
    'auth_flow' => 'client-credentials', //grant_type
    'client_id' => '129',
    'client_secret' => '653a4eb717ee1185c2b2485ad4166854',
  );

  $oauth2_clients['city_it'] = array(
    'token_endpoint' => $server_url . '/oauth/token',
    'auth_flow' => 'client-credentials',
    'client_id' => '76',
    'client_secret' => '1be4f1c61aea403c94f2b76852ff5fac',
  );

  return $oauth2_clients;
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 */
function findit_libcal_form_event_node_form_alter(&$form, &$form_state) {
  //Hide fields
  //$form[FINDIT_FIELD_EVENT_SOURCE]['#access'] = FALSE;
  //$form[FINDIT_FIELD_EVENT_LIBCAL_ID]['#access'] = FALSE;
}

/**
 * Implements hook_cron_queue_info()
 */
function findit_libcal_cron_queue_info() {
  $queues['findit_libcal_import_events'] = array(
    'worker callback' => 'findit_libcal_import_events',
    'time' => 120,
  );
  return $queues;
}

/**
 * Implements hook_cron()
 */
function findit_libcal_cron() {
  $cron_last = variable_get('findit_libcal_cron_last');
  if ($cron_last != date('ymd', time())) {
    $start_time = time();
    $findit_libcal_log = variable_get('findit_libcal_log', FALSE);
    try {
      $oauth2_client = oauth2_client_load('findit');
      $access_token = $oauth2_client->getAccessToken();
      $start_date = date('Y-m-d');
      $days = 30;
      //7052 stays fixed
      $query_params = array(
        'cal_id' => 7052,
        'date' => $start_date, //'2017-10-24'
        'days' => $days,
        'limit' => '5',
        //'limit' => '500', //@todo:
        'access_token' => $access_token
      );
      if ($findit_libcal_log) {
        watchdog('findit_libcal', 'Started importing events from %date into the future 6 months from LibCal.',
          array(
            '%date' => $start_date,
          ), WATCHDOG_INFO);
      }

      $options = array(
        'method' => 'GET',
        'headers' => array(
          'cache-control' => 'no-cache',
          //'Authorization' => 'Bearer '.$access_token,
        ),
      );

      $libcal_found_ids = array();
      $findit_libcal_import_events_queue = DrupalQueue::get('findit_libcal_import_events');
      //reset queue
      $findit_libcal_import_events_queue->deleteQueue();


      //Run 6 iterations to get events for next 6 months. This operation takes 8-13secs.
      for ($i = 1; $i <= 6; $i++) {
        $result = drupal_http_request('https://api2.libcal.com/1.1/events?' . drupal_http_build_query($query_params), $options);
        if ($findit_libcal_log) {
          watchdog('findit_libcal', 'Got response from server: %response', array('%response' => print_r($result, TRUE)), WATCHDOG_INFO);
        }
        if ($result->code == 200) {
          $data = drupal_json_decode($result->data);
          $events = $data['events'];
          if ($findit_libcal_log) {
            watchdog('findit_libcal', 'Received %num_of_events events from LibCal. %events', array(
              '%num_of_events' => count($events),
              '%events' => print_r($events, TRUE)
            ), WATCHDOG_INFO);
          }

          foreach ($events as $event) {
            $libcal_found_ids[$event['id']] = $event['id'];
            //Add event to the Queue
            $findit_libcal_import_events_queue->createItem($event);
          }
        }
        else {
          //report error and abort
          watchdog('findit_libcal', 'HTTP error: %response', array('%response' => print_r($result,TRUE)), WATCHDOG_ERROR);
          return;
        }
        //Increase for 30 days.
        $query_params['date'] = date('Y-m-d', strtotime("+" . ($i * $days) . " days"));
        watchdog('findit_libcal', "Starting import for date: " . $query_params['date']);
      }

      //get all nids imported from libcal with start date => import date

      $libcal_ids_in_system = db_query("SELECT node.nid AS nid, node.created AS node_created, 'node' AS field_data_field_event_libcal_id_node_entity_type, field_data_field_event_libcal_id.field_event_libcal_id_value AS libcal_id
FROM 
{node} node
LEFT JOIN {field_data_field_event_libcal_id} field_data_field_event_libcal_id ON node.nid = field_data_field_event_libcal_id.entity_id
LEFT JOIN {field_data_field_event_source} field_data_field_event_source ON node.nid = field_data_field_event_source.entity_id AND (field_data_field_event_source.entity_type = 'node' AND field_data_field_event_source.deleted = '0')
LEFT JOIN {field_data_field_event_date} field_data_field_event_date ON node.nid = field_data_field_event_date.entity_id AND (field_data_field_event_date.entity_type = 'node' AND field_data_field_event_date.deleted = '0')
WHERE (( (node.status = '1') AND (node.type IN  ('event')) AND (field_data_field_event_source.field_event_source_value ='libcal') AND (DATE_FORMAT(ADDTIME(field_data_field_event_date.field_event_date_value, SEC_TO_TIME(-18000)), '%Y-%m-%d') >= :start_date) ))
ORDER BY node_created DESC", array(':start_date' => $start_date))->fetchAllAssoc('libcal_id');

      if($libcal_found_ids) {
        //get exlusive list of nids not found in library api
        $libcal_ids_deleted = array_diff_key($libcal_ids_in_system, $libcal_found_ids);
        $libcal_nids_delete = array();
        //Delete events not found in this import
        foreach($libcal_ids_deleted as $value) {
          $libcal_nids_delete[]=$value->nid;
        }
        if($libcal_nids_delete) {
          //Delete all Events imported previously but not found anymore in LibCal API (assuming they where deleted there)
          node_delete_multiple($libcal_nids_delete);
          if ($findit_libcal_log) {
            watchdog('findit_libcal', 'Nids marked for deletion %libcal_nids', array(
              '%libcal_nids' => print_r($libcal_nids_delete, TRUE)
            ), WATCHDOG_INFO);
          }
        }
      }
    } catch (Exception $e) {
      watchdog('findit_libcal', $e->getMessage(), array(), WATCHDOG_ERROR);
    }
    //execute cron once a day
    variable_set('findit_libcal_cron_last', date('ymd', time()));

    $end_time = time();
    $total_time = $end_time - $start_time;
    watchdog('findit_libcal', 'Total time: ' . $total_time . " sec. Start time $start_time end time: $end_time");
  }
}

function findit_libcal_import_events($event) {
  $query = new EntityFieldQuery();
  $result = $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'event')
    ->fieldCondition(FINDIT_FIELD_EVENT_LIBCAL_ID, 'value', $event['id'])
    ->pager(1)
    ->execute();

  if (isset($result['node'])) {
    //Update
    $update_event_object = reset($result['node']);
    $updated_nids[] = _findit_libcal_save_event($event, $update_event_object->nid);
    watchdog('findit_libcal', 'Updating event %event on node %nid', array(
      '%event' => print_r($event,true),
      '%nid' => $update_event_object->nid,
    ), WATCHDOG_INFO);
  }
  else {
    //Insert
    $imported_nids[] = _findit_libcal_save_event($event);
    watchdog('findit_libcal', 'Importing event %event', array(
      '%event' => print_r($event,true),
    ), WATCHDOG_INFO);
  }
}

//@todo: remove
function _findit_libcal_delete_all_imported_events() {
  variable_set('findit_libcal_cron_last', NULL);
  $query = new EntityFieldQuery();
  $result = $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'event')
    ->fieldCondition(FINDIT_FIELD_EVENT_SOURCE, 'value', 'libcal')
    ->pager(200)
    ->execute();

  if (isset($result['node'])) {
    node_delete_multiple(array_keys($result['node']));
  }
}

/**
 * Settings form callback
 */
function findit_libcal_admin_settings($form, &$form_state) {
  //Enable Log checkbox
  $form['findit_libcal_log'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable Log'),
    '#default_value' => variable_get('findit_libcal_log', FALSE),
  );

  return system_settings_form($form);
}

function findit_libcal_age_map($categories) {
  $ages = array();
  foreach ($categories as $category) {
    switch ($category['name']) {
      case 'Children':
        $ages = array_merge($ages, array(
          '1',
          '2',
          '3',
          '4',
          '5',
          '6',
          '7',
          '8',
          '9',
          '10',
          '11',
          '12'
        ));
        break;
      case 'Teen':
        $ages = array_merge($ages, array(
          '12',
          '13',
          '14',
          '15',
          '16',
          '17',
          '18'
        ));
        break;
      case 'Adult':
        $ages = array_merge($ages, array('18', '19', '20', '21'));
        break;
    }
  }

  if (empty($ages)) {
    //in case no age is marked, Find It should assume the event is for adults.
    $ages = array_merge($ages, array('18', '19', '20', '21'));
  }
  else {
    $ages = array_unique($ages);
  }

  return $ages;
}

function findit_libcal_categories_map($categories) {
  $list_of_categories = array();
  $for_who = findit_libcal_for_who($categories);
  foreach ($categories as $category) {
    switch ($category['name']) {
      /*case 'City event':
        //Used internally by the library. To be ignored by Find It.
        break;*/
      case 'ESOL':
        $list_of_categories[] = 56; //Adult Education/ESOL
        break;
      case 'Storytime':
        $list_of_categories[] = 70; //Early Childhood Activities
        break;
      case 'Author Event':
      case 'Book groups':
      case 'Speaker Series':
        $list_of_categories[] = 66; //Culture
        if ($for_who == 'Adult') {
          $list_of_categories[] = 118; //Adult Education and Activities
        }
        break;
      case 'Social Events':
        $list_of_categories[] = 66; //Culture
        break;
      case 'Film screening':
      case 'Workshops and Classes':
        //if it is for kids, it would be Early Childhood Activities. If it is for adults, then I would say Culture.
        if ($for_who == 'Children') {
          $list_of_categories[] = 70; //Early Childhood Activities
        }
        else {
          $list_of_categories[] = 66; //Culture
          if ($for_who == 'Adult') {
            $list_of_categories[] = 118; //Adult Education and Activities
          }
        }
        break;
      case 'Technology':
        $list_of_categories[] = 45; //Computer Lab Access and Support
        break;
      case 'Cambridge non-profit':
        $list_of_categories[] = 118; //Adult Education and Activities
        break;
    }
  }

  return array_unique($list_of_categories);
}

function findit_libcal_for_who($categories) {
  $for_who = 'Adult'; //If no value then its for Adults
  foreach ($categories as $category) {
    switch ($category['name']) {
      case 'Children':
      case 'Teen':
      case 'Adult':
        $for_who = $category['name'];
        break;
    }
  }

  return $for_who;
}

function findit_libcal_locations_map($location) {
  $locations_map = array(
    //'Boudreau Branch' => 0,
    'Central Square Branch' => 894,
    'Collins Branch' => 898,
    'Main Library' => 504,
    'O\'Connell Branch' => 912,
    'O\'Neil Branch' => 902,

  );
  return isset($locations_map[$location]) ? $locations_map[$location] : NULL;
}

function _findit_libcal_save_event($event, $nid = NULL) {
  if (!$nid) {
    $node = new stdClass();
    $node->type = "event";
    node_object_prepare($node); // Sets some defaults. Invokes hook_prepare() and hook_node_prepare().
    $node->language = LANGUAGE_NONE; // Or e.g. 'en' if locale is enabled
    $node->status = 1; //(1 or 0): published or not
    $node->promote = 0; //(1 or 0): promoted to front page
    $node->comment = 0; // 0 = comments disabled, 1 = read only, 2 = read/write
    $node->uid = 116; //Author is cplibrary
  }
  else {
    $node = node_load($nid);
  }
  $node->title = $event['title'];

  //all events should be tagged under this organization: http://www.finditcambridge.org/content/cambridge-public-library
  $node->field_organizations[$node->language][]['target_id'] = 31;

  //add event_source field and tag imported events with libcal
  $node->{FINDIT_FIELD_EVENT_SOURCE}[$node->language][]['value'] = 'libcal';
  $node->{FINDIT_FIELD_EVENT_LIBCAL_ID}[$node->language][]['value'] = $event['id'];

  // Body
  $node->body[$node->language][0] = array(
    'value' => $event['description'],
    'format' => 'full_html',
  );

  //Locations (Campus)
  $location = findit_libcal_locations_map($event['campus']['name']);
  if ($location) {
    $node->field_locations[$node->language][0]['target_id'] = $location;
  }
  else {
    unset($node->field_locations[$node->language][0]);
  }

  //Age eligibility
  unset($node->field_age_eligibility[$node->language]);
  $ages = findit_libcal_age_map($event['category']);
  foreach ($ages as $age) {
    $node->field_age_eligibility[$node->language][]['value'] = $age;
  }

  //Program categories
  unset($node->field_program_categories[$node->language]);
  $categories = findit_libcal_categories_map($event['category']);
  foreach ($categories as $category) {
    $node->field_program_categories[$node->language][]['tid'] = $category;
  }

  //Event date
  $node->field_event_date[$node->language][0] = array(
    'value' => date('Y-m-d G:i:s', strtotime($event['start'])),
    'value2' => date('Y-m-d G:i:s', strtotime($event['end'])),
    'rrule' => NULL,
    'timezone' => 'UTC',
    'timezone_db' => 'UTC',
    'date_type' => 'datetime',
  );

  unset($node->field_logo[$node->language][0]);
  if ($event['featured_image']) {
    //Event image
    $event_image = _findit_libcal_download_external_file($event['featured_image'], 'public://');

    if ($event_image) {
      //dpm($event_image);
      $node->field_logo[$node->language][0] = $event_image;
    }
  }

  $node = node_submit($node); // Prepare node for saving
  node_save($node);
  return $node->nid;
}

/**
 *
 * param string $url
 *    Full url to file to download
 * param string $uri
 *    Drupal uri of where to save file public://archive/test.pdf
 * param int $save_mode
 *    File save mode from drupal core, ex FILE_EXISTS_REPLACE
 */
function _findit_libcal_download_external_file($url, $uri, $save_mode = FILE_EXISTS_RENAME) {

  $url_info = parse_url($url);
  $url_path_info = pathinfo($url_info['path']);

  //This helps with filenames with spaces
  $url = 'http://' . $url_info['host'] . $url_path_info['dirname'] . '/' . rawurlencode($url_path_info['basename']);
  $uri .= $url_path_info['basename'];
  //Need to remove the filename from the uri
  $uri_target = file_uri_target($uri);
  $uri_scheme = file_uri_scheme($uri);
  $uri_path_info = pathinfo($uri_target);
  $directory = file_stream_wrapper_uri_normalize($uri_scheme . "://" . $uri_path_info['dirname']);

  if (file_prepare_directory($directory, FILE_CREATE_DIRECTORY)) {
    $drupal_result = drupal_http_request($url);
    if (!empty($drupal_result->data)) {
      $path = file_stream_wrapper_uri_normalize($uri);
      $new_file = file_save_data($drupal_result->data, $path, $save_mode);
    }
    else {
      watchdog('findit_libcal', "Error downloading file, no data received for " . $url, array(), WATCHDOG_ERROR);
      return FALSE;
    }

    $new_file->display = 1;
    return (array) $new_file;
  }
  else {
    drupal_set_message("Could not create directory");
  }
}
