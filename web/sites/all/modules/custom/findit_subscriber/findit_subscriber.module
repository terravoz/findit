<?php

/**
 * @file
 * Find IT specific implementation of Subscriber Entity.
 */

/**
 * Implements hook_voipscript_get_script_names().
 */
function findit_subscriber_voipscript_get_script_names() {
  return array(
    'findit_subscriber_receive_confirmation',
  );
}

/**
 * Implements hook_voipscript_load_script().
 */
function findit_subscriber_voipscript_load_script($script_name, $params = NULL) {
  if (!in_array($script_name, findit_subscriber_voipscript_get_script_names())) {
    return;
  }
  require_once dirname(__FILE__) . '/findit_subscriber.voipscripts.inc';
  return $script_name();
}

/**
 * Implements hook_mail().
 */
function findit_subscriber_mail($key, &$message, $params) {
  switch ($key) {
    case 'confirmation':
      return findit_subscriber_confirmation_mail($message, $params['url']);

    case 'event_notification':
      return findit_subscriber_event_notify_mail($message, $params['events']);
  }
}

/****
 * Subscription
 *
 * Custom block and submit handler to allow for using same form to directly
 * subscribe to a node notifications using either mobile number or email.
 */

/**
 * Implements hook_block_info().
 */
function findit_subscriber_block_info() {
  $blocks = array();
  $blocks['findit_subscriber'] = array(
    'info' => t('Find it subscription add or edit'),
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages' => 'node/*',
    'status' => TRUE,
    'region' => 'content',
    'weight' => 15,
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function findit_subscriber_block_view($delta) {
  if ($delta == 'findit_subscriber'
    && ($node = menu_get_object())
    && ! arg(2)
    && in_array($node->type, array('event'))
    // Organizations not yet associated with announcements
    // https://labs.agaric.com/redmine/issues/2401
  ) {
    return array(
      // @todo make subject a setting.
      'subject' => t('Subscribe'),
      'content' => drupal_get_form('findit_subscriber_addedit_form', $node->type, $node->nid),
    );
  }
}

/**
 * Add / Edit subscription lookup form.
 */
function findit_subscriber_addedit_form($form, &$form_state, $type, $nid) {
  if ($type == 'event') {
    $title = t('Event reminder');
    $description = t('Enter your e-mail or mobile number to receive a reminder the day before this event.');
  }
  else {
    $title = t('Organization announcements');
    $description = t('Enter your e-mail or mobile number to receive notifications of announcements from this organization.');
  }
  $form['nid'] = array('#type' => 'value', '#value' => $nid);
  $form['type'] = array('#type' => 'value', '#value' => $type);
  $form['subscriber_id'] = array(
    '#title' => $title,
    '#type' => 'textfield',
    '#size' => 15,
    '#description' => $description,
    '#required' => TRUE,
  );
  $form['submit'] = array('#type' => 'submit', '#value' => t('Submit'));
  return $form;
}

/**
 * Form validate callback.
 *
 * @see subscriber_entity_addedit_form()
 */
function findit_subscriber_addedit_form_validate($form, &$form_state) {
  $subscriber_id = $form_state['values']['subscriber_id'];
  $type = strpos($subscriber_id, '@') ? 'email' : 'sms';
  if ($type == 'sms') {
    // @see voipnumberfield_field_validate().
    $field_info = field_info_field('field_subscriber_voipnumber');
    $subscriber_id = voipnumberfield_format_number($subscriber_id, $field_info['settings']);
    $subscriber_id = VoipCall::NormalizeNumber($subscriber_id);
    $number_country_temp = VoipNumber::getCountryFromNumber($subscriber_id);
    $allowed = FALSE;
    if (!is_array($number_country_temp)) {
      //VoipNumber::getCountryFromNumber can return array of countries or string.
      $number_countries[] = $number_country_temp;
    }
    else {
      $number_countries = $number_country_temp;
    }
    $countries = $field_info['settings']['voipnumberfield_allowed_countries'];
    if (is_array($countries)) {
      // Since $number_countries can be multiple countries we need to check all.
      foreach ($number_countries as $number_country) {
        if (in_array($number_country, $countries)) {
          $allowed = TRUE;
        }
      }
      if (!$allowed) {
        form_set_error(
          $field['field_name'] . '][' . $langcode . '][' . $delta . '][vnid',
          t('Phone number is not recognized US number.')
        );
      }
      else {
        $form_state['values']['subscriber_id'] = $subscriber_id;
      }
    }
  }
  else {
    // @see email_field_validate().
    if (!valid_email_address(trim($subscriber_id))) {
      form_set_error(
        'subscriber_id',
        t('"%mail" is not a valid email address', array('%mail' => $subscriber_id))
      );
    }
  }
}

/**
 * Form submit callback.
 *
 * @see subscriber_entity_addedit_form()
 */
function findit_subscriber_addedit_form_submit($form, &$form_state) {
  $subscriber_id = $form_state['values']['subscriber_id'];
  $type = strpos($subscriber_id, '@') ? 'email' : 'sms';
  $field = $form_state['values']['type'] == 'event' ? 'field_subscriber_events' : 'field_subscriber_organizations';

  if (empty($form_state['values']['subscriber_id'])) {
    drupal_set_message(t('An email address or mobile number is required.'));
    return;
  }

  if ($subscriber = entity_load('subscriber_entity', array($subscriber_id))) {
    $subscriber = reset($subscriber);
    $new = FALSE;
  }
  else {
    $subscriber = entity_get_controller('subscriber_entity')->create(array('bundle' => $type));
    $new = TRUE;
    if ($type == 'sms') {
      $subscriber->field_subscriber_voipnumber[LANGUAGE_NONE][0]['vnid'] = $subscriber_id;
    }
    else {
      $subscriber->field_subscriber_email[LANGUAGE_NONE][0]['email'] = $subscriber_id;
    }
  }

  // Add or remove.
  $addition = TRUE;
  if (!empty($subscriber->$field)) {
    foreach ($subscriber->{$field}[LANGUAGE_NONE] as $delta => $existing_values) {
      if ($existing_values['target_id'] == $form_state['values']['nid']) {
        $addition = FALSE;
        unset($subscriber->{$field}[LANGUAGE_NONE][$delta]);
      }
    }
  }
  if ($addition) {
    $subscriber->{$field}[LANGUAGE_NONE][] = array('target_id' => $form_state['values']['nid']);
  }

  if (subscriber_entity_access('revision')) {
    if ($addition) {
      drupal_set_message(t('Subscription added.'));
    }
    else {
      drupal_set_message(t('Subscription removed.'));
    }
  }
  else {
    if ($addition) {
      if ($new) {
        $subscriber->field_enabled[LANGUAGE_NONE][0]['value'] = 0;
        drupal_set_message(t('New subscription added. Please reply to message sent to confirm.'));
      }
      else {
        $subscriber->field_enabled['und'][0]['value'] = 1;
        $subscriber->is_new_revision = TRUE;
        $subscriber->default_revision = FALSE;
        drupal_set_message(t('Existing subscription updated. Please reply to message sent to confirm.'));
      }
    }
    else {
      drupal_set_message(t('Subscription removed.'));
    }
  }

  $subscriber->save();
  $revision = $subscriber;
  // Force a reload of subscriber entity, because at the moment the vnid is set
  // as the vnid rather than the 'real_vnid' and the number is missing.
  $subscriber_array = entity_load('subscriber_entity', array($subscriber->id), array(), TRUE);
  $subscriber = reset($subscriber_array);

  if (!subscriber_entity_access('revisions') && $addition) {
    if ($type == 'sms') {
      // Send confirmation SMS.
      $voipnumbers = field_get_items('subscriber_entity', $subscriber, $field);
      $number_render = field_view_value('subscriber_entity', $subscriber, $field, $voipnumbers[0]);
      $number = $number_render['#markup'];
      $call = new VoipCall();
      $call->setDestNumber($number);
      $text = t('Your subscription has been updated. Reply to this message with YES if you would like to confirm the changes.');
      voip_text($text, $call);
      drupal_set_message(t('A SMS has been sent to your phone for confirmation.'));
    }
    else {
      // Send confirmation email.
      drupal_mail(
        'findit_subscriber',
        'confirmation',
        $subscriber->field_subscriber_email[LANGUAGE_NONE][0]['email'],
        language_default(),
        array(
          'url' => findit_subscriber_email_confirmation_url($revision),
        )
      );
    }
  }
}

/**
 * Mail callback for confirmation message.
 *
 * @see findit_subscriber_mail()
 */
function findit_subscriber_confirmation_mail(&$message, $url) {
  $langcode = $message['language']->language;
  $message['subject'] = t(
    'Find It subscription confirmation',
    array(),
    array('langcode' => $langcode)
  );
  $message['body'][] = t(
    'Please visit !url to confirm your subscription.',
    array('!url' => $url),
    array('langcode' => $langcode)
  );
}

/****
 * Confirmation handling.
 *
 * Confirmation can be called from incoming SMS, or from clicking
 * on a link in the email.
 *
 * @todo this could be moved on up as available api functions in
 * entity subscriber.
 */

/**
 * Implements hook_menu().
 */
function findit_subscriber_menu() {
  return array(
    'subscriber/confirm/%/%' => array(
      'title' => 'Confirmation',
      'page callback' => 'findit_subscriber_confirm_page',
      'page arguments' => array(2),
      'access callback' => 'findit_subscriber_confirm_page_access',
      'access arguments' => array(2, 3),
    ),
  );
}

/**
 * Menu access callback: subscription confirmation.
 */
function findit_subscriber_confirm_page_access($revision_id, $hash) {
  // Todo When moved into subscriber entity add a user check.
  // Find It we know anyone can access, as long as URL is correct.
  if (!($revision = entity_revision_load('subscriber_entity', $revision_id))) {
    return FALSE;
  }
  if ($hash != findit_subscriber_generate_hash($revision)) {
    return FALSE;
  }

  return TRUE;
}

/**
 * Page callback: subscription confirmed.
 */
function findit_subscriber_confirm_page($revision_id) {
  $revision = entity_revision_load('subscriber_entity', $revision_id);
  if ($revision->default_revision) {
    return t('Subscription already confirmed.');
  }
  else {
    entity_revision_set_default('subscriber_entity', $revision);
    $revision->save();
    return t('Subscription %title has been confirmed.', array('%title' => $revision->subscriber_id));
  }
}

/**
 * Callback to update revision.
 */
function findit_subscriber_revision_update($caller_number) {
  // Extra space is casting workaround, we know it's a string.
  $subscription = subscriber_entity_load(' ' . $caller_number, 'sms');

  $entity_info = entity_get_info('subscriber_entity');
  $id = $entity_info['entity keys']['id'];
  $revision_key = $entity_info['entity keys']['revision'];
  $revision_table = $entity_info['revision table'];

  // Fetch latest updated revision.
  $revision = db_select($revision_table, 'r')
    ->fields('r')
    ->condition($id, $subscription->$id, '=')
    ->orderBy('changed', 'DESC')
    ->orderBy('revision_id', 'DESC')
    ->range(0, 1)
    ->execute()
    ->fetchAssoc();

  // If no revision _how_?
  if (!$revision) {
    return FALSE;
  }

  // If the present revision is the latest don't do anything.
  if ($revision[$revision_key] == $subscription->$revision_key) {
    return $subscription;
  }

  // Make the latest revision the default one.
  $new_subscription = entity_revision_load('subscriber_entity', $revision[$revision_key]);
  entity_revision_set_default('subscriber_entity', $new_subscription);
  $new_subscription->save();
  return $new_subscription;
}

function findit_subscriber_email_confirmation_url($entity_revision) {
  return url(
    'subscriber/confirm/' . $entity_revision->revision_id . '/' . findit_subscriber_generate_hash($entity_revision),
    array('absolute' => TRUE)
  );
}

function findit_subscriber_generate_hash($entity, $action = 'confirm') {
  return drupal_hash_base64(
    $entity->subscriber_id
    . $entity->revision_id
    . findit_subscriber_private_key()
    . $action
    . $entity->changed
  );
}

function findit_subscriber_private_key() {
  if (!($key = variable_get('findit_subscriber_private_key', 0))) {
    $key = drupal_random_key();
    variable_set('findit_subscriber_private_key', $key);
  }
  return $key;
}


/****
 * Send notifications.
 *
 * Regular cron job to trigger sending SMS and email notifications for the site
 * specific messages (presently just events).
 */

/**
 * Implements hook_cron().
 */
function findit_subscriber_cron() {
  $last_run = variable_get('findit_subscriber_cron_run', '@0');
  $last_run_date = new DateTime($last_run);
  $yesterday = new DateTime('yesterday');
  $now = new DateTime();
  // Run notifications if they were last sent yesterday (or earlier),
  // and it is after 4 in the afternoon.
  if ($last_run_date <= $yesterday && $now->format('H') > 15) {
    findit_subscriber_notify_tomorrow();
    variable_set('findit_subscriber_cron_run', $now->format('Y-m-d'));
  }
}

/**
 * Notify subscribers of tomorrows events.
 */
function findit_subscriber_notify_tomorrow() {
  $events = findit_subscriber_events_upcoming();
  foreach ($events as $event) {
    $subscribers = findit_subscriber_event_subscribers($event->nid);
    foreach ($subscribers as $subscriber) {
      $notifications[$subscriber->bundle][$subscriber->subscriber_id]['subscriber'] = $subscriber;
      $notifications[$subscriber->bundle][$subscriber->subscriber_id]['events'][] = $event;
    }
  }

  if (!empty($notifications['sms'])) {
    // Just send one text message per event to subscribers.
    foreach ($notifications['sms'] as $notification) {
      $subscriber = $notification['subscriber'];
      foreach ($notification['events'] as $event) {
        findit_subscriber_queue_sms($subscriber, t('Reminder. Tomorrow @title', array('@title' => $event->title)));
      }
    }
  }

  if (!empty($notifications['email'])) {
    foreach ($notifications['email'] as $notification) {
      $subscriber = $notification['subscriber'];
      drupal_mail(
        'findit_subscriber',
        'event_notification',
        $subscriber->field_subscriber_email[LANGUAGE_NONE][0]['email'],
        language_default(),
        array(
          'events' => $notification['events'],
        )
      );
    }
  }
}

/**
 * Mail callback for event notification.
 *
 * @see findit_subscriber_mail()
 */
function findit_subscriber_event_notify_mail(&$message, $events) {
  $langcode = $message['language']->language;
  $message['subject'] = t(
    'Find IT events tomorrow',
    array(),
    array('langcode' => $langcode)
  );
  $message['body'][] = format_plural(
    count($events),
    'An event you requested notification for happens tomorrow:',
    'Events you requested a notification for happen tomorrow:',
    array(),
    array('langcode' => $langcode)
  );
  foreach($events as $event) {
    $event_time_value = field_get_items('node', $event, FINDIT_FIELD_EVENT_DATE);
    $event_time_render = field_view_value(
      'node',
      $event,
      FINDIT_FIELD_EVENT_DATE,
      $event_time_value[0],
      array(
        'label' => 'hidden',
        // You can't set date_plain format settings ...
        // 'type' => 'date_plain',
        'settings' => array(
          'format_type' => 'medium',
          'show_remaining_days' => FALSE,
          'show_repeat_rule'    => 'show',
        ),
      ),
      $langcode
    );
    // ... However Date default puts in HTML. Bah!
    $event_time = strip_tags($event_time_render['#markup']);
    $message['body'][] = t(
      '@time : @title - !url',
      array(
        '@title' => $event->title,
        '@time' => $event_time,
        '!url' => url('node/' . $event->nid, array('absolute' => TRUE)),
      ),
      array('langcode' => $langcode)
    );
  }
}

/**
 * Get array of all subscribers entities to an event node.
 */
function findit_subscriber_event_subscribers($nid) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'subscriber_entity');
  $query->fieldCondition('field_subscriber_events', 'target_id', $nid, '=');
  $result = $query->execute();
  if (isset($result['subscriber_entity'])) {
    $ids = array_keys($result['subscriber_entity']);
  }
  else {
    $ids = array();
  }
  return entity_load('subscriber_entity', $ids);
}

/**
 * Get array of all tomorrows event nodes.
 *
 * Todo swap this to use its own view, or EFQ.
 */
function findit_subscriber_events_upcoming() {
  $tomorrow = new DateTime('tomorrow');
  $view = views_get_view('event_calendar');
  $view->set_display('page_3');
  $view->set_arguments(array($tomorrow->format('Y-m-d')));
  $view->pre_execute();
  $view->execute();
  // Just because this is lazy using an existing field based view.
  $results = array();
  foreach ($view->result as $result) {
    $results[] = $result->_field_data['nid']['entity'];
  }
  return $results;
}

/**
 * Queue an SMS.
 */
function findit_subscriber_queue_sms($subscriber, $text, $queue = 'findit_notification') {
  $queue = DrupalQueue::get('findit_notification');
  $queue->createQueue();
  $call = new VoipCall(array());
  $number_items = field_get_items('subscriber_entity', $subscriber, 'field_subscriber_voipnumber');
  $number_render = field_view_value('subscriber_entity', $subscriber, 'field_subscriber_voipnumber', $number_items[0]);
  $call->setDestNumber($number_render['#markup']);
  $item = new VoipQueueText($call, $message_render['#markup']);
  $item->tags = array('findit:' . $subscriber->id);
  $queue->createItem($item);
}
